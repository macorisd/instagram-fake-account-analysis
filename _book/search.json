[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Proyecto de análisis de cuentas falsas en Instagram",
    "section": "",
    "text": "1 Importación del dataset y Análisis Exploratorio"
  },
  {
    "objectID": "index.html#section",
    "href": "index.html#section",
    "title": "Proyecto de análisis de cuentas falsas en Instagram",
    "section": "1.1 ",
    "text": "1.1"
  },
  {
    "objectID": "index.html#análisis-exploratorio-de-datos",
    "href": "index.html#análisis-exploratorio-de-datos",
    "title": "Proyecto de análisis de cuentas falsas en Instagram",
    "section": "1.2 Análisis exploratorio de datos",
    "text": "1.2 Análisis exploratorio de datos\nPara analizar cualquier dataset, primero es vital explorar sus datos, para comprender mejor el conjunto de datos antes de aplicar técnicas de análisis y/o predictivas.\nPrimero, echemos un vistazo a las primeras filas del dataset, para hacernos una idea de las columnas con las que trabajamos, y algunos de sus valores:\n\nhead(datos)\n\n# A tibble: 6 × 12\n  `profile pic` `nums/length username` `fullname words` `nums/length fullname`\n          &lt;dbl&gt;                  &lt;dbl&gt;            &lt;dbl&gt;                  &lt;dbl&gt;\n1             1                   0.27                0                      0\n2             1                   0                   2                      0\n3             1                   0.1                 2                      0\n4             1                   0                   1                      0\n5             1                   0                   2                      0\n6             1                   0                   4                      0\n# ℹ 8 more variables: `name==username` &lt;dbl&gt;, `description length` &lt;dbl&gt;,\n#   `external URL` &lt;dbl&gt;, private &lt;dbl&gt;, `#posts` &lt;dbl&gt;, `#followers` &lt;dbl&gt;,\n#   `#follows` &lt;dbl&gt;, fake &lt;dbl&gt;\n\n\nComprobemos, también, si el dataset de test posee las mismas columnas:\n\nhead(datos_test)\n\n# A tibble: 6 × 12\n  `profile pic` `nums/length username` `fullname words` `nums/length fullname`\n          &lt;dbl&gt;                  &lt;dbl&gt;            &lt;dbl&gt;                  &lt;dbl&gt;\n1             1                   0.33                1                   0.33\n2             1                   0                   5                   0   \n3             1                   0                   2                   0   \n4             1                   0                   1                   0   \n5             1                   0.5                 1                   0   \n6             1                   0                   1                   0   \n# ℹ 8 more variables: `name==username` &lt;dbl&gt;, `description length` &lt;dbl&gt;,\n#   `external URL` &lt;dbl&gt;, private &lt;dbl&gt;, `#posts` &lt;dbl&gt;, `#followers` &lt;dbl&gt;,\n#   `#follows` &lt;dbl&gt;, fake &lt;dbl&gt;\n\n\nEchando un vistazo a estas salidas, personalmente no me agrada la presencia de espacios en los nombres de las columnas. Renombremos las que presentan espacios o caracteres especiales:\n\ndatos &lt;- rename(datos, profile_pic=`profile pic`, `nums/length_username` = `nums/length username`, fullname_words=`fullname words`, `nums/length_fullname` = `nums/length fullname`, description_length=`description length`, external_URL=`external URL`, posts=`#posts`, followers=`#followers`, follows=`#follows`)\n\ndatos_test &lt;- rename(datos_test, profile_pic=`profile pic`, `nums/length_username` = `nums/length username`, fullname_words=`fullname words`, `nums/length_fullname` = `nums/length fullname`, description_length=`description length`, external_URL=`external URL`, posts=`#posts`, followers=`#followers`, follows=`#follows`)\n\nA partir de ahora, exploraremos únicamente el dataset de entrenamiento, y dejaremos el de test para probar las conclusiones que saquemos de este análisis.\nUna vez ajustados los nombres, resulta especialmente útil echar un vistazo a la estructura del dataset:\n\nstr(datos)\n\nspc_tbl_ [576 × 12] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ profile_pic         : num [1:576] 1 1 1 1 1 1 1 1 1 1 ...\n $ nums/length_username: num [1:576] 0.27 0 0.1 0 0 0 0 0 0 0 ...\n $ fullname_words      : num [1:576] 0 2 2 1 2 4 2 2 0 2 ...\n $ nums/length_fullname: num [1:576] 0 0 0 0 0 0 0 0 0 0 ...\n $ name==username      : num [1:576] 0 0 0 0 0 0 0 0 0 0 ...\n $ description_length  : num [1:576] 53 44 0 82 0 81 50 0 71 40 ...\n $ external_URL        : num [1:576] 0 0 0 0 0 1 0 0 0 1 ...\n $ private             : num [1:576] 0 0 1 0 1 0 0 0 0 0 ...\n $ posts               : num [1:576] 32 286 13 679 6 344 16 33 72 213 ...\n $ followers           : num [1:576] 1000 2740 159 414 151 ...\n $ follows             : num [1:576] 955 533 98 651 126 ...\n $ fake                : num [1:576] 0 0 0 0 0 0 0 0 0 0 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   `profile pic` = col_double(),\n  ..   `nums/length username` = col_double(),\n  ..   `fullname words` = col_double(),\n  ..   `nums/length fullname` = col_double(),\n  ..   `name==username` = col_double(),\n  ..   `description length` = col_double(),\n  ..   `external URL` = col_double(),\n  ..   private = col_double(),\n  ..   `#posts` = col_double(),\n  ..   `#followers` = col_double(),\n  ..   `#follows` = col_double(),\n  ..   fake = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n\nEs posible extraer información importante a raíz de la salida anterior:\n\nEl dataset tiene 12 columnas, y 576 filas, datos que podemos confirmar fácilmente con los siguientes comandos:\n\n\n# Mostrar el número de columnas\nncol(datos)\n\n[1] 12\n\n# Mostrar el número de filas\nnrow(datos)\n\n[1] 576\n\n\n\nTodas las columnas del dataset son de tipo numérico (aunque, ciertamente, algunas columnas representan un booleano con valor 0/1, es decir, están binarizadas). Podría ser interesante conocer qué variables son binarias:\n\n\n# Identificar las columnas binarias\nbinarias &lt;- datos %&gt;% \n  select(where(~ all(. %in% c(0, 1)))) %&gt;% \n  names()\n\n# Mostrar los nombres de las columnas binarias\nbinarias\n\n[1] \"profile_pic\"    \"name==username\" \"external_URL\"   \"private\"       \n[5] \"fake\"          \n\n\nUna vez conocemos esto, pasemos a observar un resumen estadístico por columnas del dataset:\n\n# Resumen estadístico del dataset\nsummary(datos)\n\n  profile_pic     nums/length_username fullname_words  nums/length_fullname\n Min.   :0.0000   Min.   :0.0000       Min.   : 0.00   Min.   :0.00000     \n 1st Qu.:0.0000   1st Qu.:0.0000       1st Qu.: 1.00   1st Qu.:0.00000     \n Median :1.0000   Median :0.0000       Median : 1.00   Median :0.00000     \n Mean   :0.7014   Mean   :0.1638       Mean   : 1.46   Mean   :0.03609     \n 3rd Qu.:1.0000   3rd Qu.:0.3100       3rd Qu.: 2.00   3rd Qu.:0.00000     \n Max.   :1.0000   Max.   :0.9200       Max.   :12.00   Max.   :1.00000     \n name==username    description_length  external_URL       private      \n Min.   :0.00000   Min.   :  0.00     Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.00000   1st Qu.:  0.00     1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.00000   Median :  0.00     Median :0.0000   Median :0.0000  \n Mean   :0.03472   Mean   : 22.62     Mean   :0.1163   Mean   :0.3819  \n 3rd Qu.:0.00000   3rd Qu.: 34.00     3rd Qu.:0.0000   3rd Qu.:1.0000  \n Max.   :1.00000   Max.   :150.00     Max.   :1.0000   Max.   :1.0000  \n     posts          followers           follows            fake    \n Min.   :   0.0   Min.   :       0   Min.   :   0.0   Min.   :0.0  \n 1st Qu.:   0.0   1st Qu.:      39   1st Qu.:  57.5   1st Qu.:0.0  \n Median :   9.0   Median :     150   Median : 229.5   Median :0.5  \n Mean   : 107.5   Mean   :   85307   Mean   : 508.4   Mean   :0.5  \n 3rd Qu.:  81.5   3rd Qu.:     716   3rd Qu.: 589.5   3rd Qu.:1.0  \n Max.   :7389.0   Max.   :15338538   Max.   :7500.0   Max.   :1.0  \n\n\nDe esta salida extraemos la siguiente información importante:\n\nprofile_pic: el 70,14% de las cuentas tiene foto de perfil. Este dato podría ser importante, ya que muchas cuentas falsas no cuentan con foto de perfil.\nnums/length_username: el 16,38% de la longitud de los nombres de las cuentas está ocupado por números. Destaca el valor máximo del 92% en una cuenta particular.\nfullname_words: destaca la media de 1,46, que, intuitivamente, sería lo normal, pues los nombres completos que definimos en redes sociales normalmente contienen una o dos palabras.\nnums/length_fullname: el 3,6% de la longitud de los nombres completos de las cuentas está ocupado por números. Destaca, de nuevo, un valor alto: un 1 (todo números en el nombre completo, lo cual es extraño).\nname==username: el 3,4% de las cuentas muestran coincidencia literal en el nombre de usuario y el nombre completo. Este valor tan bajo es bastante normal, puesto que los nombres de usuario son únicos, y es difícil hacer que coincidan con el nombre completo.\ndescription_length: destaca la mediana de 0, es decir, que hay muchísimas cuentas del dataset sin ningún caracter en la descripción. La media también es baja en comparación al valor máximo (150), que probablemente sea el máximo permitido por Instagram.\nexternal_URL: de nuevo, la mediana es 0, puesto que sólo el 11,63% de las cuentas tienen un link en su biografía. Este dato podría ser especialmente interesante para la predicción de cuentas falsas, pues muchas de ellas, en la realidad, poseen URLs a sitios fraudulentos o promocionales.\nprivate: el 38% de las cuentas son privadas.\nposts: la media es alta (107,5) para lo que cabría esperar. Es un valor interesante, ya que las cuentas falsas no suelen tener muchas fotos publicadas.\nfollowers: la media, de nuevo, es alta (85307), y también es un valor significativo, dado que, probablemente, ninguna cuenta falsa estará en los percentiles superiores en cuanto a seguidores. Por ejemplo, el valor máximo es de más de 15 millones de seguidores, y personalmente apostaría mi aprobado en la asignatura a que esa cuenta particular no es falsa.\nfollows: la media (508,4) es un valor razonable.\nfake: exactamente la mitad de las cuentas del dataset son falsas.\n\nComo conclusiones interesantes, tenemos:\n\nVarias variables (posts, follows, followers) muestran una distribución con una media mucho mayor que la mediana, lo que sugiere que hay ciertas cuentas con valores muy altos en estos parámetros.\nEl dataset está equilibrado, habiendo un 50% de cuentas falsas. Esto será útil para el análisis, puesto que un dataset más desequilibrado podría dar lugar a extrapolaciones erróneas de los datos.\nAlgunas variables (profile_pic, posts, followers…) pueden ser altamente reveladoras para decidir si una cuenta es falsa o no, con lo que deberían ser más significativas en el apartado de reglas de asociación.\n\nUna vez hemos examinado los datos estadísticos de las variables, también resulta interesante conocer la presencia de valores nulos en las columnas:\n\n# Contar valores nulos en cada columna\nna_por_columnas &lt;- sapply(datos, function(x) sum(is.na(x)))\nna_por_columnas\n\n         profile_pic nums/length_username       fullname_words \n                   0                    0                    0 \nnums/length_fullname       name==username   description_length \n                   0                    0                    0 \n        external_URL              private                posts \n                   0                    0                    0 \n           followers              follows                 fake \n                   0                    0                    0 \n\n\nComo vemos, es genial que no haya valores nulos en todo el dataset, puesto que su presencia afecta de forma negativa a los resultados. Los valores nulos pueden distorsionar las estadísticas descriptivas (como las vistas anteriormente), llevando a conclusiones incorrectas, así como a pérdida de información y de patrones importantes.\nA continuación, con objeto de analizar los valores más extremos del dataset, listemos las 5 filas con mayores y menores valores de cada variable no binaria:\n\n# 10 filas con máximo valor de nums/length_username\nmax_nums_length_username &lt;- datos %&gt;% \n  arrange(desc(datos$`nums/length_username`)) %&gt;% \n  head(10)\nmax_nums_length_username\n\n# A tibble: 10 × 12\n   profile_pic `nums/length_username` fullname_words `nums/length_fullname`\n         &lt;dbl&gt;                  &lt;dbl&gt;          &lt;dbl&gt;                  &lt;dbl&gt;\n 1           1                   0.92              1                   1   \n 2           1                   0.91              1                   0   \n 3           1                   0.91              1                   0   \n 4           1                   0.89              1                   0.89\n 5           0                   0.89              0                   0   \n 6           0                   0.89              0                   0   \n 7           1                   0.88              1                   0   \n 8           0                   0.88              1                   1   \n 9           0                   0.88              1                   1   \n10           0                   0.86              2                   0.18\n# ℹ 8 more variables: `name==username` &lt;dbl&gt;, description_length &lt;dbl&gt;,\n#   external_URL &lt;dbl&gt;, private &lt;dbl&gt;, posts &lt;dbl&gt;, followers &lt;dbl&gt;,\n#   follows &lt;dbl&gt;, fake &lt;dbl&gt;\n\n\ncomo se puede observar, las 10 filas son de cuentas falsas. Este parámetro podría ser bastante significativo.\n\n# 10 filas con mínimo valor de nums/length_username\nmin_nums_length_username &lt;- datos %&gt;% \n  arrange(datos$`nums/length_username`) %&gt;% \n  head(10)\nmin_nums_length_username\n\n# A tibble: 10 × 12\n   profile_pic `nums/length_username` fullname_words `nums/length_fullname`\n         &lt;dbl&gt;                  &lt;dbl&gt;          &lt;dbl&gt;                  &lt;dbl&gt;\n 1           1                      0              2                      0\n 2           1                      0              1                      0\n 3           1                      0              2                      0\n 4           1                      0              4                      0\n 5           1                      0              2                      0\n 6           1                      0              2                      0\n 7           1                      0              0                      0\n 8           1                      0              2                      0\n 9           1                      0              2                      0\n10           1                      0              2                      0\n# ℹ 8 more variables: `name==username` &lt;dbl&gt;, description_length &lt;dbl&gt;,\n#   external_URL &lt;dbl&gt;, private &lt;dbl&gt;, posts &lt;dbl&gt;, followers &lt;dbl&gt;,\n#   follows &lt;dbl&gt;, fake &lt;dbl&gt;\n\n\ncomo se puede observar, las 10 filas son de cuentas verdaderas. Este parámetro podría ser bastante significativo. Sin embargo, no podemos concluir mucho a partir de esta salida, ya que podría haber filas de cuentas falsas con valor 0 en esta columna, pero que no aparezcan aquí.\n\n# 10 filas con máximo valor de fullname_words\nmax_fullname_words &lt;- datos %&gt;% \n  arrange(desc(fullname_words)) %&gt;% \n  head(10)\nmax_fullname_words\n\n# A tibble: 10 × 12\n   profile_pic `nums/length_username` fullname_words `nums/length_fullname`\n         &lt;dbl&gt;                  &lt;dbl&gt;          &lt;dbl&gt;                  &lt;dbl&gt;\n 1           1                   0                12                      0\n 2           1                   0                10                      0\n 3           1                   0                 6                      0\n 4           1                   0                 6                      0\n 5           1                   0.36              5                      0\n 6           1                   0.09              5                      0\n 7           1                   0.22              5                      0\n 8           1                   0                 5                      0\n 9           1                   0                 4                      0\n10           1                   0                 4                      0\n# ℹ 8 more variables: `name==username` &lt;dbl&gt;, description_length &lt;dbl&gt;,\n#   external_URL &lt;dbl&gt;, private &lt;dbl&gt;, posts &lt;dbl&gt;, followers &lt;dbl&gt;,\n#   follows &lt;dbl&gt;, fake &lt;dbl&gt;\n\n\ncomo se puede observar, las 9 de las 10 filas son de cuentas verdaderas. Este parámetro podría ser bastante significativo.\n\n# 10 filas con mínimo valor de fullname_words\nmin_fullname_words &lt;- datos %&gt;% \n  arrange(fullname_words) %&gt;% \n  head(10)\nmin_fullname_words\n\n# A tibble: 10 × 12\n   profile_pic `nums/length_username` fullname_words `nums/length_fullname`\n         &lt;dbl&gt;                  &lt;dbl&gt;          &lt;dbl&gt;                  &lt;dbl&gt;\n 1           1                   0.27              0                      0\n 2           1                   0                 0                      0\n 3           1                   0                 0                      0\n 4           1                   0.13              0                      0\n 5           1                   0.33              0                      0\n 6           1                   0                 0                      0\n 7           1                   0                 0                      0\n 8           1                   0                 0                      0\n 9           1                   0                 0                      0\n10           1                   0                 0                      0\n# ℹ 8 more variables: `name==username` &lt;dbl&gt;, description_length &lt;dbl&gt;,\n#   external_URL &lt;dbl&gt;, private &lt;dbl&gt;, posts &lt;dbl&gt;, followers &lt;dbl&gt;,\n#   follows &lt;dbl&gt;, fake &lt;dbl&gt;\n\n\ncomo se puede observar, las 10 filas son de cuentas verdaderas. Este parámetro podría ser significativo, con la conclusión de que los extremos están ocupados por cuentas verdaderas, pero no debemos precipitarnos con tal conclusión. No podemos concluir mucho a partir de esta salida particular, ya que podría haber filas de cuentas falsas con valor 0 en esta columna, pero que no aparezcan aquí.\n\n# 10 filas con máximo valor de nums/length_fullname\nmax_nums_length_fullname &lt;- datos %&gt;% \n  arrange(desc(datos$`nums/length_fullname`)) %&gt;% \n  head(10)\nmax_nums_length_fullname\n\n# A tibble: 10 × 12\n   profile_pic `nums/length_username` fullname_words `nums/length_fullname`\n         &lt;dbl&gt;                  &lt;dbl&gt;          &lt;dbl&gt;                  &lt;dbl&gt;\n 1           0                   0.88              1                   1   \n 2           0                   0.88              1                   1   \n 3           1                   0.92              1                   1   \n 4           1                   0.89              1                   0.89\n 5           0                   0.57              1                   0.57\n 6           0                   0.5               1                   0.5 \n 7           1                   0.6               1                   0.5 \n 8           1                   0.46              1                   0.5 \n 9           0                   0.46              1                   0.46\n10           1                   0.58              1                   0.44\n# ℹ 8 more variables: `name==username` &lt;dbl&gt;, description_length &lt;dbl&gt;,\n#   external_URL &lt;dbl&gt;, private &lt;dbl&gt;, posts &lt;dbl&gt;, followers &lt;dbl&gt;,\n#   follows &lt;dbl&gt;, fake &lt;dbl&gt;\n\n\ncomo se puede observar, las 10 filas son de cuentas falsas. Este parámetro podría ser bastante significativo.\n\n# 10 filas con mínimo valor de nums/length_fullname\nmin_nums_length_fullname &lt;- datos %&gt;% \n  arrange(datos$`nums/length_fullname`) %&gt;% \n  head(10)\nmin_nums_length_fullname\n\n# A tibble: 10 × 12\n   profile_pic `nums/length_username` fullname_words `nums/length_fullname`\n         &lt;dbl&gt;                  &lt;dbl&gt;          &lt;dbl&gt;                  &lt;dbl&gt;\n 1           1                   0.27              0                      0\n 2           1                   0                 2                      0\n 3           1                   0.1               2                      0\n 4           1                   0                 1                      0\n 5           1                   0                 2                      0\n 6           1                   0                 4                      0\n 7           1                   0                 2                      0\n 8           1                   0                 2                      0\n 9           1                   0                 0                      0\n10           1                   0                 2                      0\n# ℹ 8 more variables: `name==username` &lt;dbl&gt;, description_length &lt;dbl&gt;,\n#   external_URL &lt;dbl&gt;, private &lt;dbl&gt;, posts &lt;dbl&gt;, followers &lt;dbl&gt;,\n#   follows &lt;dbl&gt;, fake &lt;dbl&gt;\n\n\ncomo se puede observar, las 10 filas son de cuentas verdaderas. Este parámetro podría ser bastante significativo, aunque no podemos concluir mucho a partir de esta salida, ya que podría haber filas de cuentas falsas con valor 0 en esta columna, pero que no aparezcan aquí.\n\n# 10 filas con máximo valor de description_length\nmax_description_length &lt;- datos %&gt;% \n  arrange(desc(description_length)) %&gt;% \n  head(10)\nmax_description_length\n\n# A tibble: 10 × 12\n   profile_pic `nums/length_username` fullname_words `nums/length_fullname`\n         &lt;dbl&gt;                  &lt;dbl&gt;          &lt;dbl&gt;                  &lt;dbl&gt;\n 1           1                   0                 4                      0\n 2           1                   0.08              2                      0\n 3           1                   0                 2                      0\n 4           1                   0                 2                      0\n 5           1                   0                 4                      0\n 6           1                   0                 3                      0\n 7           1                   0                 2                      0\n 8           1                   0                 0                      0\n 9           1                   0                 3                      0\n10           1                   0                 1                      0\n# ℹ 8 more variables: `name==username` &lt;dbl&gt;, description_length &lt;dbl&gt;,\n#   external_URL &lt;dbl&gt;, private &lt;dbl&gt;, posts &lt;dbl&gt;, followers &lt;dbl&gt;,\n#   follows &lt;dbl&gt;, fake &lt;dbl&gt;\n\n\ncomo se puede observar, 7 de las 10 filas son de cuentas verdaderas. Este parámetro podría ser importante, aunque no podemos saltar a conclusiones.\n\n# 10 filas con mínimo valor de description_length\nmin_description_length &lt;- datos %&gt;% \n  arrange(description_length) %&gt;% \n  head(10)\nmin_description_length\n\n# A tibble: 10 × 12\n   profile_pic `nums/length_username` fullname_words `nums/length_fullname`\n         &lt;dbl&gt;                  &lt;dbl&gt;          &lt;dbl&gt;                  &lt;dbl&gt;\n 1           1                   0.1               2                      0\n 2           1                   0                 2                      0\n 3           1                   0                 2                      0\n 4           1                   0                 2                      0\n 5           1                   0                 3                      0\n 6           1                   0                 0                      0\n 7           1                   0                 6                      0\n 8           1                   0.13              0                      0\n 9           1                   0.33              0                      0\n10           1                   0                 2                      0\n# ℹ 8 more variables: `name==username` &lt;dbl&gt;, description_length &lt;dbl&gt;,\n#   external_URL &lt;dbl&gt;, private &lt;dbl&gt;, posts &lt;dbl&gt;, followers &lt;dbl&gt;,\n#   follows &lt;dbl&gt;, fake &lt;dbl&gt;\n\n\ncomo se puede observar, las 10 filas son de cuentas verdaderas. No podemos concluir nada en este caso, ya que las 10 filas tienen 0 de longitud de descripción (podría haber cuentas falsas con 0 que no aparezcan aquí).\n\n# 10 filas con máximo valor de posts\nmax_posts &lt;- datos %&gt;% \n  arrange(desc(posts)) %&gt;% \n  head(10)\nmax_posts\n\n# A tibble: 10 × 12\n   profile_pic `nums/length_username` fullname_words `nums/length_fullname`\n         &lt;dbl&gt;                  &lt;dbl&gt;          &lt;dbl&gt;                  &lt;dbl&gt;\n 1           1                   0                 0                      0\n 2           1                   0                 4                      0\n 3           1                   0.29              3                      0\n 4           1                   0                 1                      0\n 5           1                   0                 2                      0\n 6           1                   0                 2                      0\n 7           1                   0                 2                      0\n 8           1                   0                 2                      0\n 9           1                   0                 2                      0\n10           1                   0                 2                      0\n# ℹ 8 more variables: `name==username` &lt;dbl&gt;, description_length &lt;dbl&gt;,\n#   external_URL &lt;dbl&gt;, private &lt;dbl&gt;, posts &lt;dbl&gt;, followers &lt;dbl&gt;,\n#   follows &lt;dbl&gt;, fake &lt;dbl&gt;\n\n\ncomo se puede observar, las 10 filas son de cuentas verdaderas. Este parámetro podría ser bastante significativo.\n\n# 10 filas con mínimo valor de posts\nmin_posts &lt;- datos %&gt;% \n  arrange(posts) %&gt;% \n  head(10)\nmin_posts\n\n# A tibble: 10 × 12\n   profile_pic `nums/length_username` fullname_words `nums/length_fullname`\n         &lt;dbl&gt;                  &lt;dbl&gt;          &lt;dbl&gt;                  &lt;dbl&gt;\n 1           1                   0                 2                      0\n 2           1                   0                 1                      0\n 3           1                   0                 2                      0\n 4           1                   0                 2                      0\n 5           0                   0.22              1                      0\n 6           0                   0.38              1                      0\n 7           0                   0.31              2                      0\n 8           0                   0                 1                      0\n 9           0                   0                 2                      0\n10           0                   0.33              1                      0\n# ℹ 8 more variables: `name==username` &lt;dbl&gt;, description_length &lt;dbl&gt;,\n#   external_URL &lt;dbl&gt;, private &lt;dbl&gt;, posts &lt;dbl&gt;, followers &lt;dbl&gt;,\n#   follows &lt;dbl&gt;, fake &lt;dbl&gt;\n\n\ncomo se puede observar, 6 de las 10 filas son de cuentas falsas. No podemos concluir nada, ya que, además, el valor de la variable en estas 10 filas es 0, y podríamos estar perdiendo información si hay más filas con 0 que no aparezcan aquí.\n\n# 10 filas con máximo valor de followers\nmax_followers &lt;- datos %&gt;% \n  arrange(desc(followers)) %&gt;% \n  head(10)\nmax_followers\n\n# A tibble: 10 × 12\n   profile_pic `nums/length_username` fullname_words `nums/length_fullname`\n         &lt;dbl&gt;                  &lt;dbl&gt;          &lt;dbl&gt;                  &lt;dbl&gt;\n 1           1                   0                 0                      0\n 2           1                   0                 4                      0\n 3           1                   0                 2                      0\n 4           1                   0.18              2                      0\n 5           1                   0                 1                      0\n 6           1                   0                 0                      0\n 7           1                   0                 2                      0\n 8           1                   0                 4                      0\n 9           1                   0                 2                      0\n10           1                   0                 3                      0\n# ℹ 8 more variables: `name==username` &lt;dbl&gt;, description_length &lt;dbl&gt;,\n#   external_URL &lt;dbl&gt;, private &lt;dbl&gt;, posts &lt;dbl&gt;, followers &lt;dbl&gt;,\n#   follows &lt;dbl&gt;, fake &lt;dbl&gt;\n\n\ncomo se puede observar, las 10 filas son de cuentas verdaderas. Este parámetro podría ser bastante significativo.\n\n# 10 filas con mínimo valor de followers\nmin_followers &lt;- datos %&gt;% \n  arrange(followers) %&gt;% \n  head(10)\nmin_followers\n\n# A tibble: 10 × 12\n   profile_pic `nums/length_username` fullname_words `nums/length_fullname`\n         &lt;dbl&gt;                  &lt;dbl&gt;          &lt;dbl&gt;                  &lt;dbl&gt;\n 1           0                   0.22              1                   0.22\n 2           0                   0                 1                   0   \n 3           1                   0.25              1                   0   \n 4           0                   0                 0                   0   \n 5           1                   0                 1                   0   \n 6           0                   0                 1                   0   \n 7           0                   0.07              1                   0   \n 8           0                   0.33              1                   0.33\n 9           1                   0.44              1                   0   \n10           0                   0.1               1                   0   \n# ℹ 8 more variables: `name==username` &lt;dbl&gt;, description_length &lt;dbl&gt;,\n#   external_URL &lt;dbl&gt;, private &lt;dbl&gt;, posts &lt;dbl&gt;, followers &lt;dbl&gt;,\n#   follows &lt;dbl&gt;, fake &lt;dbl&gt;\n\n\ncomo se puede observar, las 10 filas son de cuentas falsas. Este parámetro podría ser bastante significativo. La intuición, además, me dice que es extraño tener una cuenta verdadera con 0 seguidores, pero tampoco podemos extraer conclusiones precisas, puesto que en las 10 filas el valor de seguidores es 0, y podría haber más filas en el dataset con un valor 0 que no aparezcan aquí.\n\n# 10 filas con máximo valor de follows\nmax_follows &lt;- datos %&gt;% \n  arrange(desc(follows)) %&gt;% \n  head(10)\nmax_follows\n\n# A tibble: 10 × 12\n   profile_pic `nums/length_username` fullname_words `nums/length_fullname`\n         &lt;dbl&gt;                  &lt;dbl&gt;          &lt;dbl&gt;                  &lt;dbl&gt;\n 1           1                   0                 4                    0  \n 2           1                   0                 1                    0  \n 3           1                   0.14              2                    0  \n 4           0                   0                 1                    0  \n 5           1                   0                 2                    0  \n 6           1                   0                 2                    0  \n 7           1                   0.1               1                    0.1\n 8           1                   0.43              2                    0  \n 9           1                   0                 2                    0  \n10           1                   0.2               2                    0  \n# ℹ 8 more variables: `name==username` &lt;dbl&gt;, description_length &lt;dbl&gt;,\n#   external_URL &lt;dbl&gt;, private &lt;dbl&gt;, posts &lt;dbl&gt;, followers &lt;dbl&gt;,\n#   follows &lt;dbl&gt;, fake &lt;dbl&gt;\n\n\ncomo se puede observar, 7 de las 10 filas son de cuentas verdaderas. Este parámetro podría ser significativo, aunque habría que analizarlo con más detenimiento.\n\n# 10 filas con mínimo valor de follows\nmin_follows &lt;- datos %&gt;% \n  arrange(follows) %&gt;% \n  head(10)\nmin_follows\n\n# A tibble: 10 × 12\n   profile_pic `nums/length_username` fullname_words `nums/length_fullname`\n         &lt;dbl&gt;                  &lt;dbl&gt;          &lt;dbl&gt;                  &lt;dbl&gt;\n 1           1                   0                 3                   0   \n 2           0                   0                 0                   0   \n 3           0                   0.1               1                   0   \n 4           0                   0.67              1                   0   \n 5           0                   0.25              1                   0   \n 6           0                   0.33              1                   0   \n 7           0                   0.44              1                   0   \n 8           0                   0.27              1                   0   \n 9           0                   0.28              1                   0.24\n10           0                   0.5               1                   0.4 \n# ℹ 8 more variables: `name==username` &lt;dbl&gt;, description_length &lt;dbl&gt;,\n#   external_URL &lt;dbl&gt;, private &lt;dbl&gt;, posts &lt;dbl&gt;, followers &lt;dbl&gt;,\n#   follows &lt;dbl&gt;, fake &lt;dbl&gt;\n\n\ncomo se puede observar, 9 de las 10 filas son de cuentas falsas. Este parámetro podría ser bastante significativo. La intuición, además, me dice que es extraño tener una cuenta verdadera con 0 cuentas seguidas, pero tampoco podemos extraer conclusiones precisas, puesto que en las 10 filas el valor de cuentas seguidas es 0, y podría haber más filas en el dataset con un valor 0 que no aparezcan aquí.\nLas conclusiones más precisas (aunque pendientes de demostrar en apartados posteriores) que extraemos de los valores extremo son en cuanto a las variables:\n\nnums/length_username: los valores altos los tienen las cuentas falsas.\nfullname_words: los valores altos los tienen las cuentas verdaderas.\nnums/length_fullname: los valores altos los tienen las cuentas falsas.\nposts: los valores altos los tienen las cuentas verdaderas.\nfollowers: los valores altos los tienen las cuentas verdaderas.\n\nPara finalizar con el análisis exploratorio, y guardando cierta relación con el último conjunto de comandos, echemos un vistazo al contenido de las variables\n\n# Calcula el promedio de cada variable para las cuentas falsas y reales\nfake_comparacion &lt;- datos %&gt;%\n  group_by(fake) %&gt;%\n  summarise(\n    profile_pic_ratio = mean(profile_pic),\n    avg_nums_length_username = mean(`nums/length_username`),\n    avg_fullname_words = mean(fullname_words),\n    avg_nums_length_fullname = mean(`nums/length_fullname`),\n    name_equals_username_ratio = mean(`name==username`),\n    avg_description_length = mean(description_length),\n    external_URL_ratio = mean(external_URL),\n    private_ratio = mean(private),\n    avg_posts = mean(posts),\n    avg_followers = mean(followers),\n    avg_follows = mean(follows)\n  )\nfake_comparacion\n\n# A tibble: 2 × 12\n   fake profile_pic_ratio avg_nums_length_username avg_fullname_words\n  &lt;dbl&gt;             &lt;dbl&gt;                    &lt;dbl&gt;              &lt;dbl&gt;\n1     0             0.993                   0.0381               1.77\n2     1             0.410                   0.290                1.15\n# ℹ 8 more variables: avg_nums_length_fullname &lt;dbl&gt;,\n#   name_equals_username_ratio &lt;dbl&gt;, avg_description_length &lt;dbl&gt;,\n#   external_URL_ratio &lt;dbl&gt;, private_ratio &lt;dbl&gt;, avg_posts &lt;dbl&gt;,\n#   avg_followers &lt;dbl&gt;, avg_follows &lt;dbl&gt;\n\n\nAnalicemos los resultados por variable:\n\nprofile_pic: es 2,48 veces más probable que una cuenta con foto de perfil sea verdadera a falsa. Esta significancia es importante.\nnums/length_username: las cuentas falsas multiplican en 7,36 veces este valor con respecto a las verdaderas. Esta significancia es muy importante.\nfullname_words: las cuentas verdaderas multiplican en 1,55 veces este valor con respecto a las falsas. Esta significancia es leve.\nnums/length_fullname: las cuentas falsas multiplican en 12,88 veces este valor con respecto a las verdaderas. Esta significancia es muy importante.\nname==username: las cuentas falsas multiplican en 19,11 veces este valor con respecto a las verdaderas. Esta significancia es altamente importante.\ndescription_length: las cuentas verdaderas multiplican en 7,6 veces este valor con respecto a las falsas. Esta significancia es muy importante.\nexternal_URL: ninguna cuenta falsa del dataset tiene URL externa, lo cual parece ser un buen criterio de decisión.\nprivate: los valores son casi idénticos. La significancia parece ser nula.\nposts: las cuentas verdaderas multiplican en 23,07 veces este valor con respecto a las falsas. Esta significancia es altamente importante.\nfollowers: las cuentas verdaderas multiplican en 1550 veces este valor con respecto a las falsas. Esta significancia es abismal. Sin embargo, tengamos en cuenta que la media de seguidores es tan alta porque hay ciertas cuentas en el dataset que tienen millones de seguidores. En un dataset más aleatorio, con cuentas verdaderas más “mundanas”, la significancia de este atributo sería menor.\nfollows: las cuentas verdaderas multiplican en 2,36 veces este valor con respecto a las falsas. Esta significancia es notable."
  },
  {
    "objectID": "reglas_asociacion.html#reglas-de-asociación",
    "href": "reglas_asociacion.html#reglas-de-asociación",
    "title": "3  Reglas de Asociación",
    "section": "3.1 Reglas de Asociación",
    "text": "3.1 Reglas de Asociación\nYa hemos explorado, numérica y visualmente, el conjunto de datos de entrenamiento. A continuación, es turno de trabajar con las reglas de asociación, o lo que es lo mismo, descubrir relaciones y patrones de comportamiento revelados por los datos.\n\n3.1.1 Obtención de las reglas\n\n# Eliminar las columnas de visualización\ndatos$num_length_interval &lt;- NULL\ndatos$fullname_length_interval &lt;- NULL\ndatos$description_length_interval &lt;- NULL\ndatos$posts_interval &lt;- NULL\ndatos$followers_interval &lt;- NULL\ndatos$follows_interval &lt;- NULL\n\nView(datos)\n\nTras eliminar las columnas del apartado de visualización, pasemos a la generación de reglas de asociación, no sin antes ajustar el dataset para adecuarlo a la producción de las reglas.\nEn primer lugar, convertiremos el dataset a un data frame, y ajustaremos los tipos de las columnas. Necesitamos convertir las variables binarias al tipo “factor”, para que no aparezcan intervalos del tipo [0,1] en estas variables en las reglas, así como discretizar a nuestro gusto las variables numéricas, para establecer categorías/intervalos razonables de acuerdo al dato particular con el que estemos trabajando:\n\n# Convertir dataset a data frame\ndatosDF &lt;- data.frame(datos)\n\n# Mostrar tipo y un valor de las columnas 1 y 3\ncat(\"La clase de la columna 1 (profile_pic) es:\", class(datosDF[[1]]), \"\\nLa clase de la columna 3 (fullname_words) es:\", class(datosDF[[3]]))\n\nLa clase de la columna 1 (profile_pic) es: numeric \nLa clase de la columna 3 (fullname_words) es: numeric\n\n\n\nhead(datosDF, 5)\n\n  profile_pic nums.length_username fullname_words nums.length_fullname\n1           1                 0.27              0                    0\n2           1                 0.00              2                    0\n3           1                 0.10              2                    0\n4           1                 0.00              1                    0\n5           1                 0.00              2                    0\n  name..username description_length external_URL private posts followers\n1              0                 53            0       0    32      1000\n2              0                 44            0       0   286      2740\n3              0                  0            0       1    13       159\n4              0                 82            0       0   679       414\n5              0                  0            0       1     6       151\n  follows fake\n1     955    0\n2     533    0\n3      98    0\n4     651    0\n5     126    0\n\n\nComo vemos, los tipos iniciales de las variables profile_pic y fullname_words son numéricos.\nAhora pasemos a ajustar los tipos de datos:\n\n# Discretizar columnas numéricas\ndatosDF$nums.length_username &lt;- discretize(datosDF$nums.length_username, method=\"interval\", breaks = 5)\ndatosDF$fullname_words &lt;- discretize(datosDF$fullname_words, method=\"frequency\", breaks = 5)\n\nWarning in discretize(datosDF$fullname_words, method = \"frequency\", breaks = 5): The calculated breaks are: 0, 1, 1, 2, 2, 12\n  Only unique breaks are used reducing the number of intervals. Look at ? discretize for details.\n\ndatosDF$nums.length_fullname &lt;- discretize(datosDF$nums.length_fullname, method=\"interval\", breaks = 5)\ndatosDF$description_length &lt;- discretize(datosDF$description_length, method=\"frequency\", breaks = 5)\n\nWarning in discretize(datosDF$description_length, method = \"frequency\", : The calculated breaks are: 0, 0, 0, 5.00000000000006, 43, 150\n  Only unique breaks are used reducing the number of intervals. Look at ? discretize for details.\n\ndatosDF$posts &lt;- discretize(datosDF$posts, method=\"frequency\", breaks = 7)\n\nWarning in discretize(datosDF$posts, method = \"frequency\", breaks = 7): The calculated breaks are: 0, 0, 1, 5, 17.5714285714286, 63.7142857142857, 186.571428571428, 7389\n  Only unique breaks are used reducing the number of intervals. Look at ? discretize for details.\n\ndatosDF$followers &lt;- discretize(datosDF$followers, method=\"frequency\", breaks = 10)\ndatosDF$follows &lt;- discretize(datosDF$follows, method=\"frequency\", breaks = 7)\n\n# Identificar las columnas binarias y numéricas\ncolumnas_binarias &lt;- c(1, 5, 7, 8, 12) # Índices de las columnas binarias\n\n# Convertir columnas binarias a factores\ndatosDF[, columnas_binarias] &lt;- lapply(datosDF[, columnas_binarias], factor)\nView(datosDF)\n\nExpliquemos el sentido de los parámetros usados en la discretización/conversión para cada variable:\n\nprofile_pic: esta variable es binaria, con lo que se convierte a factor y tendrá 2 niveles.\nnums/length_username: esta variable es numérica pero está comprendida entre 0 y 1. Por ello, he usado 5 breaks (máximo de 5 categorías) y el método interval (categorías de igual tamaño).\nfullname_words: esta variable es numérica, con valores pequeños. Por ello, he usado 5 breaks (máximo de 5 categorías) y el método frequency (categorías de distinto tamaño, calculado en base a la frecuencia de los valores).\nnums/length_fullname: esta variable es numérica pero está comprendida entre 0 y 1. Por ello, he usado 5 breaks (máximo de 5 categorías) y el método interval (categorías de igual tamaño).\nname==username: esta variable es binaria, con lo que se convierte a factor y tendrá 2 niveles.\ndescription_length: esta variable es numérica, con valores relativamente pequeños. Por ello, he usado 5 breaks (máximo de 5 categorías) y el método frequency (categorías de distinto tamaño, calculado en base a la frecuencia de los valores).\nexternal_URL: esta variable es binaria, con lo que se convierte a factor y tendrá 2 niveles.\nprivate: esta variable es binaria, con lo que se convierte a factor y tendrá 2 niveles.\nposts: esta variable es numérica, con valores que pueden llegar a ser grandes. Por ello, he usado 7 breaks (máximo de 7 categorías) y el método frequency (categorías de distinto tamaño, calculado en base a la frecuencia de los valores).\nfollowers: esta variable es numérica, con valores que pueden llegar a ser enormes Por ello, he usado 10 breaks (máximo de 10 categorías) y el método frequency (categorías de distinto tamaño, calculado en base a la frecuencia de los valores).\nfollows: esta variable es numérica, con valores que pueden llegar a ser grandes. Por ello, he usado 7 breaks (máximo de 7 categorías) y el método frequency (categorías de distinto tamaño, calculado en base a la frecuencia de los valores).\nfake: esta variable es binaria, con lo que se convierte a factor y tendrá 2 niveles.\n\nDiscretizar variables numéricas antes de crear reglas de asociación es recomendable, ya que ayuda a simplificar el análisis y mejorar la capacidad para manejar el ruido y la variabilidad en los datos.\nAhora, veamos los niveles (número de intervalos) que posee cada variable:\n\n# Obtener los niveles de cada variable recorriendo las columnas\nfor (col_name in names(datosDF)) {\n  col &lt;- datosDF[[col_name]]\n  if (is.factor(col)) {\n    cat(length(levels(col)), \" niveles en\", col_name, \":\", levels(col), \"\\n\")\n  }\n}\n\n2  niveles en profile_pic : 0 1 \n5  niveles en nums.length_username : [0,0.184) [0.184,0.368) [0.368,0.552) [0.552,0.736) [0.736,0.92] \n3  niveles en fullname_words : [0,1) [1,2) [2,12] \n5  niveles en nums.length_fullname : [0,0.2) [0.2,0.4) [0.4,0.6) [0.6,0.8) [0.8,1] \n2  niveles en name..username : 0 1 \n3  niveles en description_length : [0,5) [5,43) [43,150] \n2  niveles en external_URL : 0 1 \n2  niveles en private : 0 1 \n6  niveles en posts : [0,1) [1,5) [5,17.6) [17.6,63.7) [63.7,187) [187,7.39e+03] \n10  niveles en followers : [0,10.5) [10.5,26) [26,49) [49,78) [78,150) [150,271) [271,496) [496,916) [916,2.58e+03) [2.58e+03,1.53e+07] \n7  niveles en follows : [0,26) [26,71) [71,159) [159,322) [322,521) [521,904) [904,7.5e+03] \n2  niveles en fake : 0 1 \n\n\nAhora, veamos el cambio en el tipo de datos:\n\n# Mostrar tipo y un valor de las columnas 1 y 3\ncat(\"La clase de la columna 1 (profile_pic) es:\", class(datosDF[[1]]), \"\\nLa clase de la columna 3 (fullname_words) es:\", class(datosDF[[3]]))\n\nLa clase de la columna 1 (profile_pic) es: factor \nLa clase de la columna 3 (fullname_words) es: factor\n\n\n\nhead(datosDF, 5)\n\n  profile_pic nums.length_username fullname_words nums.length_fullname\n1           1        [0.184,0.368)          [0,1)              [0,0.2)\n2           1            [0,0.184)         [2,12]              [0,0.2)\n3           1            [0,0.184)         [2,12]              [0,0.2)\n4           1            [0,0.184)          [1,2)              [0,0.2)\n5           1            [0,0.184)         [2,12]              [0,0.2)\n  name..username description_length external_URL private          posts\n1              0           [43,150]            0       0    [17.6,63.7)\n2              0           [43,150]            0       0 [187,7.39e+03]\n3              0              [0,5)            0       1       [5,17.6)\n4              0           [43,150]            0       0 [187,7.39e+03]\n5              0              [0,5)            0       1       [5,17.6)\n            followers       follows fake\n1      [916,2.58e+03) [904,7.5e+03]    0\n2 [2.58e+03,1.53e+07]     [521,904)    0\n3           [150,271)      [71,159)    0\n4           [271,496)     [521,904)    0\n5           [150,271)      [71,159)    0\n\n\nComo podemos ver, ahora profile_pic tiene un valor 1 (de tipo factror), y fullname_words tiene valores comprendidos en un intervalo (categorías).\nPara generar reglas de asociación, se recomienda trabajar con datos de tipo transacción, ya que este tipo permite representar los datos en un formato adecuado para el algoritmo, facilitando la identificación de patrones de asociación. Por ello, convertiremos datosDF en tipo transacciones:\n\n# Convertir a tipo transacción\nTdatos &lt;- as(datosDF, \"transactions\")\nclass(Tdatos)\n\n[1] \"transactions\"\nattr(,\"package\")\n[1] \"arules\"\n\n\nUna vez preparados los datos, es hora de utilizar el algoritmo apriori para generar las reglas de asociación.\nPara generar las reglas, usaré un soporte de 0,1 (para que las reglas generadas tengan un mínimo razonable de apariciones en los datos) y una confianza del 90% (para extraer únicamente reglas precisas):\n\n# Generar reglas de asociación con suporte = 0,1 y confianza = 0,9\nreglas &lt;- apriori(Tdatos, list(supp=0.1, conf=0.9))\n\nApriori\n\nParameter specification:\n confidence minval smax arem  aval originalSupport maxtime support minlen\n        0.9    0.1    1 none FALSE            TRUE       5     0.1      1\n maxlen target  ext\n     10  rules TRUE\n\nAlgorithmic control:\n filter tree heap memopt load sort verbose\n    0.1 TRUE TRUE  FALSE TRUE    2    TRUE\n\nAbsolute minimum support count: 57 \n\nset item appearances ...[0 item(s)] done [0.00s].\nset transactions ...[48 item(s), 576 transaction(s)] done [0.00s].\nsorting and recoding items ... [38 item(s)] done [0.00s].\ncreating transaction tree ... done [0.00s].\nchecking subsets of size 1 2 3 4 5 6 7 8 done [0.00s].\nwriting ... [3230 rule(s)] done [0.00s].\ncreating S4 object  ... done [0.00s].\n\n\nVeamos cuántas reglas hay con soporte = 0,1 y confianza = 0,9:\n\n# Número de reglas con soporte = 0,1 y confianza = 0,9\nlength(reglas)\n\n[1] 3230\n\n\nUn paso necesario al generar reglas es eliminar las redundantes:\n\n# Eliminar reglas redundantes\nindices_no_redundantes &lt;- which(!is.redundant(reglas))\nreglas &lt;- reglas[indices_no_redundantes]\n\nVeamos cuántas reglas sin redundancia hay:\n\n# Número de reglas sin redundancia\nlength(reglas)\n\n[1] 305\n\n\nAhora, quedémonos únicamente con las reglas estadísticamente significativas:\n\nindices_significativos &lt;- which(is.significant(reglas))\nreglas &lt;- reglas[indices_significativos]\n\nVeamos cuántas reglas significativas hay:\n\n# Número de reglas significativas\nlength(reglas)\n\n[1] 237\n\n\nUn parámetro muy importante para las reglas de asociación es el lift, ya que, si este dato es superior a 1, significa que el antecedente y el consecuente tienden a ocurrir juntos más frecuentemente de lo que se esperaría por azar. Es decir, un lift de 3 significa que el antecedente hace que el consecuente sea 3 veces más probable que ocurra.\nTambién nos interesa el count, es decir, el número de casos en los que esa regla se cumple. Ya hemos aplicado el filtro de soporte al crear las reglas, pero, por si acaso, establezcamos también un count mínimo de 50.\nApliquemos ambos filtros:\n\nreglas &lt;- subset(reglas, subset = lift &gt; 1 & count &gt; 50)\n\nVeamos cuántas reglas con lift &gt; 1 y count &gt; 50 hay:\n\n# Número de reglas con lift &gt; 1 y count &gt; 50\nlength(reglas)\n\n[1] 237\n\n\nEl número de reglas no ha disminuido, lo que sugiere que los filtros anteriores se han encargado de desechar las reglas con lift &lt;= 1 y count &lt;= 50.\nEchemos un vistazo a las primeras 15 reglas, ordenadas por confianza:\n\n# Visualizar las 20 primeras reglas\nreglas &lt;- sort(reglas, by=\"confidence\")\ninspect(reglas[1:20])\n\n     lhs                                      rhs                              support confidence  coverage     lift count\n[1]  {followers=[26,49)}                   =&gt; {external_URL=0}               0.1006944          1 0.1006944 1.131631    58\n[2]  {followers=[2.58e+03,1.53e+07]}       =&gt; {nums.length_fullname=[0,0.2)} 0.1006944          1 0.1006944 1.095057    58\n[3]  {followers=[0,10.5)}                  =&gt; {external_URL=0}               0.1006944          1 0.1006944 1.131631    58\n[4]  {external_URL=1}                      =&gt; {fake=0}                       0.1163194          1 0.1163194 2.000000    67\n[5]  {external_URL=1}                      =&gt; {profile_pic=1}                0.1163194          1 0.1163194 1.425743    67\n[6]  {posts=[187,7.39e+03]}                =&gt; {profile_pic=1}                0.1440972          1 0.1440972 1.425743    83\n[7]  {nums.length_username=[0.184,0.368)}  =&gt; {external_URL=0}               0.1857639          1 0.1857639 1.131631   107\n[8]  {posts=[0,1)}                         =&gt; {external_URL=0}               0.2725694          1 0.2725694 1.131631   157\n[9]  {profile_pic=0}                       =&gt; {external_URL=0}               0.2986111          1 0.2986111 1.131631   172\n[10] {fullname_words=[2,12]}               =&gt; {name..username=0}             0.4097222          1 0.4097222 1.035971   236\n[11] {fake=1}                              =&gt; {external_URL=0}               0.5000000          1 0.5000000 1.131631   288\n[12] {nums.length_username=[0,0.184),                                                                                     \n      external_URL=1}                      =&gt; {nums.length_fullname=[0,0.2)} 0.1128472          1 0.1128472 1.095057    65\n[13] {nums.length_username=[0.368,0.552),                                                                                 \n      description_length=[0,5)}            =&gt; {fake=1}                       0.1163194          1 0.1163194 2.000000    67\n[14] {nums.length_username=[0.368,0.552),                                                                                 \n      description_length=[0,5)}            =&gt; {external_URL=0}               0.1163194          1 0.1163194 1.131631    67\n[15] {profile_pic=0,                                                                                                      \n      follows=[0,26)}                      =&gt; {fake=1}                       0.1041667          1 0.1041667 2.000000    60\n[16] {description_length=[0,5),                                                                                           \n      follows=[0,26)}                      =&gt; {external_URL=0}               0.1215278          1 0.1215278 1.131631    70\n[17] {posts=[17.6,63.7),                                                                                                  \n      fake=0}                              =&gt; {profile_pic=1}                0.1059028          1 0.1059028 1.425743    61\n[18] {posts=[17.6,63.7),                                                                                                  \n      fake=0}                              =&gt; {nums.length_fullname=[0,0.2)} 0.1059028          1 0.1059028 1.095057    61\n[19] {nums.length_username=[0,0.184),                                                                                     \n      posts=[17.6,63.7)}                   =&gt; {profile_pic=1}                0.1111111          1 0.1111111 1.425743    64\n[20] {follows=[521,904),                                                                                                  \n      fake=0}                              =&gt; {profile_pic=1}                0.1059028          1 0.1059028 1.425743    61\n\n\nComo vemos, las 20 reglas tienen 100% de confianza, y gracias a los filtros, tienen también buenos valores de lift y coverage.\nVeamos cuántas reglas tienen un 100% de confianza:\n\nreglas_confianza &lt;- subset(reglas, confidence == 1)\nlength(reglas_confianza)\n\n[1] 55\n\n\nHay 55 reglas que son perfectamente precisas, es decir, que si aparece el antecedente, el consecuente también se cumple en el 100% de los casos.\nUna vez examinadas algunas características generales de las reglas, es el momento de quedarnos con las reglas realmente importantes para este proyecto, es decir, las que involucran al parámetro “fake”. Nuestro objetivo actual es, pues, determinar qué parámetros son determinantes para decidir si una cuenta es falsa o verdadera (parámetro “fake” en el consecuente), así como analizar qué patrones suelen cumplirse en las cuentas falsas o verdaderas (parámetro “fake” en el antecedente).\nComencemos con el primer enfoque:\n\n\n3.1.2 ¿Qué parámetros deciden si una cuenta es verdadera o falsa?\nPara encontrar las variables o conjuntos de variables que, en nuestro dataset, determinan si una cuenta es verdadera o falsa con total o casi total seguridad, es necesario encontrar las reglas que presenten el parámetro fake en su consecuente.\nPara cuentas falsas:\n\nreglas_fake &lt;- subset(reglas, subset = rhs %in% \"fake=1\")\nlength(reglas_fake)\n\n[1] 21\n\n\n\ninspect(reglas_fake)\n\n     lhs                                      rhs        support confidence  coverage     lift count\n[1]  {nums.length_username=[0.368,0.552),                                                           \n      description_length=[0,5)}            =&gt; {fake=1} 0.1163194  1.0000000 0.1163194 2.000000    67\n[2]  {profile_pic=0,                                                                                \n      follows=[0,26)}                      =&gt; {fake=1} 0.1041667  1.0000000 0.1041667 2.000000    60\n[3]  {profile_pic=0,                                                                                \n      posts=[0,1)}                         =&gt; {fake=1} 0.2152778  1.0000000 0.2152778 2.000000   124\n[4]  {profile_pic=0,                                                                                \n      description_length=[0,5)}            =&gt; {fake=1} 0.2847222  1.0000000 0.2847222 2.000000   164\n[5]  {profile_pic=0,                                                                                \n      private=0}                           =&gt; {fake=1} 0.2100694  1.0000000 0.2100694 2.000000   121\n[6]  {fullname_words=[1,2),                                                                         \n      description_length=[0,5),                                                                     \n      posts=[0,1)}                         =&gt; {fake=1} 0.1875000  1.0000000 0.1875000 2.000000   108\n[7]  {fullname_words=[1,2),                                                                         \n      private=0,                                                                                    \n      posts=[0,1)}                         =&gt; {fake=1} 0.1284722  1.0000000 0.1284722 2.000000    74\n[8]  {profile_pic=0,                                                                                \n      fullname_words=[1,2)}                =&gt; {fake=1} 0.2239583  0.9923077 0.2256944 1.984615   129\n[9]  {fullname_words=[1,2),                                                                         \n      posts=[0,1)}                         =&gt; {fake=1} 0.1927083  0.9910714 0.1944444 1.982143   111\n[10] {profile_pic=0}                       =&gt; {fake=1} 0.2951389  0.9883721 0.2986111 1.976744   170\n[11] {nums.length_username=[0.368,0.552),                                                           \n      external_URL=0}                      =&gt; {fake=1} 0.1232639  0.9861111 0.1250000 1.972222    71\n[12] {private=0,                                                                                    \n      posts=[0,1)}                         =&gt; {fake=1} 0.1770833  0.9807692 0.1805556 1.961538   102\n[13] {description_length=[0,5),                                                                     \n      posts=[0,1)}                         =&gt; {fake=1} 0.2569444  0.9801325 0.2621528 1.960265   148\n[14] {posts=[0,1)}                         =&gt; {fake=1} 0.2656250  0.9745223 0.2725694 1.949045   153\n[15] {nums.length_username=[0.368,0.552),                                                           \n      fullname_words=[1,2)}                =&gt; {fake=1} 0.1006944  0.9666667 0.1041667 1.933333    58\n[16] {nums.length_username=[0.368,0.552)}  =&gt; {fake=1} 0.1232639  0.9594595 0.1284722 1.918919    71\n[17] {nums.length_username=[0.184,0.368),                                                           \n      fullname_words=[1,2),                                                                         \n      description_length=[0,5)}            =&gt; {fake=1} 0.1041667  0.9523810 0.1093750 1.904762    60\n[18] {fullname_words=[1,2),                                                                         \n      follows=[26,71)}                     =&gt; {fake=1} 0.1006944  0.9508197 0.1059028 1.901639    58\n[19] {description_length=[0,5),                                                                     \n      follows=[0,26)}                      =&gt; {fake=1} 0.1145833  0.9428571 0.1215278 1.885714    66\n[20] {nums.length_username=[0.184,0.368),                                                           \n      fullname_words=[1,2)}                =&gt; {fake=1} 0.1163194  0.9178082 0.1267361 1.835616    67\n[21] {external_URL=0,                                                                               \n      follows=[0,26)}                      =&gt; {fake=1} 0.1215278  0.9090909 0.1336806 1.818182    70\n\n\nY para cuentas verdaderas:\n\nreglas_verdaderas &lt;- subset(reglas, subset = rhs %in% \"fake=0\")\nlength(reglas_verdaderas)\n\n[1] 29\n\n\n\ninspect(reglas_verdaderas)\n\n     lhs                                  rhs        support confidence  coverage     lift count\n[1]  {external_URL=1}                  =&gt; {fake=0} 0.1163194  1.0000000 0.1163194 2.000000    67\n[2]  {fullname_words=[2,12],                                                                    \n      posts=[187,7.39e+03]}            =&gt; {fake=0} 0.1006944  1.0000000 0.1006944 2.000000    58\n[3]  {private=0,                                                                                \n      posts=[187,7.39e+03]}            =&gt; {fake=0} 0.1180556  1.0000000 0.1180556 2.000000    68\n[4]  {nums.length_username=[0,0.184),                                                           \n      posts=[187,7.39e+03]}            =&gt; {fake=0} 0.1336806  1.0000000 0.1336806 2.000000    77\n[5]  {profile_pic=1,                                                                            \n      nums.length_username=[0,0.184),                                                           \n      fullname_words=[2,12],                                                                    \n      nums.length_fullname=[0,0.2),                                                             \n      private=1}                       =&gt; {fake=0} 0.1128472  1.0000000 0.1128472 2.000000    65\n[6]  {posts=[187,7.39e+03]}            =&gt; {fake=0} 0.1423611  0.9879518 0.1440972 1.975904    82\n[7]  {profile_pic=1,                                                                            \n      nums.length_username=[0,0.184),                                                           \n      fullname_words=[2,12],                                                                    \n      private=1}                       =&gt; {fake=0} 0.1145833  0.9850746 0.1163194 1.970149    66\n[8]  {profile_pic=1,                                                                            \n      fullname_words=[2,12],                                                                    \n      description_length=[43,150]}     =&gt; {fake=0} 0.1354167  0.9750000 0.1388889 1.950000    78\n[9]  {nums.length_username=[0,0.184),                                                           \n      fullname_words=[2,12],                                                                    \n      description_length=[43,150]}     =&gt; {fake=0} 0.1267361  0.9733333 0.1302083 1.946667    73\n[10] {profile_pic=1,                                                                            \n      fullname_words=[2,12],                                                                    \n      nums.length_fullname=[0,0.2),                                                             \n      private=1}                       =&gt; {fake=0} 0.1163194  0.9710145 0.1197917 1.942029    67\n[11] {fullname_words=[2,12],                                                                    \n      description_length=[43,150],                                                              \n      private=0}                       =&gt; {fake=0} 0.1041667  0.9677419 0.1076389 1.935484    60\n[12] {profile_pic=1,                                                                            \n      nums.length_username=[0,0.184),                                                           \n      follows=[521,904)}               =&gt; {fake=0} 0.1006944  0.9666667 0.1041667 1.933333    58\n[13] {fullname_words=[2,12],                                                                    \n      description_length=[43,150]}     =&gt; {fake=0} 0.1354167  0.9629630 0.1406250 1.925926    78\n[14] {profile_pic=1,                                                                            \n      fullname_words=[2,12],                                                                    \n      private=1}                       =&gt; {fake=0} 0.1180556  0.9577465 0.1232639 1.915493    68\n[15] {profile_pic=1,                                                                            \n      nums.length_username=[0,0.184),                                                           \n      name..username=0,                                                                         \n      description_length=[5,43)}       =&gt; {fake=0} 0.1406250  0.9529412 0.1475694 1.905882    81\n[16] {nums.length_username=[0,0.184),                                                           \n      posts=[63.7,187)}                =&gt; {fake=0} 0.1215278  0.9459459 0.1284722 1.891892    70\n[17] {profile_pic=1,                                                                            \n      nums.length_username=[0,0.184),                                                           \n      fullname_words=[2,12],                                                                    \n      nums.length_fullname=[0,0.2)}    =&gt; {fake=0} 0.2951389  0.9444444 0.3125000 1.888889   170\n[18] {profile_pic=1,                                                                            \n      nums.length_username=[0,0.184),                                                           \n      description_length=[5,43)}       =&gt; {fake=0} 0.1406250  0.9418605 0.1493056 1.883721    81\n[19] {profile_pic=1,                                                                            \n      nums.length_username=[0,0.184),                                                           \n      fullname_words=[2,12]}           =&gt; {fake=0} 0.2968750  0.9395604 0.3159722 1.879121   171\n[20] {nums.length_username=[0,0.184),                                                           \n      description_length=[43,150],                                                              \n      private=0}                       =&gt; {fake=0} 0.1284722  0.9367089 0.1371528 1.873418    74\n[21] {nums.length_username=[0,0.184),                                                           \n      description_length=[43,150]}     =&gt; {fake=0} 0.1718750  0.9339623 0.1840278 1.867925    99\n[22] {nums.length_username=[0,0.184),                                                           \n      name..username=0,                                                                         \n      description_length=[5,43)}       =&gt; {fake=0} 0.1440972  0.9325843 0.1545139 1.865169    83\n[23] {description_length=[43,150],                                                              \n      private=0}                       =&gt; {fake=0} 0.1406250  0.9310345 0.1510417 1.862069    81\n[24] {nums.length_username=[0,0.184),                                                           \n      description_length=[5,43)}       =&gt; {fake=0} 0.1440972  0.9222222 0.1562500 1.844444    83\n[25] {nums.length_username=[0,0.184),                                                           \n      fullname_words=[2,12],                                                                    \n      nums.length_fullname=[0,0.2),                                                             \n      private=1}                       =&gt; {fake=0} 0.1128472  0.9154930 0.1232639 1.830986    65\n[26] {profile_pic=1,                                                                            \n      description_length=[43,150]}     =&gt; {fake=0} 0.1857639  0.9145299 0.2031250 1.829060   107\n[27] {profile_pic=1,                                                                            \n      nums.length_fullname=[0,0.2),                                                             \n      follows=[521,904)}               =&gt; {fake=0} 0.1041667  0.9090909 0.1145833 1.818182    60\n[28] {nums.length_fullname=[0,0.2),                                                             \n      description_length=[43,150]}     =&gt; {fake=0} 0.1805556  0.9043478 0.1996528 1.808696   104\n[29] {nums.length_username=[0,0.184),                                                           \n      fullname_words=[2,12],                                                                    \n      private=1}                       =&gt; {fake=0} 0.1145833  0.9041096 0.1267361 1.808219    66\n\n\nComo podemos observar, han quedado 21 reglas con fake=1 en el consecuente (cuentas falsas), y 29 reglas con fake=0 en el consecuente (cuentas verdaderas). Para analizar algunas reglas interesantes, primero combinemos ambos conjuntos de reglas:\n\n# Combinar ambas selecciones\nreglas_fake_verdaderas &lt;- c(reglas_fake, reglas_verdaderas)\nlength(reglas_fake_verdaderas)\n\n[1] 50\n\n\nPor la longitud, sabemos que la combinación de las reglas ha sido exitosa. Ahora sí, analicemos las reglas.\nEn primer lugar, veamos si existen reglas con una sola variable en el antecedente:\n\nreglas_fv_1left &lt;- subset(reglas_fake_verdaderas, size(lhs) == 1)\nlength(reglas_fv_1left)\n\n[1] 5\n\n\n\nreglas_fv_1left &lt;- sort(reglas_fv_1left, by=\"confidence\")\ninspect(reglas_fv_1left)\n\n    lhs                                     rhs      support   confidence\n[1] {external_URL=1}                     =&gt; {fake=0} 0.1163194 1.0000000 \n[2] {profile_pic=0}                      =&gt; {fake=1} 0.2951389 0.9883721 \n[3] {posts=[187,7.39e+03]}               =&gt; {fake=0} 0.1423611 0.9879518 \n[4] {posts=[0,1)}                        =&gt; {fake=1} 0.2656250 0.9745223 \n[5] {nums.length_username=[0.368,0.552)} =&gt; {fake=1} 0.1232639 0.9594595 \n    coverage  lift     count\n[1] 0.1163194 2.000000  67  \n[2] 0.2986111 1.976744 170  \n[3] 0.1440972 1.975904  82  \n[4] 0.2725694 1.949045 153  \n[5] 0.1284722 1.918919  71  \n\n\nComentemos las reglas obtenidas:\n\nComo vemos, sólo una de estas reglas posee plena confianza, y, de hecho, la conocíamos con anterioridad: ya dijimos que, en este dataset, no había cuentas falsas con URL externa. Por lo tanto, si una cuenta tiene URL externa, será verdadera.\nTambién mencionamos que la ausencia de foto de perfil llevaba a pensar en una cuenta falsa. Ahora lo podemos afirmar con una confianza del 98,83%.\nOtra conclusión ya vista es la de que un número alto de publicaciones normalmente conduce a una cuenta verdadera. La confianza cuando el valor de publicaciones está entre 188 y 7390 (es el intervalo más alto) es del 98,79%.\nAl igual que con la foto de perfil, la ausencia de publicaciones llevaba a pensar en cuentas falsas. En este caso, el intervalo es de 0-1 publicaciones, y nos garantiza falsedad de la cuenta en el 97,45% de los casos.\nEsta regla es algo más extraña. El intervalo intermedio de valores del ratio de números en la longitud del username indica que la cuenta es falsa con confianza del 95%. Ya vimos, en la visualización, que los valores altos de esta variable aparecían en las cuentas falsas, con lo que probablemente los intervalos superiores aparecerán en los conjuntos de reglas con más de una variable en el antecedente.\n\nA continuación veremos todas estas reglas, y comentaremos las más llamativas:\n\nreglas_fake_verdaderas &lt;- sort(reglas_fake_verdaderas, by=\"confidence\")\ninspect(reglas_fake_verdaderas)\n\n     lhs                                      rhs        support confidence  coverage     lift count\n[1]  {nums.length_username=[0.368,0.552),                                                           \n      description_length=[0,5)}            =&gt; {fake=1} 0.1163194  1.0000000 0.1163194 2.000000    67\n[2]  {profile_pic=0,                                                                                \n      follows=[0,26)}                      =&gt; {fake=1} 0.1041667  1.0000000 0.1041667 2.000000    60\n[3]  {profile_pic=0,                                                                                \n      posts=[0,1)}                         =&gt; {fake=1} 0.2152778  1.0000000 0.2152778 2.000000   124\n[4]  {profile_pic=0,                                                                                \n      description_length=[0,5)}            =&gt; {fake=1} 0.2847222  1.0000000 0.2847222 2.000000   164\n[5]  {profile_pic=0,                                                                                \n      private=0}                           =&gt; {fake=1} 0.2100694  1.0000000 0.2100694 2.000000   121\n[6]  {fullname_words=[1,2),                                                                         \n      description_length=[0,5),                                                                     \n      posts=[0,1)}                         =&gt; {fake=1} 0.1875000  1.0000000 0.1875000 2.000000   108\n[7]  {fullname_words=[1,2),                                                                         \n      private=0,                                                                                    \n      posts=[0,1)}                         =&gt; {fake=1} 0.1284722  1.0000000 0.1284722 2.000000    74\n[8]  {external_URL=1}                      =&gt; {fake=0} 0.1163194  1.0000000 0.1163194 2.000000    67\n[9]  {fullname_words=[2,12],                                                                        \n      posts=[187,7.39e+03]}                =&gt; {fake=0} 0.1006944  1.0000000 0.1006944 2.000000    58\n[10] {private=0,                                                                                    \n      posts=[187,7.39e+03]}                =&gt; {fake=0} 0.1180556  1.0000000 0.1180556 2.000000    68\n[11] {nums.length_username=[0,0.184),                                                               \n      posts=[187,7.39e+03]}                =&gt; {fake=0} 0.1336806  1.0000000 0.1336806 2.000000    77\n[12] {profile_pic=1,                                                                                \n      nums.length_username=[0,0.184),                                                               \n      fullname_words=[2,12],                                                                        \n      nums.length_fullname=[0,0.2),                                                                 \n      private=1}                           =&gt; {fake=0} 0.1128472  1.0000000 0.1128472 2.000000    65\n[13] {profile_pic=0,                                                                                \n      fullname_words=[1,2)}                =&gt; {fake=1} 0.2239583  0.9923077 0.2256944 1.984615   129\n[14] {fullname_words=[1,2),                                                                         \n      posts=[0,1)}                         =&gt; {fake=1} 0.1927083  0.9910714 0.1944444 1.982143   111\n[15] {profile_pic=0}                       =&gt; {fake=1} 0.2951389  0.9883721 0.2986111 1.976744   170\n[16] {posts=[187,7.39e+03]}                =&gt; {fake=0} 0.1423611  0.9879518 0.1440972 1.975904    82\n[17] {nums.length_username=[0.368,0.552),                                                           \n      external_URL=0}                      =&gt; {fake=1} 0.1232639  0.9861111 0.1250000 1.972222    71\n[18] {profile_pic=1,                                                                                \n      nums.length_username=[0,0.184),                                                               \n      fullname_words=[2,12],                                                                        \n      private=1}                           =&gt; {fake=0} 0.1145833  0.9850746 0.1163194 1.970149    66\n[19] {private=0,                                                                                    \n      posts=[0,1)}                         =&gt; {fake=1} 0.1770833  0.9807692 0.1805556 1.961538   102\n[20] {description_length=[0,5),                                                                     \n      posts=[0,1)}                         =&gt; {fake=1} 0.2569444  0.9801325 0.2621528 1.960265   148\n[21] {profile_pic=1,                                                                                \n      fullname_words=[2,12],                                                                        \n      description_length=[43,150]}         =&gt; {fake=0} 0.1354167  0.9750000 0.1388889 1.950000    78\n[22] {posts=[0,1)}                         =&gt; {fake=1} 0.2656250  0.9745223 0.2725694 1.949045   153\n[23] {nums.length_username=[0,0.184),                                                               \n      fullname_words=[2,12],                                                                        \n      description_length=[43,150]}         =&gt; {fake=0} 0.1267361  0.9733333 0.1302083 1.946667    73\n[24] {profile_pic=1,                                                                                \n      fullname_words=[2,12],                                                                        \n      nums.length_fullname=[0,0.2),                                                                 \n      private=1}                           =&gt; {fake=0} 0.1163194  0.9710145 0.1197917 1.942029    67\n[25] {fullname_words=[2,12],                                                                        \n      description_length=[43,150],                                                                  \n      private=0}                           =&gt; {fake=0} 0.1041667  0.9677419 0.1076389 1.935484    60\n[26] {nums.length_username=[0.368,0.552),                                                           \n      fullname_words=[1,2)}                =&gt; {fake=1} 0.1006944  0.9666667 0.1041667 1.933333    58\n[27] {profile_pic=1,                                                                                \n      nums.length_username=[0,0.184),                                                               \n      follows=[521,904)}                   =&gt; {fake=0} 0.1006944  0.9666667 0.1041667 1.933333    58\n[28] {fullname_words=[2,12],                                                                        \n      description_length=[43,150]}         =&gt; {fake=0} 0.1354167  0.9629630 0.1406250 1.925926    78\n[29] {nums.length_username=[0.368,0.552)}  =&gt; {fake=1} 0.1232639  0.9594595 0.1284722 1.918919    71\n[30] {profile_pic=1,                                                                                \n      fullname_words=[2,12],                                                                        \n      private=1}                           =&gt; {fake=0} 0.1180556  0.9577465 0.1232639 1.915493    68\n[31] {profile_pic=1,                                                                                \n      nums.length_username=[0,0.184),                                                               \n      name..username=0,                                                                             \n      description_length=[5,43)}           =&gt; {fake=0} 0.1406250  0.9529412 0.1475694 1.905882    81\n[32] {nums.length_username=[0.184,0.368),                                                           \n      fullname_words=[1,2),                                                                         \n      description_length=[0,5)}            =&gt; {fake=1} 0.1041667  0.9523810 0.1093750 1.904762    60\n[33] {fullname_words=[1,2),                                                                         \n      follows=[26,71)}                     =&gt; {fake=1} 0.1006944  0.9508197 0.1059028 1.901639    58\n[34] {nums.length_username=[0,0.184),                                                               \n      posts=[63.7,187)}                    =&gt; {fake=0} 0.1215278  0.9459459 0.1284722 1.891892    70\n[35] {profile_pic=1,                                                                                \n      nums.length_username=[0,0.184),                                                               \n      fullname_words=[2,12],                                                                        \n      nums.length_fullname=[0,0.2)}        =&gt; {fake=0} 0.2951389  0.9444444 0.3125000 1.888889   170\n[36] {description_length=[0,5),                                                                     \n      follows=[0,26)}                      =&gt; {fake=1} 0.1145833  0.9428571 0.1215278 1.885714    66\n[37] {profile_pic=1,                                                                                \n      nums.length_username=[0,0.184),                                                               \n      description_length=[5,43)}           =&gt; {fake=0} 0.1406250  0.9418605 0.1493056 1.883721    81\n[38] {profile_pic=1,                                                                                \n      nums.length_username=[0,0.184),                                                               \n      fullname_words=[2,12]}               =&gt; {fake=0} 0.2968750  0.9395604 0.3159722 1.879121   171\n[39] {nums.length_username=[0,0.184),                                                               \n      description_length=[43,150],                                                                  \n      private=0}                           =&gt; {fake=0} 0.1284722  0.9367089 0.1371528 1.873418    74\n[40] {nums.length_username=[0,0.184),                                                               \n      description_length=[43,150]}         =&gt; {fake=0} 0.1718750  0.9339623 0.1840278 1.867925    99\n[41] {nums.length_username=[0,0.184),                                                               \n      name..username=0,                                                                             \n      description_length=[5,43)}           =&gt; {fake=0} 0.1440972  0.9325843 0.1545139 1.865169    83\n[42] {description_length=[43,150],                                                                  \n      private=0}                           =&gt; {fake=0} 0.1406250  0.9310345 0.1510417 1.862069    81\n[43] {nums.length_username=[0,0.184),                                                               \n      description_length=[5,43)}           =&gt; {fake=0} 0.1440972  0.9222222 0.1562500 1.844444    83\n[44] {nums.length_username=[0.184,0.368),                                                           \n      fullname_words=[1,2)}                =&gt; {fake=1} 0.1163194  0.9178082 0.1267361 1.835616    67\n[45] {nums.length_username=[0,0.184),                                                               \n      fullname_words=[2,12],                                                                        \n      nums.length_fullname=[0,0.2),                                                                 \n      private=1}                           =&gt; {fake=0} 0.1128472  0.9154930 0.1232639 1.830986    65\n[46] {profile_pic=1,                                                                                \n      description_length=[43,150]}         =&gt; {fake=0} 0.1857639  0.9145299 0.2031250 1.829060   107\n[47] {external_URL=0,                                                                               \n      follows=[0,26)}                      =&gt; {fake=1} 0.1215278  0.9090909 0.1336806 1.818182    70\n[48] {profile_pic=1,                                                                                \n      nums.length_fullname=[0,0.2),                                                                 \n      follows=[521,904)}                   =&gt; {fake=0} 0.1041667  0.9090909 0.1145833 1.818182    60\n[49] {nums.length_fullname=[0,0.2),                                                                 \n      description_length=[43,150]}         =&gt; {fake=0} 0.1805556  0.9043478 0.1996528 1.808696   104\n[50] {nums.length_username=[0,0.184),                                                               \n      fullname_words=[2,12],                                                                        \n      private=1}                           =&gt; {fake=0} 0.1145833  0.9041096 0.1267361 1.808219    66\n\n\nPara extraer las conclusiones generales de estas 50 reglas, analicemos la frecuencia de aparición de los antecedentes, empezando con las cuentas falsas:\n\n# Seleccionar reglas donde rhs es \"fake=1\"\nreglas_fake_rhs &lt;- subset(reglas, subset = rhs %in% \"fake=1\")\n\n# Convertir los antecedentes a una lista\nantecedentes_lista_f &lt;- as(lhs(reglas_fake_rhs), \"list\")\n\n# Crear una tabla de frecuencias\nfrecuencia_ant_f &lt;- table(unlist(antecedentes_lista_f))\n\n# Ordenar la tabla de frecuencias de forma descendente\nfrecuencia_ant_f_ordenada &lt;- sort(frecuencia_ant_f, decreasing = TRUE)\n\nfrecuencia_ant_f_ordenada\n\n\n              fullname_words=[1,2)                        posts=[0,1) \n                                 8                                  7 \n          description_length=[0,5)                      profile_pic=0 \n                                 6                                  6 \nnums.length_username=[0.368,0.552)                     follows=[0,26) \n                                 4                                  3 \n                         private=0                     external_URL=0 \n                                 3                                  2 \nnums.length_username=[0.184,0.368)                    follows=[26,71) \n                                 2                                  1 \n\n\nPodemos afirmar con una seguridad considerable que una cuenta es falsa cuando identificamos ciertas combinaciones de estas características:\n\nPocas palabras en el nombre completo\nPocas o nulas publicaciones\nDescripción vacía o muy breve\nAusencia de foto de perfil\nRatio de números en la longitud del username entre 0,184 y 0,552\nPocos o nulos seguidos\nCuenta pública\nAusencia de URL externa\n\nAhora veamos la frecuencia de aparición de los antecedentes para cuentas verdaderas:\n\n# Seleccionar reglas donde rhs es \"fake=0\"\nreglas_verdaderas_rhs &lt;- subset(reglas, subset = rhs %in% \"fake=0\")\n\n# Convertir los antecedentes a una lista\nantecedentes_lista_v &lt;- as(lhs(reglas_verdaderas_rhs), \"list\")\n\n# Crear una tabla de frecuencias\nfrecuencia_ant_v &lt;- table(unlist(antecedentes_lista_v))\n\n# Ordenar la tabla de frecuencias de forma descendente\nfrecuencia_ant_v_ordenada &lt;- sort(frecuencia_ant_v, decreasing = TRUE)\n\nfrecuencia_ant_v_ordenada\n\n\nnums.length_username=[0,0.184)          fullname_words=[2,12] \n                            16                             13 \n                 profile_pic=1    description_length=[43,150] \n                            12                              9 \n  nums.length_fullname=[0,0.2)                      private=1 \n                             6                              6 \n     description_length=[5,43)           posts=[187,7.39e+03] \n                             4                              4 \n                     private=0              follows=[521,904) \n                             4                              2 \n              name..username=0                 external_URL=1 \n                             2                              1 \n              posts=[63.7,187) \n                             1 \n\n\nPodemos afirmar con una seguridad considerable que una cuenta es verdadera cuando identificamos ciertas combinaciones de estas características:\n\nRatio de números en la longitud del username entre 0 y 0,184\nCantidad considerable de palabras en el nombre completo\nPresencia de foto de perfil\nDescripción detallada\nRatio de números en la longitud del nombre completo entre 0 y 0,2\nCuenta privada *\nNúmero alto de publicaciones\nCuenta pública *\nNúmero alto de seguidos\nAusencia de coincidencia entre nombre completo y nombre de usuario\nPresencia de URL externa\n\nSorprende la ausencia en los antecedentes del número alto de seguidores.\n\n* Nota: es un ejemplo de variable que por sí sola no decide nada, pero que combinada con otras puede dar lugar a una conclusión o a otra. Recomiendo fijarse en la variable private en las siguientes reglas:\n\n\ninspect(c(reglas_fake_verdaderas[5], reglas_fake_verdaderas[10], reglas_fake_verdaderas[18]))\n\n    lhs                                  rhs        support confidence  coverage     lift count\n[1] {profile_pic=0,                                                                            \n     private=0}                       =&gt; {fake=1} 0.2100694  1.0000000 0.2100694 2.000000   121\n[2] {private=0,                                                                                \n     posts=[187,7.39e+03]}            =&gt; {fake=0} 0.1180556  1.0000000 0.1180556 2.000000    68\n[3] {profile_pic=1,                                                                            \n     nums.length_username=[0,0.184),                                                           \n     fullname_words=[2,12],                                                                    \n     private=1}                       =&gt; {fake=0} 0.1145833  0.9850746 0.1163194 1.970149    66\n\n\n\n\n3.1.3 Predicción\nUna vez llegados aquí, habiendo analizado las reglas de asociación del dataset de entrenamiento, es momento de probar la calidad de las reglas con el dataset de test.\nDebemos comenzar discretizando los valores del dataset de test con los mismos intervalos que usamos en el dataset de entrenamiento, ya que las reglas que vamos a usar poseen estos intervalos:\n\n# Convertir dataset de test a data frame\ndatos_testDF &lt;- data.frame(datos_test)\n\nView(datos_test)\n\n# Guardar la columna fake en una variable aparte, para poder compararla al final con la predicción\nfake_originales &lt;- datos_testDF$fake\n\n# Eliminar la columna fake\ndatos_testDF$fake &lt;- NULL\n\nView(datos_testDF)\n\n# Discretizar columnas numéricas con los mismos intervalos que en el dataset de entrenamiento\n\n# Iterar sobre cada fila de datos_testDF\nfor (i in 1:nrow(datos_testDF)) {\n  # Para nums.length_username\n  if (datos_testDF[i, \"nums.length_username\"] &lt; 0.184) {\n    datos_testDF[i, \"nums.length_username\"] &lt;- \"[0,0.184)\"\n  } else if (datos_testDF[i, \"nums.length_username\"] &lt; 0.368) {\n    datos_testDF[i, \"nums.length_username\"] &lt;- \"[0.184,0.368)\"\n  } else if (datos_testDF[i, \"nums.length_username\"] &lt; 0.552) {\n    datos_testDF[i, \"nums.length_username\"] &lt;- \"[0.368,0.552)\"\n  } else if (datos_testDF[i, \"nums.length_username\"] &lt; 0.736) {\n    datos_testDF[i, \"nums.length_username\"] &lt;- \"[0.552,0.736)\"\n  } else {\n    datos_testDF[i, \"nums.length_username\"] &lt;- \"[0.736,0.92]\"\n  }\n\n  # Para fullname_words\n  if (datos_testDF[i, \"fullname_words\"] &lt; 1) {\n    datos_testDF[i, \"fullname_words\"] &lt;- \"[0,1)\"\n  } else if (datos_testDF[i, \"fullname_words\"] &lt; 2) {\n    datos_testDF[i, \"fullname_words\"] &lt;- \"[1,2)\"\n  } else {\n    datos_testDF[i, \"fullname_words\"] &lt;- \"[2,12]\"\n  }\n  \n  # Para nums.length_fullname\n  if (datos_testDF[i, \"nums.length_fullname\"] &lt; 0.2) {\n    datos_testDF[i, \"nums.length_fullname\"] &lt;- \"[0,0.2)\"\n  } else if (datos_testDF[i, \"nums.length_fullname\"] &lt; 0.4) {\n    datos_testDF[i, \"nums.length_fullname\"] &lt;- \"[0.2,0.4)\"\n  } else if (datos_testDF[i, \"nums.length_fullname\"] &lt; 0.6) {\n    datos_testDF[i, \"nums.length_fullname\"] &lt;- \"[0.4,0.6)\"\n  } else if (datos_testDF[i, \"nums.length_fullname\"] &lt; 0.8) {\n    datos_testDF[i, \"nums.length_fullname\"] &lt;- \"[0.6,0.8)\"\n  } else {\n    datos_testDF[i, \"nums.length_fullname\"] &lt;- \"[0.8,1]\"\n  }\n  \n  # Para description_length\n  if (datos_testDF[i, \"description_length\"] &lt; 5) {\n    datos_testDF[i, \"description_length\"] &lt;- \"[0,5)\"\n  } else if (datos_testDF[i, \"description_length\"] &lt; 43) {\n    datos_testDF[i, \"description_length\"] &lt;- \"[5,43)\"\n  } else {\n    datos_testDF[i, \"description_length\"] &lt;- \"[43,150]\"\n  }\n  \n  # Para posts\n  if (datos_testDF[i, \"posts\"] &lt; 1) {\n    datos_testDF[i, \"posts\"] &lt;- \"[0,1)\"\n  } else if (datos_testDF[i, \"posts\"] &lt; 5) {\n    datos_testDF[i, \"posts\"] &lt;- \"[1,5)\"\n  } else if (datos_testDF[i, \"posts\"] &lt; 17.6) {\n    datos_testDF[i, \"posts\"] &lt;- \"[5,17.6)\"\n  } else if (datos_testDF[i, \"posts\"] &lt; 63.7) {\n    datos_testDF[i, \"posts\"] &lt;- \"[17.6,63.7)\"\n  } else if (datos_testDF[i, \"posts\"] &lt; 187) {\n    datos_testDF[i, \"posts\"] &lt;- \"[63.7,187)\"\n  } else {\n    datos_testDF[i, \"posts\"] &lt;- \"[187,7.39e+03]\"\n  }\n  \n  # Para followers\n  if (datos_testDF[i, \"followers\"] &lt; 10.5) {\n    datos_testDF[i, \"followers\"] &lt;- \"[0,10.5)\"\n  } else if (datos_testDF[i, \"followers\"] &lt; 26) {\n    datos_testDF[i, \"followers\"] &lt;- \"[10.5,26)\"\n  } else if (datos_testDF[i, \"followers\"] &lt; 49) {\n    datos_testDF[i, \"followers\"] &lt;- \"[26,49)\"\n  } else if (datos_testDF[i, \"followers\"] &lt; 78) {\n    datos_testDF[i, \"followers\"] &lt;- \"[49,78)\"\n  } else if (datos_testDF[i, \"followers\"] &lt; 150) {\n    datos_testDF[i, \"followers\"] &lt;- \"[78,150)\"\n  } else if (datos_testDF[i, \"followers\"] &lt; 271) {\n    datos_testDF[i, \"followers\"] &lt;- \"[150,271)\"\n  } else if (datos_testDF[i, \"followers\"] &lt; 496) {\n    datos_testDF[i, \"followers\"] &lt;- \"[271,496)\"\n  } else if (datos_testDF[i, \"followers\"] &lt; 916) {\n    datos_testDF[i, \"followers\"] &lt;- \"[496,916)\"\n  } else if (datos_testDF[i, \"followers\"] &lt; 2580) {\n    datos_testDF[i, \"followers\"] &lt;- \"[916,2.58e+03)\"\n  } else {\n    datos_testDF[i, \"followers\"] &lt;- \"[2.58e+03,1.53e+07]\"\n  }\n  \n  # Para follows\n  if (datos_testDF[i, \"follows\"] &lt; 26) {\n    datos_testDF[i, \"follows\"] &lt;- \"[0,26)\"\n  } else if (datos_testDF[i, \"follows\"] &lt; 71) {\n    datos_testDF[i, \"follows\"] &lt;- \"[26,71)\"\n  } else if (datos_testDF[i, \"follows\"] &lt; 159) {\n    datos_testDF[i, \"follows\"] &lt;- \"[71,159)\"\n  } else if (datos_testDF[i, \"follows\"] &lt; 322) {\n    datos_testDF[i, \"follows\"] &lt;- \"[159,322)\"\n  } else if (datos_testDF[i, \"follows\"] &lt; 521) {\n    datos_testDF[i, \"follows\"] &lt;- \"[322,521)\"\n  } else if (datos_testDF[i, \"follows\"] &lt; 904) {\n    datos_testDF[i, \"follows\"] &lt;- \"[521,904)\"\n  } else {\n    datos_testDF[i, \"follows\"] &lt;- \"[904,7.5e+03]\"\n  }\n  \n}\n\n# Concertir las columnas no binarias (las que ahora tienen intervalos) a tipo factor\ncolumnas_intervalo &lt;- c(\"nums.length_username\", \"fullname_words\", \"nums.length_fullname\", \"description_length\", \"posts\", \"followers\", \"follows\")\ndatos_testDF[, columnas_intervalo] &lt;- lapply(datos_testDF[, columnas_intervalo], factor)\n\n# Convertir columnas binarias a factor\ncolumnas_binarias &lt;- c(1, 5, 7, 8)\ndatos_testDF[, columnas_binarias] &lt;- lapply(datos_testDF[, columnas_binarias], factor)\n\n# Ver datos_testDF después de la conversión\nhead(datos_testDF)\n\n  profile_pic nums.length_username fullname_words nums.length_fullname\n1           1        [0.184,0.368)          [1,2)            [0.2,0.4)\n2           1            [0,0.184)         [2,12]              [0,0.2)\n3           1            [0,0.184)         [2,12]              [0,0.2)\n4           1            [0,0.184)          [1,2)              [0,0.2)\n5           1        [0.368,0.552)          [1,2)              [0,0.2)\n6           1            [0,0.184)          [1,2)              [0,0.2)\n  name..username description_length external_URL private       posts followers\n1              1             [5,43)            0       1 [17.6,63.7) [271,496)\n2              0           [43,150]            0       1       [1,5)   [26,49)\n3              0           [43,150]            0       1       [1,5)   [26,49)\n4              0              [0,5)            0       1       [1,5) [10.5,26)\n5              0           [43,150]            0       1 [17.6,63.7) [10.5,26)\n6              0              [0,5)            0       1 [17.6,63.7)   [26,49)\n    follows\n1 [521,904)\n2   [26,71)\n3   [26,71)\n4 [521,904)\n5   [26,71)\n6   [26,71)\n\n\nComo vemos, todas las variables numéricas han pasado a tener datos de intervalo, y todas las columnas han pasado a ser de tipo factor.\nAhora toca aplicar las reglas a los datos de test, y realizar la predicción:\n\n# Convertir datos_test a transacciones\nTdatos_test &lt;- as(datos_testDF, \"transactions\")\n\n# Crear una columna vacía para las predicciones\ndatos_testDF$fake_predict_RA &lt;- NA\n\n# Aplicar las reglas a cada transacción en datos_test\nfor (i in 1:length(Tdatos_test)) {\n  # Obtener la transacción de esa fila\n  trans &lt;- Tdatos_test[i]\n  \n  # Evaluar las reglas con el antecedente correspondiente: si el antecedente es subconjunto de la transacción actual, asignar el consecuente de la primera regla que lo cumpla (están ordenadas por confidence) a 'fake_predict_RA'\n  matches &lt;- is.subset(lhs(reglas_fake_verdaderas), trans)\n  \n  # Si alguna regla se cumple, asignar el consecuente correspondiente a 'fake_predict_RA'\n  if (any(matches)) {\n    # Obtener el consecuente de la primera regla que se cumple\n    matching_rule &lt;- reglas_fake_verdaderas[which(matches)[1]]\n    fake_value &lt;- labels(rhs(matching_rule))[1]\n    \n    # Asignar el valor predicho\n    datos_testDF$fake_predict_RA[i] &lt;- sub(\"fake=\", \"\", fake_value)\n  }\n  \n  # Si ninguna regla cuenta con un antecedente que sea subconjunto de la transacción actual, realizar una heurística (árbol de decisión) con las conclusiones extraídas de las reglas\n  else {\n    # Si la cuenta tiene URL externa, es verdadera\n    if (datos_test$external_URL[i] == 1) {\n      datos_testDF$fake_predict_RA[i] &lt;- 0\n      # Si la cuenta no tiene foto de perfil, es falsa\n    } else if (datos_test$profile_pic[i] == 0) {\n      datos_testDF$fake_predict_RA[i] &lt;- 1\n      # Si la cuenta tiene menos de 250 seguido, es falsa\n    } else if (datos_test$followers[i] &lt; 250) {\n      datos_testDF$fake_predict_RA[i] &lt;- 1\n      # En otro caso, consideramos que es verdadera\n    } else {\n      datos_testDF$fake_predict_RA[i] &lt;- 0\n    }\n  }\n}\n\nEchemos un vistazo a las primeras filas de datos_testDF para comprobar que la predicción se ha realizado correctamente:\n\n# Mostrar las primeras filas de datos_testDF\nhead(datos_testDF)\n\n  profile_pic nums.length_username fullname_words nums.length_fullname\n1           1        [0.184,0.368)          [1,2)            [0.2,0.4)\n2           1            [0,0.184)         [2,12]              [0,0.2)\n3           1            [0,0.184)         [2,12]              [0,0.2)\n4           1            [0,0.184)          [1,2)              [0,0.2)\n5           1        [0.368,0.552)          [1,2)              [0,0.2)\n6           1            [0,0.184)          [1,2)              [0,0.2)\n  name..username description_length external_URL private       posts followers\n1              1             [5,43)            0       1 [17.6,63.7) [271,496)\n2              0           [43,150]            0       1       [1,5)   [26,49)\n3              0           [43,150]            0       1       [1,5)   [26,49)\n4              0              [0,5)            0       1       [1,5) [10.5,26)\n5              0           [43,150]            0       1 [17.6,63.7) [10.5,26)\n6              0              [0,5)            0       1 [17.6,63.7)   [26,49)\n    follows fake_predict_RA\n1 [521,904)             {1}\n2   [26,71)             {0}\n3   [26,71)             {0}\n4 [521,904)             {0}\n5   [26,71)             {1}\n6   [26,71)             {1}\n\n#View(datos_testDF)\n\nVemos que hay predicciones en la columna fake_predict_RA, aunque muchas de ellas (haciendo el View) contienen caracteres ‘{’ y ‘}’. Deshagámonos de ellos y convirtamos la columna a numérica para poder compararla con la columna fake original:\n\n# Convertir datos_testDF$fake_predict_RA para eliminar los caracteres '{' y '}'\ndatos_testDF$fake_predict_RA &lt;- gsub(\"\\\\{|\\\\}\", \"\", datos_testDF$fake_predict_RA)\n\n# Convertir datos_testDF$fake_predict_RA a numérico\ndatos_testDF$fake_predict_RA &lt;- as.numeric(datos_testDF$fake_predict_RA)\n\n# Mostrar las primeras filas de datos_testDF\nhead(datos_testDF)\n\n  profile_pic nums.length_username fullname_words nums.length_fullname\n1           1        [0.184,0.368)          [1,2)            [0.2,0.4)\n2           1            [0,0.184)         [2,12]              [0,0.2)\n3           1            [0,0.184)         [2,12]              [0,0.2)\n4           1            [0,0.184)          [1,2)              [0,0.2)\n5           1        [0.368,0.552)          [1,2)              [0,0.2)\n6           1            [0,0.184)          [1,2)              [0,0.2)\n  name..username description_length external_URL private       posts followers\n1              1             [5,43)            0       1 [17.6,63.7) [271,496)\n2              0           [43,150]            0       1       [1,5)   [26,49)\n3              0           [43,150]            0       1       [1,5)   [26,49)\n4              0              [0,5)            0       1       [1,5) [10.5,26)\n5              0           [43,150]            0       1 [17.6,63.7) [10.5,26)\n6              0              [0,5)            0       1 [17.6,63.7)   [26,49)\n    follows fake_predict_RA\n1 [521,904)               1\n2   [26,71)               0\n3   [26,71)               0\n4 [521,904)               0\n5   [26,71)               1\n6   [26,71)               1\n\n\nMisión cumplida. Ahora, revisemos si hay valores NA en esa columna:\n\n# Contar los valores NA de la columna fake_predict_RA\ncat(\"fake_predict_RA tiene \", sum(is.na(datos_testDF$fake_predict_RA)), \" valores NA.\")\n\nfake_predict_RA tiene  0  valores NA.\n\n\nParece que todo va bien. Creemos un nuevo dataset únicamente formado por las predicciones y el valor real de falsedad:\n\ndatos_test_predicciones &lt;- data.frame(fake = fake_originales, fake_predict_RA = datos_testDF$fake_predict_RA)\nView(datos_test_predicciones)\n# Guardar el data frame en un archivo CSV\nwrite.csv(datos_test_predicciones, \"datos_test_predicciones.csv\", row.names = FALSE)\n\nEs momento de calcular el porcentaje de éxito en la predicción de cuentas falsas, verdaderas y en general:\n\n# Contar el número de predicciones correctas cuando la cuenta es falsa\npredicciones_correctas_falsas &lt;- sum(datos_test_predicciones$fake_predict_RA == datos_test_predicciones$fake & datos_test_predicciones$fake == 1)\n\n# Calcular el porcentaje de éxito en la predicción de cuentas falsas\ntotal_falsas &lt;- sum(datos_test_predicciones$fake == 1)\nporcentaje_exito_falsas &lt;- (predicciones_correctas_falsas / total_falsas) * 100\n\n# Contar el número de predicciones correctas cuando la cuenta es verdadera\npredicciones_correctas_verdaderas &lt;- sum(datos_test_predicciones$fake_predict_RA == datos_test_predicciones$fake & datos_test_predicciones$fake == 0)\n\n# Calcular el porcentaje de éxito en la predicción de cuentas verdaderas\ntotal_verdaderas &lt;- sum(datos_test_predicciones$fake == 0)\nporcentaje_exito_verdaderas &lt;- (predicciones_correctas_verdaderas / total_verdaderas) * 100\n\n# Contar el número de predicciones correctas generales\npredicciones_correctas &lt;- sum(datos_test_predicciones$fake_predict_RA == datos_test_predicciones$fake)\n\n# Calcular el porcentaje de éxito general\ntotal_predicciones &lt;- nrow(datos_test_predicciones)\nporcentaje_exito_general &lt;- (predicciones_correctas / total_predicciones) * 100\n\n# Imprimir el resultado\ncat(\"El porcentaje de éxito en la predicción de cuentas falsas es:\", porcentaje_exito_falsas, \"%\\n\", \"El porcentaje de éxito en la predicción de cuentas verdaderas es:\", porcentaje_exito_verdaderas, \"%\\n\", \"El porcentaje de éxito general en la predicción de cuentas es:\", porcentaje_exito_general, \"%\\n\")\n\nEl porcentaje de éxito en la predicción de cuentas falsas es: 83.33333 %\n El porcentaje de éxito en la predicción de cuentas verdaderas es: 75 %\n El porcentaje de éxito general en la predicción de cuentas es: 79.16667 %\n\n\nComo vemos, los porcentajes de éxito de predicción de la veracidad de la cuenta basados en las reglas de asociación son altos. Podrían mejorarse (especialmente el porcentaje para cuentas verdaderas), pero es un resultado satisfactorio.\n\n# Crear dataset con los porcentajes\nexito_predicciones &lt;- data.frame(tipo = c(\"Reglas de Asociación\"), 'Éxito_cuentas_falsas' = c(porcentaje_exito_falsas), 'Éxito_cuentas_verdaderas' = c(porcentaje_exito_verdaderas), 'Éxito_general' = c(porcentaje_exito_general))\nexito_predicciones\n\n                  tipo Éxito_cuentas_falsas Éxito_cuentas_verdaderas\n1 Reglas de Asociación             83.33333                       75\n  Éxito_general\n1      79.16667\n\n# Guardar el data frame en un archivo CSV\nwrite.csv(exito_predicciones, \"exito_predicciones.csv\", row.names = FALSE)\n\n\n\n3.1.4 ¿Qué patrones encontramos conociendo la veracidad o falsedad de la cuenta?\nEn cuanto al objetivo del proyecto, nos importa más el apartado anterior (averiguar las causas que provocan que una cuenta sea verdadera o falsa para poder identificar cuentas falsas según sus parámetros), pero también resulta interesante, al menos, ver las reglas en sentido contrario, es decir, sabiendo que una cuenta es verdadera o falsa, ¿qué valores toman los demás atributos?\nNo me detendré a hacer un análisis profundo de este apartado, pero encontremos y observemos las reglas resultantes, comenzando con cuentas falsas:\n\nreglas_fake_lhs &lt;- subset(reglas, subset = lhs %in% \"fake=1\")\nlength(reglas_fake_lhs)\n\n[1] 23\n\n\n\ninspect(reglas_fake_lhs)\n\n     lhs                                      rhs                          support confidence  coverage     lift count\n[1]  {fake=1}                              =&gt; {external_URL=0}           0.5000000  1.0000000 0.5000000 1.131631   288\n[2]  {profile_pic=0,                                                                                                  \n      fullname_words=[1,2),                                                                                           \n      nums.length_fullname=[0,0.2),                                                                                   \n      fake=1}                              =&gt; {description_length=[0,5)} 0.1805556  0.9904762 0.1822917 1.648885   104\n[3]  {profile_pic=0,                                                                                                  \n      fullname_words=[1,2),                                                                                           \n      name..username=0,                                                                                               \n      fake=1}                              =&gt; {description_length=[0,5)} 0.1996528  0.9829060 0.2031250 1.636283   115\n[4]  {fullname_words=[1,2),                                                                                           \n      name..username=0,                                                                                               \n      posts=[0,1),                                                                                                    \n      fake=1}                              =&gt; {description_length=[0,5)} 0.1701389  0.9800000 0.1736111 1.631445    98\n[5]  {profile_pic=0,                                                                                                  \n      nums.length_fullname=[0,0.2),                                                                                   \n      fake=1}                              =&gt; {description_length=[0,5)} 0.2465278  0.9793103 0.2517361 1.630297   142\n[6]  {profile_pic=0,                                                                                                  \n      name..username=0,                                                                                               \n      fake=1}                              =&gt; {description_length=[0,5)} 0.2673611  0.9746835 0.2743056 1.622595   154\n[7]  {fullname_words=[1,2),                                                                                           \n      posts=[0,1),                                                                                                    \n      fake=1}                              =&gt; {description_length=[0,5)} 0.1875000  0.9729730 0.1927083 1.619747   108\n[8]  {name..username=0,                                                                                               \n      posts=[0,1),                                                                                                    \n      fake=1}                              =&gt; {description_length=[0,5)} 0.2395833  0.9718310 0.2465278 1.617846   138\n[9]  {profile_pic=0,                                                                                                  \n      fullname_words=[1,2),                                                                                           \n      fake=1}                              =&gt; {description_length=[0,5)} 0.2170139  0.9689922 0.2239583 1.613120   125\n[10] {posts=[0,1),                                                                                                    \n      fake=1}                              =&gt; {description_length=[0,5)} 0.2569444  0.9673203 0.2656250 1.610337   148\n[11] {profile_pic=0,                                                                                                  \n      fake=1}                              =&gt; {description_length=[0,5)} 0.2847222  0.9647059 0.2951389 1.605984   164\n[12] {name..username=0,                                                                                               \n      follows=[0,26),                                                                                                 \n      fake=1}                              =&gt; {description_length=[0,5)} 0.1076389  0.9538462 0.1128472 1.587906    62\n[13] {nums.length_username=[0.368,0.552),                                                                             \n      fake=1}                              =&gt; {description_length=[0,5)} 0.1163194  0.9436620 0.1232639 1.570952    67\n[14] {follows=[0,26),                                                                                                 \n      fake=1}                              =&gt; {description_length=[0,5)} 0.1145833  0.9428571 0.1215278 1.569612    66\n[15] {fullname_words=[1,2),                                                                                           \n      nums.length_fullname=[0,0.2),                                                                                   \n      private=0,                                                                                                      \n      fake=1}                              =&gt; {description_length=[0,5)} 0.1649306  0.9134615 0.1805556 1.520676    95\n[16] {fullname_words=[1,2),                                                                                           \n      nums.length_fullname=[0,0.2),                                                                                   \n      name..username=0,                                                                                               \n      fake=1}                              =&gt; {description_length=[0,5)} 0.2517361  0.9119497 0.2760417 1.518159   145\n[17] {fullname_words=[1,2),                                                                                           \n      nums.length_fullname=[0,0.2),                                                                                   \n      fake=1}                              =&gt; {description_length=[0,5)} 0.2604167  0.9090909 0.2864583 1.513400   150\n[18] {nums.length_fullname=[0,0.2),                                                                                   \n      private=0,                                                                                                      \n      fake=1}                              =&gt; {description_length=[0,5)} 0.2430556  0.9090909 0.2673611 1.513400   140\n[19] {fullname_words=[1,2),                                                                                           \n      name..username=0,                                                                                               \n      private=0,                                                                                                      \n      fake=1}                              =&gt; {description_length=[0,5)} 0.1892361  0.9083333 0.2083333 1.512139   109\n[20] {fullname_words=[1,2),                                                                                           \n      private=0,                                                                                                      \n      fake=1}                              =&gt; {description_length=[0,5)} 0.2048611  0.9076923 0.2256944 1.511072   118\n[21] {name..username=0,                                                                                               \n      private=0,                                                                                                      \n      fake=1}                              =&gt; {description_length=[0,5)} 0.2708333  0.9069767 0.2986111 1.509880   156\n[22] {private=0,                                                                                                      \n      fake=1}                              =&gt; {description_length=[0,5)} 0.2864583  0.9065934 0.3159722 1.509242   165\n[23] {fullname_words=[1,2),                                                                                           \n      name..username=0,                                                                                               \n      fake=1}                              =&gt; {description_length=[0,5)} 0.2968750  0.9047619 0.3281250 1.506193   171\n\n\nDestaca la repetida aparición de valores bajos de longitud de la descripción en el consecuente, cuando se combina la falsedad de la cuenta con otros atributos en el antecedente. No extraemos mucha información nueva.\nVeamos estas reglas para cuentas verdaderas:\n\nreglas_verdaderas_lhs &lt;- subset(reglas, subset = lhs %in% \"fake=0\")\nlength(reglas_verdaderas_lhs)\n\n[1] 33\n\n\n\ninspect(reglas_verdaderas_lhs)\n\n     lhs                                  rhs                                support confidence  coverage     lift count\n[1]  {posts=[17.6,63.7),                                                                                                \n      fake=0}                          =&gt; {profile_pic=1}                  0.1059028  1.0000000 0.1059028 1.425743    61\n[2]  {posts=[17.6,63.7),                                                                                                \n      fake=0}                          =&gt; {nums.length_fullname=[0,0.2)}   0.1059028  1.0000000 0.1059028 1.095057    61\n[3]  {follows=[521,904),                                                                                                \n      fake=0}                          =&gt; {profile_pic=1}                  0.1059028  1.0000000 0.1059028 1.425743    61\n[4]  {description_length=[5,43),                                                                                        \n      fake=0}                          =&gt; {nums.length_fullname=[0,0.2)}   0.1562500  1.0000000 0.1562500 1.095057    90\n[5]  {description_length=[43,150],                                                                                      \n      fake=0}                          =&gt; {profile_pic=1}                  0.1857639  1.0000000 0.1857639 1.425743   107\n[6]  {fullname_words=[2,12],                                                                                            \n      fake=0}                          =&gt; {profile_pic=1}                  0.3177083  1.0000000 0.3177083 1.425743   183\n[7]  {description_length=[0,5),                                                                                         \n      fake=0}                          =&gt; {profile_pic=1}                  0.1579861  1.0000000 0.1579861 1.425743    91\n[8]  {private=0,                                                                                                        \n      fake=0}                          =&gt; {profile_pic=1}                  0.3020833  1.0000000 0.3020833 1.425743   174\n[9]  {private=0,                                                                                                        \n      fake=0}                          =&gt; {name..username=0}               0.3020833  1.0000000 0.3020833 1.035971   174\n[10] {external_URL=0,                                                                                                   \n      fake=0}                          =&gt; {name..username=0}               0.3836806  1.0000000 0.3836806 1.035971   221\n[11] {fullname_words=[2,12],                                                                                            \n      private=0,                                                                                                        \n      fake=0}                          =&gt; {nums.length_fullname=[0,0.2)}   0.1996528  1.0000000 0.1996528 1.095057   115\n[12] {nums.length_username=[0,0.184),                                                                                   \n      description_length=[0,5),                                                                                         \n      fake=0}                          =&gt; {nums.length_fullname=[0,0.2)}   0.1423611  1.0000000 0.1423611 1.095057    82\n[13] {fake=0}                          =&gt; {name..username=0}               0.4982639  0.9965278 0.5000000 1.032374   287\n[14] {fullname_words=[2,12],                                                                                            \n      fake=0}                          =&gt; {nums.length_fullname=[0,0.2)}   0.3159722  0.9945355 0.3177083 1.089073   182\n[15] {fake=0}                          =&gt; {profile_pic=1}                  0.4965278  0.9930556 0.5000000 1.415842   286\n[16] {nums.length_username=[0,0.184),                                                                                   \n      fake=0}                          =&gt; {nums.length_fullname=[0,0.2)}   0.4548611  0.9924242 0.4583333 1.086761   262\n[17] {private=1,                                                                                                        \n      fake=0}                          =&gt; {nums.length_fullname=[0,0.2)}   0.1961806  0.9912281 0.1979167 1.085451   113\n[18] {description_length=[0,5),                                                                                         \n      fake=0}                          =&gt; {nums.length_fullname=[0,0.2)}   0.1562500  0.9890110 0.1579861 1.083023    90\n[19] {external_URL=0,                                                                                                   \n      fake=0}                          =&gt; {nums.length_fullname=[0,0.2)}   0.3784722  0.9864253 0.3836806 1.080192   218\n[20] {fake=0}                          =&gt; {nums.length_fullname=[0,0.2)}   0.4930556  0.9861111 0.5000000 1.079848   284\n[21] {posts=[63.7,187),                                                                                                 \n      fake=0}                          =&gt; {nums.length_username=[0,0.184)} 0.1215278  0.9722222 0.1250000 1.551247    70\n[22] {fullname_words=[2,12],                                                                                            \n      private=1,                                                                                                        \n      fake=0}                          =&gt; {nums.length_username=[0,0.184)} 0.1145833  0.9705882 0.1180556 1.548639    66\n[23] {follows=[521,904),                                                                                                \n      fake=0}                          =&gt; {nums.length_username=[0,0.184)} 0.1006944  0.9508197 0.1059028 1.517097    58\n[24] {nums.length_fullname=[0,0.2),                                                                                     \n      posts=[187,7.39e+03],                                                                                             \n      fake=0}                          =&gt; {nums.length_username=[0,0.184)} 0.1336806  0.9506173 0.1406250 1.516774    77\n[25] {posts=[187,7.39e+03],                                                                                             \n      fake=0}                          =&gt; {nums.length_username=[0,0.184)} 0.1336806  0.9390244 0.1423611 1.498277    77\n[26] {fullname_words=[2,12],                                                                                            \n      description_length=[43,150],                                                                                      \n      fake=0}                          =&gt; {nums.length_username=[0,0.184)} 0.1267361  0.9358974 0.1354167 1.493288    73\n[27] {fullname_words=[2,12],                                                                                            \n      fake=0}                          =&gt; {nums.length_username=[0,0.184)} 0.2968750  0.9344262 0.3177083 1.490940   171\n[28] {nums.length_fullname=[0,0.2),                                                                                     \n      description_length=[43,150],                                                                                      \n      fake=0}                          =&gt; {nums.length_username=[0,0.184)} 0.1684028  0.9326923 0.1805556 1.488174    97\n[29] {private=1,                                                                                                        \n      fake=0}                          =&gt; {nums.length_username=[0,0.184)} 0.1840278  0.9298246 0.1979167 1.483598   106\n[30] {description_length=[43,150],                                                                                      \n      fake=0}                          =&gt; {nums.length_username=[0,0.184)} 0.1718750  0.9252336 0.1857639 1.476273    99\n[31] {nums.length_fullname=[0,0.2),                                                                                     \n      fake=0}                          =&gt; {nums.length_username=[0,0.184)} 0.4548611  0.9225352 0.4930556 1.471968   262\n[32] {description_length=[5,43),                                                                                        \n      fake=0}                          =&gt; {nums.length_username=[0,0.184)} 0.1440972  0.9222222 0.1562500 1.471468    83\n[33] {fake=0}                          =&gt; {nums.length_username=[0,0.184)} 0.4583333  0.9166667 0.5000000 1.462604   264\n\n\nDestaca la repetida aparición en los consecuentes de la presencia de foto de perfil, la ausencia de coincidencia de nombre completo y nombre de usuario y el primer intervalo de valores de los ratios de números en la longitud del username y del fullname."
  },
  {
    "objectID": "fca.html#formal-concept-analysis",
    "href": "fca.html#formal-concept-analysis",
    "title": "4  Formal Concept Analysis",
    "section": "4.1 Formal Concept Analysis",
    "text": "4.1 Formal Concept Analysis\nYa hemos extraído información importante sobre patrones encontrados en los datos, concretamente sobre qué atributos o combinaciones de ellos determinan, con mayor o menor influencia, si una cuenta es legítima o falsa. Sin embargo, el estudio de reglas de asociación no es la única forma de extraer información en cuanto a las relaciones entre variables y el descubrimiento de patrones: es momento de estudiar lo que se conoce como “Formal Concept Analysis”.\n\n4.1.1 Obtención de las reglas de FCA\nMi primer paso para trabajar con FCA va a consistir en construir una matriz, cuyas filas serán las cuentas del dataset, cuyas columnas serán los valores discretizados de las variables (2 columnas por cada variable binaria y 3 por cada variable numérica) y cuyas celdas serán valores 0/1, en función del valor discretizado que cumpla esa cuenta para cada variable. Es decir, trabajaremos con un formal context binario.\nPara comenzar con esta aproximación, antes es necesario ajustar un poco los intervalos de las variables numéricas que hemos visto en reglas de asociación, para que haya 3 categorías (serán high, med y low). En las variables binarias seguimos el mismo procedimiento que en reglas de asociación.\n\ndatosDF_FCA_intervalos &lt;- data.frame(datos)\nView(datosDF_FCA_intervalos)\n\n# Discretizar columnas numéricas\ndatosDF_FCA_intervalos$nums.length_username &lt;- discretize(datosDF_FCA_intervalos$nums.length_username, method=\"interval\", breaks = 3)\ndatosDF_FCA_intervalos$fullname_words &lt;- discretize(datosDF_FCA_intervalos$fullname_words, method=\"frequency\", breaks = 3)\ndatosDF_FCA_intervalos$nums.length_fullname &lt;- discretize(datosDF_FCA_intervalos$nums.length_fullname, method=\"interval\", breaks = 3)\ndatosDF_FCA_intervalos$description_length &lt;- discretize(datosDF_FCA_intervalos$description_length, method=\"interval\", breaks = 3)\ndatosDF_FCA_intervalos$posts &lt;- discretize(datosDF_FCA_intervalos$posts, method=\"frequency\", breaks = 3)\ndatosDF_FCA_intervalos$followers &lt;- discretize(datosDF_FCA_intervalos$followers, method=\"frequency\", breaks = 3)\ndatosDF_FCA_intervalos$follows &lt;- discretize(datosDF_FCA_intervalos$follows, method=\"frequency\", breaks = 3)\n\n# Identificar las columnas binarias y numéricas\ncolumnas_binarias &lt;- c(1, 5, 7, 8, 12) # Índices de las columnas binarias\n\n# Convertir columnas binarias a factores\ndatosDF_FCA_intervalos[, columnas_binarias] &lt;- lapply(datosDF_FCA_intervalos[, columnas_binarias], factor)\nView(datosDF_FCA_intervalos)\n\nYa tenemos los nuevos intervalos ajustados. Ahora toca imprimir los valores de esos intervalos, que usaremos posteriormente para definir los valores de cada cuenta en la matriz:\n\n# Obtener los niveles de cada variable recorriendo las columnas\nfor (col_name in names(datosDF_FCA_intervalos)) {\n  col &lt;- datosDF_FCA_intervalos[[col_name]]\n  if (is.factor(col)) {\n    cat(length(levels(col)), \" niveles en\", col_name, \":\", levels(col), \"\\n\")\n  }\n}\n\n2  niveles en profile_pic : 0 1 \n3  niveles en nums.length_username : [0,0.307) [0.307,0.613) [0.613,0.92] \n3  niveles en fullname_words : [0,1) [1,2) [2,12] \n3  niveles en nums.length_fullname : [0,0.333) [0.333,0.667) [0.667,1] \n2  niveles en name..username : 0 1 \n3  niveles en description_length : [0,50) [50,100) [100,150] \n2  niveles en external_URL : 0 1 \n2  niveles en private : 0 1 \n3  niveles en posts : [0,2) [2,43.3) [43.3,7.39e+03] \n3  niveles en followers : [0,54.3) [54.3,415) [415,1.53e+07] \n3  niveles en follows : [0,89.3) [89.3,432) [432,7.5e+03] \n2  niveles en fake : 0 1 \n\n\nAhora ya tenemos los valores posibles que puede tomar cada variable. En las variables binarias, naturalmente los valores posibles son 0 y 1; en las numéricas hay 3 intervalos por variable.\nLo siguiente sería definir los atributos (categorías de las variables):\n\ndatosDF_FCA &lt;- data.frame(datos)\nView(datosDF_FCA)\n\n# Crear un vector con los nombres de los atributos (categorías)\nattributes &lt;- c(\"profile_pic\", \"no_profile_pic\",\n                \"nums_lun_high\", \"nums_lun_med\", \"nums_lun_low\",\n                \"fn_words_high\", \"fn_words_med\", \"fn_words_low\",\n                \"nums_lfn_high\", \"nums_lfn_med\", \"nums_lfn_low\",\n                \"fn_equals_un\", \"fn_notequals_un\",\n                \"desc_length_high\", \"desc_length_med\", \"desc_length_low\",\n                \"url\", \"no_url\",\n                \"private\", \"public\",\n                \"posts_high\", \"posts_med\", \"posts_low\",\n                \"followers_high\", \"followers_med\", \"followers_low\",\n                \"follows_high\", \"follows_med\", \"follows_low\",\n                \"fake\", \"real\")\n\nUna vez tenemos definidos los atributos, es hora de crear el esqueleto de la matriz sobre la que aplicaremos FCA:\n\n# Crear un vector con los nombres de las cuentas\naccounts &lt;- rownames(datosDF_FCA)\n\n# Crear una matriz de ceros con el mismo número de filas que cuentas y el mismo número de columnas que atributos\ndatosFCA &lt;- matrix(0, nrow = nrow(datosDF_FCA), ncol = length(attributes))\n\n# Nombrar las filas y columnas\nrownames(datosFCA) &lt;- accounts\ncolnames(datosFCA) &lt;- attributes\n\n# Visualizar la matriz vacía\n#datosFCA\n\nNuestra matriz vacía está lista. Ahora debemos llenarla, y para ello recorreremos cada fila del data frame, y examinaremos los valores de las columnas de esa fila. En función del valor que tome (comparado con los intervalos ajustados de antes), asignaremos un 1 o un 0 en la columna (categoría) correspondiente de la matriz para esa fila:\n\n# Iterar sobre cada fila del dataset y actualizar los valores en la matriz de acuerdo a los intervalos de las variables\nfor (i in 1:nrow(datosDF_FCA)) {\n  # profile_pic\n  if (datosDF_FCA[i, \"profile_pic\"] == 1) {\n    datosFCA[i, \"profile_pic\"] &lt;- 1\n  } else {\n    datosFCA[i, \"no_profile_pic\"] &lt;- 1\n  }\n  \n  # nums.length_username\n  if (datosDF_FCA[i, \"nums.length_username\"] &lt; 0.307) {\n    datosFCA[i, \"nums_lun_low\"] &lt;- 1\n  } else if (datosDF_FCA[i, \"nums.length_username\"] &lt; 0.613) {\n    datosFCA[i, \"nums_lun_med\"] &lt;- 1\n  } else {\n    datosFCA[i, \"nums_lun_high\"] &lt;- 1\n  }\n  \n  # fullname_words\n  if (datosDF_FCA[i, \"fullname_words\"] &lt; 1) {\n    datosFCA[i, \"fn_words_low\"] &lt;- 1\n  } else if (datosDF_FCA[i, \"fullname_words\"] &lt; 2) {\n    datosFCA[i, \"fn_words_med\"] &lt;- 1\n  } else {\n    datosFCA[i, \"fn_words_high\"] &lt;- 1\n  }\n  \n  # nums.length_fullname\n  if (datosDF_FCA[i, \"nums.length_fullname\"] &lt; 0.333) {\n    datosFCA[i, \"nums_lfn_low\"] &lt;- 1\n  } else if (datosDF_FCA[i, \"nums.length_fullname\"] &lt; 0.667) {\n    datosFCA[i, \"nums_lfn_med\"] &lt;- 1\n  } else {\n    datosFCA[i, \"nums_lfn_high\"] &lt;- 1\n  }\n  \n  # Name.equals.username\n  if (datosDF_FCA[i, \"name..username\"] == 1) {\n    datosFCA[i, \"fn_equals_un\"] &lt;- 1\n  } else {\n    datosFCA[i, \"fn_notequals_un\"] &lt;- 1\n  }\n  \n  # description_length\n  if (datosDF_FCA[i, \"description_length\"] &lt; 50) {\n    datosFCA[i, \"desc_length_low\"] &lt;- 1\n  } else if (datosDF_FCA[i, \"description_length\"] &lt; 100) {\n    datosFCA[i, \"desc_length_med\"] &lt;- 1\n  } else {\n    datosFCA[i, \"desc_length_high\"] &lt;- 1\n  }\n  \n  # external_URL\n  if (datosDF_FCA[i, \"external_URL\"] == 1) {\n    datosFCA[i, \"url\"] &lt;- 1\n  } else {\n    datosFCA[i, \"no_url\"] &lt;- 1\n  }\n  \n  # private\n  if (datosDF_FCA[i, \"private\"] == 1) {\n    datosFCA[i, \"private\"] &lt;- 1\n  } else {\n    datosFCA[i, \"public\"] &lt;- 1\n  }\n  \n  # posts\n  if (datosDF_FCA[i, \"posts\"] &lt; 2) {\n    datosFCA[i, \"posts_low\"] &lt;- 1\n  } else if (datosDF_FCA[i, \"posts\"] &lt; 43.3) {\n    datosFCA[i, \"posts_med\"] &lt;- 1\n  } else {\n    datosFCA[i, \"posts_high\"] &lt;- 1\n  }\n  \n  # followers\n  if (datosDF_FCA[i, \"followers\"] &lt; 54.3) {\n    datosFCA[i, \"followers_low\"] &lt;- 1\n  } else if (datosDF_FCA[i, \"followers\"] &lt; 415) {\n    datosFCA[i, \"followers_med\"] &lt;- 1\n  } else {\n    datosFCA[i, \"followers_high\"] &lt;- 1\n  }\n  \n  # follows\n  if (datosDF_FCA[i, \"follows\"] &lt; 89.3) {\n    datosFCA[i, \"follows_low\"] &lt;- 1\n  } else if (datosDF_FCA[i, \"follows\"] &lt; 432) {\n    datosFCA[i, \"follows_med\"] &lt;- 1\n  } else {\n    datosFCA[i, \"follows_high\"] &lt;- 1\n  }\n  \n  # fake\n  if (datosDF_FCA[i, \"fake\"] == 1) {\n    datosFCA[i, \"fake\"] &lt;- 1\n  } else {\n    datosFCA[i, \"real\"] &lt;- 1\n  }\n}\n\n# Visualizar la matriz llena\n#datosFCA\n\nAhora viene lo interesante: convertir la matriz a un objeto formalcontext y trabajar con FCA.\n\n# Convertir la matriz a un objeto FormalContext\nfc_datos &lt;- FormalContext$new(datosFCA)\nfc_datos\n\nFormalContext with 576 objects and 31 attributes.\n    profile_pic  no_profile_pic  nums_lun_high  nums_lun_med  nums_lun_low  \n  1      X                                                          X       \n  2      X                                                          X       \n  3      X                                                          X       \n  4      X                                                          X       \n  5      X                                                          X       \n  6      X                                                          X       \n  7      X                                                          X       \n  8      X                                                          X       \n  9      X                                                          X       \n 10      X                                                          X       \nOther attributes are: fn_words_high, fn_words_med, fn_words_low, nums_lfn_high,\nnums_lfn_med, nums_lfn_low, ... \n\n\nVemos que la conversión ha sido exitosa. Además de ver la tabla, podemos hacer un plot para visualizar el resultado:\n\n# Visualizar el formal context\nfc_datos$plot()\n\n\n\n\nNaturalmente, al ser tantos datos, no podemos ver bien cada fila. Sin embargo, podemos ver patrones que concuerdan con nuestro dataset: la última columna es ‘fake’, y sabemos que la primera mitad de filas son cuentas reales, y la segunda mitad, cuentas falsas, tal y como indican las barras negras del final del plot.\nObservemos más de cerca el plot (5 primeras filas):\n\nfc_datos[1:5]$plot()\n\n\n\n\nComo vemos, las barras negras concuerdan perfectamente con nuestro dataset. Parece que hemos tenido éxito. También podemos comprobar este éxito usando el extent y el intent:\n\nS1 &lt;- Set$new(fc_datos$attributes)\nS1$assign(fake=1)\n\n# Extent (filas) de las cuentas fake\nS2 &lt;- fc_datos$extent(S1)\nS2\n\n{289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304,\n  305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319,\n  320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334,\n  335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349,\n  350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364,\n  365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379,\n  380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394,\n  395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409,\n  410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424,\n  425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439,\n  440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454,\n  455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469,\n  470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484,\n  485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499,\n  500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514,\n  515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529,\n  530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544,\n  545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559,\n  560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574,\n  575, 576}\n\n\nEl extent lista los nombres de las filas con cuentas que cumplen las condiciones establecidas en S1 (las cuentas son fake). Echando un vistazo al dataset, comprobamos que las filas de la salida (289-576) son las cuentas fake. También existe el concepto de intent, el cual devuelve el conjunto de características que comparte un conjunto de filas. Por esa lógica, si hiciéramos el intent de S2 (cuentas fake), debería devolvernos fake y no_url, dado que ninguna cuenta fake tiene URL externa:\n\n# Intent (características) de las cuentas fake\nfc_datos$intent(S2)\n\n{no_url, fake}\n\n\nUna vez más, parece que ha habido éxito.\nAhora es momento de encontrar las implicaciones:\n\n# Encontrar implicaciones\nfc_datos$find_implications()\n\n# Número de implicaciones encontradas\nfc_datos$implications$cardinality()\n\n[1] 1292\n\n\nAhora que sabemos que hay un número considerable de implicaciones, intentemos reducir la cantidad eliminando redundancias:\n\nfc_datos$implications$apply_rules(rules = c(\"composition\",\n                                      \"generalization\",\n                                      \"simplification\"),\n                            parallelize = FALSE)\n\nProcessing batch\n\n\n--&gt; Composition: from 1292 to 1292.\n\n\n--&gt; Generalization: from 1292 to 1292.\n\n\n--&gt; Simplification: from 1292 to 1292.\n\n\nParece que ninguna de las implicaciones originales era redundante. Echemos un vistazo a las primeras 20 implicaciones:\n\nfc_datos$implications[1:20]\n\nImplication set with 20 implications.\nRule 1: {real} -&gt; {nums_lfn_low}\nRule 2: {fake} -&gt; {no_url}\nRule 3: {follows_med, follows_low} -&gt; {profile_pic, no_profile_pic,\n  nums_lun_high, nums_lun_med, nums_lun_low, fn_words_high, fn_words_med,\n  fn_words_low, nums_lfn_high, nums_lfn_med, nums_lfn_low, fn_equals_un,\n  fn_notequals_un, desc_length_high, desc_length_med, desc_length_low, url,\n  no_url, private, public, posts_high, posts_med, posts_low, followers_high,\n  followers_med, followers_low, follows_high, fake, real}\nRule 4: {follows_high, follows_low} -&gt; {profile_pic, no_profile_pic,\n  nums_lun_high, nums_lun_med, nums_lun_low, fn_words_high, fn_words_med,\n  fn_words_low, nums_lfn_high, nums_lfn_med, nums_lfn_low, fn_equals_un,\n  fn_notequals_un, desc_length_high, desc_length_med, desc_length_low, url,\n  no_url, private, public, posts_high, posts_med, posts_low, followers_high,\n  followers_med, followers_low, follows_med, fake, real}\nRule 5: {follows_high, follows_med} -&gt; {profile_pic, no_profile_pic,\n  nums_lun_high, nums_lun_med, nums_lun_low, fn_words_high, fn_words_med,\n  fn_words_low, nums_lfn_high, nums_lfn_med, nums_lfn_low, fn_equals_un,\n  fn_notequals_un, desc_length_high, desc_length_med, desc_length_low, url,\n  no_url, private, public, posts_high, posts_med, posts_low, followers_high,\n  followers_med, followers_low, follows_low, fake, real}\nRule 6: {followers_low} -&gt; {no_url}\nRule 7: {followers_med, follows_low} -&gt; {nums_lfn_low, desc_length_low}\nRule 8: {followers_med, follows_high} -&gt; {fn_notequals_un}\nRule 9: {followers_high} -&gt; {nums_lfn_low}\nRule 10: {posts_low} -&gt; {no_url}\nRule 11: {posts_high} -&gt; {fn_notequals_un}\nRule 12: {public, followers_med, follows_med} -&gt; {fn_notequals_un}\nRule 13: {public, posts_med, follows_high} -&gt; {fn_notequals_un}\nRule 14: {private, posts_med, follows_low} -&gt; {nums_lfn_low}\nRule 15: {private, public} -&gt; {profile_pic, no_profile_pic, nums_lun_high,\n  nums_lun_med, nums_lun_low, fn_words_high, fn_words_med, fn_words_low,\n  nums_lfn_high, nums_lfn_med, nums_lfn_low, fn_equals_un, fn_notequals_un,\n  desc_length_high, desc_length_med, desc_length_low, url, no_url, posts_high,\n  posts_med, posts_low, followers_high, followers_med, followers_low,\n  follows_high, follows_med, follows_low, fake, real}\nRule 16: {followers_low, follows_med} -&gt; {fake}\nRule 17: {followers_low, follows_high} -&gt; {fn_words_med, desc_length_low, fake}\nRule 18: {followers_med, followers_low} -&gt; {profile_pic, no_profile_pic,\n  nums_lun_high, nums_lun_med, nums_lun_low, fn_words_high, fn_words_med,\n  fn_words_low, nums_lfn_high, nums_lfn_med, nums_lfn_low, fn_equals_un,\n  fn_notequals_un, desc_length_high, desc_length_med, desc_length_low,\n  url, private, public, posts_high, posts_med, posts_low, followers_high,\n  follows_high, follows_med, follows_low, fake, real}\nRule 19: {posts_low, follows_med} -&gt; {nums_lfn_low, desc_length_low}\nRule 20: {posts_low, follows_high} -&gt; {desc_length_low}\n\n\nAhora es el momento de extraer conocimiento con las implicaciones que nos interesan (variable fake en el consecuente de la regla).\nComencemos con las reglas cuyo consecuente es únicamente ‘fake’ (si además de fake se dejan otras variables, el resultado tiene mucho ruido y reglas extrañas):\n\n# Implicaciones con 'fake' en el consecuente\nfc_datos$implications$filter(rhs = \"fake\", not_rhs = attributes[-which(attributes == \"fake\")])\n\nImplication set with 31 implications.\nRule 1: {followers_low, follows_med} -&gt; {fake}\nRule 2: {public, posts_low, follows_high} -&gt; {fake}\nRule 3: {public, posts_low, followers_low} -&gt; {fake}\nRule 4: {fn_words_low, followers_low} -&gt; {fake}\nRule 5: {fn_words_low, private, posts_low} -&gt; {fake}\nRule 6: {fn_words_low, posts_low, follows_med} -&gt; {fake}\nRule 7: {fn_words_med, public, followers_low} -&gt; {fake}\nRule 8: {fn_words_med, public, posts_med, follows_low} -&gt; {fake}\nRule 9: {fn_words_med, posts_low, followers_low} -&gt; {fake}\nRule 10: {fn_words_med, private, posts_low, follows_low} -&gt; {fake}\nRule 11: {fn_equals_un, no_url} -&gt; {fake}\nRule 12: {fn_words_med, private, posts_low, follows_med} -&gt; {fake}\nRule 13: {fn_words_high, desc_length_low, public, followers_med, follows_high}\n  -&gt; {fake}\nRule 14: {fn_words_high, public, posts_low, follows_med} -&gt; {fake}\nRule 15: {nums_lun_low, fn_words_med, posts_med, followers_med, follows_high} -&gt;\n  {fake}\nRule 16: {nums_lun_med, desc_length_low, public, follows_med} -&gt; {fake}\nRule 17: {nums_lun_med, desc_length_low, public, followers_med} -&gt; {fake}\nRule 18: {nums_lun_med, fn_words_med, public, posts_med} -&gt; {fake}\nRule 19: {nums_lun_med, fn_words_high, desc_length_low, follows_med} -&gt; {fake}\nRule 20: {nums_lun_med, fn_words_high, desc_length_low, followers_med} -&gt; {fake}\nRule 21: {no_profile_pic, follows_low} -&gt; {fake}\nRule 22: {no_profile_pic, followers_low} -&gt; {fake}\nRule 23: {no_profile_pic, followers_med, follows_high} -&gt; {fake}\nRule 24: {no_profile_pic, fn_words_low, follows_med} -&gt; {fake}\nRule 25: {no_profile_pic, fn_words_low, desc_length_low, posts_med} -&gt; {fake}\nRule 26: {no_profile_pic, fn_words_med, follows_high} -&gt; {fake}\nRule 27: {no_profile_pic, fn_words_high, desc_length_low} -&gt; {fake}\nRule 28: {fn_words_med, private, posts_high, followers_med, follows_high} -&gt;\n  {fake}\nRule 29: {fn_words_high, desc_length_high, no_url, posts_med, followers_high,\n  follows_med} -&gt; {fake}\nRule 30: {desc_length_high, no_url, public, posts_high, followers_med,\n  follows_med} -&gt; {fake}\nRule 31: {nums_lun_med, fn_words_high, desc_length_low, posts_high,\n  followers_high} -&gt; {fake}\n\n\nBasándonos en estas reglas, podemos considerar que una cuenta es falsa cuando identificamos ciertas combinaciones de estas características:\n\nPocas o nulas publicaciones (igual que en reglas de asociación)\nDescripción vacía o muy breve (igual que en reglas de asociación)\nAusencia de foto de perfil (igual que en reglas de asociación)\nPocos o nulos seguidos (igual que en reglas de asociación)\nAusencia de URL externa (igual que en reglas de asociación)\nBajo número de seguidores\n\nComo vemos, las conclusiones generales son muy similares a las obtenidas con arules.\nAhora veamos los antecedentes para cuentas verdaderas:\n\n# Implicaciones con 'real' en el consecuente\nfc_datos$implications$filter(rhs = \"real\", not_rhs = attributes[-which(attributes == \"real\")])\n\nImplication set with 39 implications.\nRule 1: {nums_lun_low, fn_words_low, private, posts_high} -&gt; {real}\nRule 2: {no_profile_pic, nums_lun_low, fn_words_med, private, followers_med,\n  follows_med} -&gt; {real}\nRule 3: {desc_length_med, followers_med, follows_med} -&gt; {real}\nRule 4: {profile_pic, desc_length_med, posts_high} -&gt; {real}\nRule 5: {desc_length_med, public, follows_med} -&gt; {real}\nRule 6: {desc_length_high, posts_high, follows_high} -&gt; {real}\nRule 7: {desc_length_high, posts_high, followers_high} -&gt; {real}\nRule 8: {profile_pic, fn_words_low, posts_med, follows_med} -&gt; {real}\nRule 9: {profile_pic, fn_words_med, public, followers_high} -&gt; {real}\nRule 10: {fn_words_med, public, posts_high, follows_high} -&gt; {real}\nRule 11: {fn_words_med, desc_length_high} -&gt; {real}\nRule 12: {profile_pic, fn_words_high, desc_length_med} -&gt; {real}\nRule 13: {posts_high, followers_high, follows_med} -&gt; {real}\nRule 14: {nums_lun_low, public, posts_high, followers_high} -&gt; {real}\nRule 15: {private, followers_high, follows_med} -&gt; {real}\nRule 16: {nums_lun_low, private, posts_high, followers_med, follows_med} -&gt;\n  {real}\nRule 17: {desc_length_low, followers_high, follows_med} -&gt; {real}\nRule 18: {desc_length_low, public, posts_high, follows_med} -&gt; {real}\nRule 19: {nums_lun_low, desc_length_low, posts_high, followers_med, follows_med}\n  -&gt; {real}\nRule 20: {nums_lun_low, desc_length_med, followers_high} -&gt; {real}\nRule 21: {nums_lun_low, desc_length_med, private, follows_high} -&gt; {real}\nRule 22: {desc_length_high, private, follows_med} -&gt; {real}\nRule 23: {desc_length_high, private, posts_high} -&gt; {real}\nRule 24: {profile_pic, nums_lun_low, fn_words_low, public, follows_med} -&gt;\n  {real}\nRule 25: {nums_lun_low, fn_words_low, posts_high, follows_med} -&gt; {real}\nRule 26: {profile_pic, nums_lun_low, fn_words_low, desc_length_med} -&gt; {real}\nRule 27: {fn_words_med, followers_high, follows_med} -&gt; {real}\nRule 28: {nums_lun_low, fn_words_med, posts_high, followers_med, follows_med} -&gt;\n  {real}\nRule 29: {nums_lun_low, fn_words_med, public, posts_high} -&gt; {real}\nRule 30: {profile_pic, fn_words_med, public, posts_low, followers_med,\n  follows_med} -&gt; {real}\nRule 31: {profile_pic, nums_lun_low, private, posts_low, follows_high} -&gt; {real}\nRule 32: {nums_lun_low, fn_words_high, posts_high, followers_high} -&gt; {real}\nRule 33: {fn_words_high, private, posts_high, followers_med} -&gt; {real}\nRule 34: {profile_pic, fn_words_high, private, follows_low} -&gt; {real}\nRule 35: {nums_lun_low, fn_words_high, posts_med, followers_low, follows_low} -&gt;\n  {real}\nRule 36: {profile_pic, fn_words_high, posts_low, followers_med, follows_low} -&gt;\n  {real}\nRule 37: {profile_pic, fn_words_high, private, posts_low} -&gt; {real}\nRule 38: {fn_words_high, desc_length_high, private} -&gt; {real}\nRule 39: {profile_pic, nums_lun_med, fn_words_med, private, posts_med,\n  follows_high} -&gt; {real}\n\n\nBasándonos en estas reglas, podemos considerar que una cuenta es verdadera cuando identificamos ciertas combinaciones de estas características:\n\nRatio de números en la longitud del username bajo (igual que en reglas de asociación)\nCantidad considerable de palabras en el nombre completo (igual que en reglas de asociación)\nPresencia de foto de perfil (igual que en reglas de asociación)\nDescripción detallada (igual que en reglas de asociación)\nNúmero alto de publicaciones (igual que en reglas de asociación)\nNúmero considerable de seguidores (ya comentamos que este parámetro faltó en reglas de asociación, pero aquí sí aparece)\n\nLas conclusiones generales para cuentas verdaderas también son muy similares a las obtenidas con arules.\n\n\n4.1.2 Predicción\nAhora es el momento de usar las reglas obtenidas para predecir la veracidad de las cuentas en el dataset de test. Para ello, debemos organizar los datos de test de la misma forma que los de entrenamiento. Como me ha gustado el modo de trabajar con el formato de reglas de arules, primero convertiré las reglas obtenidas a arules para poder aplicarlas a los datos de test.\n\n# Convertir las implicaciones a reglas de asociación\nreglas_FCA &lt;- fc_datos$implications$to_arules()\n\n# Mostrar la primera regla obtenida\ninspect(reglas_FCA[1])\n\n    lhs       rhs            support confidence lift     count addedValue boost\n[1] {real} =&gt; {nums_lfn_low} 0.5     1          1.041591 288   0.03993056 Inf  \n    casualConfidence casualSupport centeredConfidence certainty chiSquared\n[1] 1                1.460069      0.03993056         1         23.9566   \n    collectiveStrength confirmedConfidence conviction cosine    counterexample\n[1] 25.98511           1                   Inf        0.7216617 1             \n    coverage doc        fishersExactTest gini        hyperConfidence hyperLift\n[1] 0.5      0.07986111 7.546462e-08     0.003188899 0.9999999       1.021277 \n    imbalance implicationIndex importance improvement jaccard   jMeasure\n[1] 0.4792043 -3.391165        0.03601621 1           0.5207957 NaN     \n    kappa      kulczynski lambda laplace   leastContradiction lerman   \n[1] 0.07986111 0.7603978  0      0.9965517 0.5207957          0.6915925\n    leverage   LIC maxconfidence mutualInformation oddsRatio phi      \n[1] 0.01996528 Inf 1             NaN               Inf       0.2039395\n    ralambondrainy relativeRisk rhsSupport RLD rulePowerFactor sebag stdLift\n[1] 0              1.086792     0.9600694  1   0.5             Inf   1      \n    table.n11 table.n01 table.n10 table.n00 varyingLiaison yuleQ yuleY\n[1] 288       265       0         23        0.04159132     NaN   NaN  \n\n\nMostremos el número de reglas obtenidas, que debería ser 1292:\n\n# Número de reglas obtenidas\nlength(reglas_FCA)\n\n[1] 1292\n\n\nParece que las reglas se han convertido con éxito a formato arules.\nAhora, debemos crear una matriz de datos de test con las mismas características que la matriz de datos de entrenamiento:\n\n# Crear un vector con los nombres de las cuentas\naccounts &lt;- rownames(datos_test)\n\n# Crear lista con atributos para las filas de test (sin real ni fake)\nattributes_test &lt;- attributes[-which(attributes %in% c(\"fake\", \"real\"))]\n\n# Crear una matriz de ceros con el mismo número de filas que cuentas y el mismo número de columnas que atributos\ndatosFCA_test &lt;- matrix(0, nrow = nrow(datos_test), ncol = length(attributes_test))\n\n# Nombrar las filas y columnas\nrownames(datosFCA_test) &lt;- accounts\ncolnames(datosFCA_test) &lt;- attributes_test\n\n# Visualizar la matriz vacía\n#datosFCA_test\n\nAhora, debemos llenar la matriz de datos de test con los valores correspondientes a cada cuenta, fijándonos en los intervalos generados para las cuentas de entrenamiento:\n\ndatosDF_FCA_test &lt;- data.frame(datos_test)\n\n# Iterar sobre cada fila del dataset y actualizar los valores en la matriz de acuerdo a los intervalos de las variables\nfor (i in 1:nrow(datosDF_FCA_test)) {\n  # profile_pic\n  if (datosDF_FCA_test[i, \"profile_pic\"] == 1) {\n    datosFCA_test[i, \"profile_pic\"] &lt;- 1\n  } else {\n    datosFCA_test[i, \"no_profile_pic\"] &lt;- 1\n  }\n  \n  # nums.length_username\n  if (datosDF_FCA_test[i, \"nums.length_username\"] &lt; 0.307) {\n    datosFCA_test[i, \"nums_lun_low\"] &lt;- 1\n  } else if (datosDF_FCA_test[i, \"nums.length_username\"] &lt; 0.613) {\n    datosFCA_test[i, \"nums_lun_med\"] &lt;- 1\n  } else {\n    datosFCA_test[i, \"nums_lun_high\"] &lt;- 1\n  }\n  \n  # fullname_words\n  if (datosDF_FCA_test[i, \"fullname_words\"] &lt; 1) {\n    datosFCA_test[i, \"fn_words_low\"] &lt;- 1\n  } else if (datosDF_FCA_test[i, \"fullname_words\"] &lt; 2) {\n    datosFCA_test[i, \"fn_words_med\"] &lt;- 1\n  } else {\n    datosFCA_test[i, \"fn_words_high\"] &lt;- 1\n  }\n  \n  # nums.length_fullname\n  if (datosDF_FCA_test[i, \"nums.length_fullname\"] &lt; 0.333) {\n    datosFCA_test[i, \"nums_lfn_low\"] &lt;- 1\n  } else if (datosDF_FCA_test[i, \"nums.length_fullname\"] &lt; 0.667) {\n    datosFCA_test[i, \"nums_lfn_med\"] &lt;- 1\n  } else {\n    datosFCA_test[i, \"nums_lfn_high\"] &lt;- 1\n  }\n  \n  # Name.equals.username\n  if (datosDF_FCA_test[i, \"name..username\"] == 1) {\n    datosFCA_test[i, \"fn_equals_un\"] &lt;- 1\n  } else {\n    datosFCA_test[i, \"fn_notequals_un\"] &lt;- 1\n  }\n  \n  # description_length\n  if (datosDF_FCA_test[i, \"description_length\"] &lt; 50) {\n    datosFCA_test[i, \"desc_length_low\"] &lt;- 1\n  } else if (datosDF_FCA_test[i, \"description_length\"] &lt; 100) {\n    datosFCA_test[i, \"desc_length_med\"] &lt;- 1\n  } else {\n    datosFCA_test[i, \"desc_length_high\"] &lt;- 1\n  }\n  \n  # external_URL\n  if (datosDF_FCA_test[i, \"external_URL\"] == 1) {\n    datosFCA_test[i, \"url\"] &lt;- 1\n  } else {\n    datosFCA_test[i, \"no_url\"] &lt;- 1\n  }\n  \n  # private\n  if (datosDF_FCA_test[i, \"private\"] == 1) {\n    datosFCA_test[i, \"private\"] &lt;- 1\n  } else {\n    datosFCA_test[i, \"public\"] &lt;- 1\n  }\n  \n  # posts\n  if (datosDF_FCA_test[i, \"posts\"] &lt; 2) {\n    datosFCA_test[i, \"posts_low\"] &lt;- 1\n  } else if (datosDF_FCA_test[i, \"posts\"] &lt; 43.3) {\n    datosFCA_test[i, \"posts_med\"] &lt;- 1\n  } else {\n    datosFCA_test[i, \"posts_high\"] &lt;- 1\n  }\n  \n  # followers\n  if (datosDF_FCA_test[i, \"followers\"] &lt; 54.3) {\n    datosFCA_test[i, \"followers_low\"] &lt;- 1\n  } else if (datosDF_FCA_test[i, \"followers\"] &lt; 415) {\n    datosFCA_test[i, \"followers_med\"] &lt;- 1\n  } else {\n    datosFCA_test[i, \"followers_high\"] &lt;- 1\n  }\n  \n  # follows\n  if (datosDF_FCA_test[i, \"follows\"] &lt; 89.3) {\n    datosFCA_test[i, \"follows_low\"] &lt;- 1\n  } else if (datosDF_FCA_test[i, \"follows\"] &lt; 432) {\n    datosFCA_test[i, \"follows_med\"] &lt;- 1\n  } else {\n    datosFCA_test[i, \"follows_high\"] &lt;- 1\n  }\n}\n\n# Visualizar la matriz llena\n#datosFCA_test\n\nAhora es momento de filtrar el gran número de reglas obtenidas, para quedarnos solo con las que contienen ‘fake’ o ‘real’ en el consecuente, empezando por las ‘fake’:\n\nreglas_FCA_fake &lt;- subset(reglas_FCA, subset = rhs %oin% \"fake\")\n\n# Desechar las reglas con count &lt; 15\nreglas_FCA_fake &lt;- subset(reglas_FCA_fake, subset = count &gt;= 15)\n\ninspect(reglas_FCA_fake)\n\n     lhs                   rhs       support confidence lift count addedValue boost casualConfidence casualSupport centeredConfidence certainty chiSquared collectiveStrength confirmedConfidence conviction    cosine counterexample   coverage       doc fishersExactTest       gini hyperConfidence hyperLift imbalance implicationIndex importance improvement    jaccard jMeasure      kappa kulczynski     lambda   laplace leastContradiction   lerman   leverage LIC maxconfidence mutualInformation oddsRatio       phi ralambondrainy relativeRisk rhsSupport RLD rulePowerFactor sebag stdLift table.n11 table.n01 table.n10 table.n00 varyingLiaison yuleQ yuleY\n[1]  {followers_lown      follows_med}      =&gt; {fake} 0.06423611          1    2    37        0.5   Inf                1     0.5642361                0.5         1   39.53989           613.3101                   1        Inf 0.3584302              1 0.06423611 0.5343228     2.115216e-12 0.03432282       1.0000000  1.480000 0.8715278        -4.301163  0.3205157           1 0.12847222      NaN 0.12847222  0.5642361 0.12847222 0.9743590         0.12847222 4.301163 0.03211806 Inf             1               NaN       Inf 0.2620031              0     2.147410        0.5   1      0.06423611   Inf       1        37       251         0       288              1   NaN   NaN\n[2]  {publicn      posts_lown      followers_low}    =&gt; {fake} 0.15451389          1    2    89        0.5   Inf                1     0.6545139                0.5         1  105.26489           809.1431                   1        Inf 0.5559027              1 0.15451389 0.5913758     5.015407e-31 0.09137577       1.0000000  1.618182 0.6909722        -6.670832  0.3834800           1 0.30902778      NaN 0.30902778  0.6545139 0.30902778 0.9890110         0.30902778 6.670832 0.07725694 Inf             1               NaN       Inf 0.4274945              0     2.447236        0.5   1      0.15451389   Inf       1        89       199         0       288              1   NaN   NaN\n[3]  {fn_words_lown      followers_low}    =&gt; {fake} 0.03125000          1    2    18        0.5   Inf                1     0.5312500                0.5         1   18.58065           528.2006                   1        Inf 0.2500000              1 0.03125000 0.5161290     2.900458e-06 0.01612903       0.9999971  1.285714 0.9375000        -3.000000  0.2929423           1 0.06250000      NaN 0.06250000  0.5312500 0.06250000 0.9500000         0.06250000 3.000000 0.01562500 Inf             1               NaN       Inf 0.1796053              0     2.066667        0.5   1      0.03125000   Inf       1        18       270         0       288              1   NaN   NaN\n[4]  {fn_words_medn      publicn      followers_low}    =&gt; {fake} 0.13715278          1    2    79        0.5   Inf                1     0.6371528                0.5         1   91.55734           767.2505                   1        Inf 0.5237419              1 0.13715278 0.5794769     3.294503e-27 0.07947686       1.0000000  1.612245 0.7256944        -6.284903  0.3704862           1 0.27430556      NaN 0.27430556  0.6371528 0.27430556 0.9876543         0.27430556 6.284903 0.06857639 Inf             1               NaN       Inf 0.3986900              0     2.377990        0.5   1      0.13715278   Inf       1        79       209         0       288              1   NaN   NaN\n[5]  {fn_words_medn      publicn      posts_medn      follows_low}      =&gt; {fake} 0.02777778          1    2    16        0.5   Inf                1     0.5277778                0.5         1   16.45714           515.0913                   1        Inf 0.2357023              1 0.02777778 0.5142857     1.231766e-05 0.01428571       0.9999877  1.333333 0.9444444        -2.828427  0.2887501           1 0.05555556      NaN 0.05555556  0.5277778 0.05555556 0.9444444         0.05555556 2.828427 0.01388889 Inf             1               NaN       Inf 0.1690309              0     2.058824        0.5   1      0.02777778   Inf       1        16       272         0       288              1   NaN   NaN\n[6]  {fn_words_medn      posts_lown      followers_low}    =&gt; {fake} 0.17881944          1    2   103        0.5   Inf                1     0.6788194                0.5         1  125.42918           874.2635                   1        Inf 0.5980292              1 0.17881944 0.6088795     1.372490e-36 0.10887949       1.0000000  1.661290 0.6423611        -7.176350  0.4030247           1 0.35763889      NaN 0.35763889  0.6788194 0.35763889 0.9904762         0.35763889 7.176350 0.08940972 Inf             1               NaN       Inf 0.4666465              0     2.556757        0.5   1      0.17881944   Inf       1       103       185         0       288              1   NaN   NaN\n[7]  {fn_words_medn      privaten      posts_lown      follows_low}      =&gt; {fake} 0.05034722          1    2    29        0.5   Inf                1     0.5503472                0.5         1   30.53748           582.2801                   1        Inf 0.3173239              1 0.05034722 0.5265082     8.870185e-10 0.02650823       1.0000000  1.380952 0.8993056        -3.807887  0.3103586           1 0.10069444      NaN 0.10069444  0.5503472 0.10069444 0.9677419         0.10069444 3.807887 0.02517361 Inf             1               NaN       Inf 0.2302530              0     2.111969        0.5   1      0.05034722   Inf       1        29       259         0       288              1   NaN   NaN\n[8]  {fn_equals_un,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n      no_url}           =&gt; {fake} 0.03298611          1    2    19        0.5   Inf                1     0.5329861                0.5         1   19.64811           534.1926                   1        Inf 0.2568506              1 0.03298611 0.5170557     1.403447e-06 0.01705566       0.9999986  1.357143 0.9340278        -3.082207  0.2948587           1 0.06597222      NaN 0.06597222  0.5329861 0.06597222 0.9523810         0.06597222 3.082207 0.01649306 Inf             1               NaN       Inf 0.1846925              0     2.070632        0.5   1      0.03298611   Inf       1        19       269         0       288              1   NaN   NaN\n[9]  {nums_lun_medn      desc_length_lown      publicn      follows_med}      =&gt; {fake} 0.02951389          1    2    17        0.5   Inf                1     0.5295139                0.5         1   17.51699           521.8531                   1        Inf 0.2429563              1 0.02951389 0.5152057     5.982863e-06 0.01520572       0.9999940  1.307692 0.9409722        -2.915476  0.2909129           1 0.05902778      NaN 0.05902778  0.5295139 0.05902778 0.9473684         0.05902778 2.915476 0.01475694 Inf             1               NaN       Inf 0.1743888              0     2.062731        0.5   1      0.02951389   Inf       1        17       271         0       288              1   NaN   NaN\n[10] {nums_lun_medn      desc_length_lown      publicn      followers_med}    =&gt; {fake} 0.05381944          1    2    31        0.5   Inf                1     0.5538194                0.5         1   32.76330           590.3937                   1        Inf 0.3280837              1 0.05381944 0.5284404     1.984596e-10 0.02844037       1.0000000  1.409091 0.8923611        -3.937004  0.3130037           1 0.10763889      NaN 0.10763889  0.5538194 0.10763889 0.9696970         0.10763889 3.937004 0.02690972 Inf             1               NaN       Inf 0.2384968              0     2.120623        0.5   1      0.05381944   Inf       1        31       257         0       288              1   NaN   NaN\n[11] {nums_lun_medn      fn_words_medn      publicn      posts_med}        =&gt; {fake} 0.04166667          1    2    24        0.5   Inf                1     0.5416667                0.5         1   25.04348           560.2747                   1        Inf 0.2886751              1 0.04166667 0.5217391     3.616297e-08 0.02173913       1.0000000  1.411765 0.9166667        -3.464102  0.3032306           1 0.08333333      NaN 0.08333333  0.5416667 0.08333333 0.9615385         0.08333333 3.464102 0.02083333 Inf             1               NaN       Inf 0.2085144              0     2.090909        0.5   1      0.04166667   Inf       1        24       264         0       288              1   NaN   NaN\n[12] {no_profile_picn      follows_low}      =&gt; {fake} 0.19965278          1    2   115        0.5   Inf                1     0.6996528                0.5         1  143.68764           937.6847                   1        Inf 0.6319063              1 0.19965278 0.6247289     1.406311e-41 0.12472885       1.0000000  1.666667 0.6006944        -7.582875  0.4213039           1 0.39930556      NaN 0.39930556  0.6996528 0.39930556 0.9914530         0.39930556 7.582875 0.09982639 Inf             1               NaN       Inf 0.4994574              0     2.664740        0.5   1      0.19965278   Inf       1       115       173         0       288              1   NaN   NaN\n[13] {no_profile_pic,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n      followers_low}    =&gt; {fake} 0.22222222          1    2   128        0.5   Inf                1     0.7222222                0.5         1  164.57143          1016.5052                   1        Inf 0.6666667              1 0.22222222 0.6428571     3.076242e-47 0.14285714       1.0000000  1.684211 0.5555556        -8.000000  0.4430330           1 0.44444444      NaN 0.44444444  0.7222222 0.44444444 0.9923077         0.44444444 8.000000 0.11111111 Inf             1               NaN       Inf 0.5345225              0     2.800000        0.5   1      0.22222222   Inf       1       128       160         0       288              1   NaN   NaN\n[14] {no_profile_pic,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \n      fn_words_medn      follows_high}     =&gt; {fake} 0.03298611          1    2    19        0.5   Inf                1     0.5329861                0.5         1   19.64811           534.1926                   1        Inf 0.2568506              1 0.03298611 0.5170557     1.403447e-06 0.01705566       0.9999986  1.357143 0.9340278        -3.082207  0.2948587           1 0.06597222      NaN 0.06597222  0.5329861 0.06597222 0.9523810         0.06597222 3.082207 0.01649306 Inf             1               NaN       Inf 0.1846925              0     2.070632        0.5   1      0.03298611   Inf       1        19       269         0       288              1   NaN   NaN\n[15] {no_profile_picn      fn_words_highn      desc_length_low}  =&gt; {fake} 0.05208333          1    2    30        0.5   Inf                1     0.5520833                0.5         1   31.64835           586.3752                   1        Inf 0.3227486              1 0.05208333 0.5274725     4.199960e-10 0.02747253       1.0000000  1.428571 0.8958333        -3.872983  0.3116925           1 0.10416667      NaN 0.10416667  0.5520833 0.10416667 0.9687500         0.10416667 3.872983 0.02604167 Inf             1               NaN       Inf 0.2344036              0     2.116279        0.5   1      0.05208333   Inf       1        30       258         0       288              1   NaN   NaN\n\n\nComo vemos, hay 15 reglas. Ahora, hagamos lo mismo con las reglas que contienen ‘real’ en el consecuente:\n\nreglas_FCA_real &lt;- subset(reglas_FCA, subset = rhs %oin% \"real\")\n\n# Desechar las reglas con count &lt; 15\nreglas_FCA_real &lt;- subset(reglas_FCA_real, subset = count &gt;= 15)\n\ninspect(reglas_FCA_real)\n\n     lhs                    rhs       support confidence lift count addedValue boost casualConfidence casualSupport centeredConfidence certainty chiSquared collectiveStrength confirmedConfidence conviction    cosine counterexample   coverage       doc fishersExactTest       gini hyperConfidence hyperLift imbalance implicationIndex importance improvement    jaccard jMeasure      kappa kulczynski     lambda   laplace leastContradiction   lerman   leverage LIC maxconfidence mutualInformation oddsRatio       phi ralambondrainy relativeRisk rhsSupport RLD rulePowerFactor sebag stdLift table.n11 table.n01 table.n10 table.n00 varyingLiaison yuleQ yuleY\n[1]  {profile_picn      desc_length_medn      posts_high}        =&gt; {real} 0.07118056          1    2    41        0.5   Inf                1     0.5711806                0.5         1   44.14206           627.8511                   1        Inf 0.3773077              1 0.07118056 0.5383178     9.819951e-14 0.03831776       1.0000000  1.464286 0.8576389        -4.527693  0.3253034           1 0.14236111      NaN 0.14236111  0.5711806 0.14236111 0.9767442         0.14236111 4.527693 0.03559028 Inf             1               NaN       Inf 0.2768312              0     2.165992        0.5   1      0.07118056   Inf       1        41       247         0       288              1   NaN   NaN\n[2]  {desc_length_medn      public,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n      follows_med}       =&gt; {real} 0.03125000          1    2    18        0.5   Inf                1     0.5312500                0.5         1   18.58065           528.2006                   1        Inf 0.2500000              1 0.03125000 0.5161290     2.900458e-06 0.01612903       0.9999971  1.285714 0.9375000        -3.000000  0.2929423           1 0.06250000      NaN 0.06250000  0.5312500 0.06250000 0.9500000         0.06250000 3.000000 0.01562500 Inf             1               NaN       Inf 0.1796053              0     2.066667        0.5   1      0.03125000   Inf       1        18       270         0       288              1   NaN   NaN\n[3]  {desc_length_highn      posts_highn      follows_high}      =&gt; {real} 0.02951389          1    2    17        0.5   Inf                1     0.5295139                0.5         1   17.51699           521.8531                   1        Inf 0.2429563              1 0.02951389 0.5152057     5.982863e-06 0.01520572       0.9999940  1.307692 0.9409722        -2.915476  0.2909129           1 0.05902778      NaN 0.05902778  0.5295139 0.05902778 0.9473684         0.05902778 2.915476 0.01475694 Inf             1               NaN       Inf 0.1743888              0     2.062731        0.5   1      0.02951389   Inf       1        17       271         0       288              1   NaN   NaN\n[4]  {desc_length_highn      posts_highn      followers_high}    =&gt; {real} 0.03993056          1    2    23        0.5   Inf                1     0.5399306                0.5         1   23.95660           555.4687                   1        Inf 0.2825971              1 0.03993056 0.5207957     7.546462e-08 0.02079566       0.9999999  1.352941 0.9201389        -3.391165  0.3016826           1 0.07986111      NaN 0.07986111  0.5399306 0.07986111 0.9600000         0.07986111 3.391165 0.01996528 Inf             1               NaN       Inf 0.2039395              0     2.086792        0.5   1      0.03993056   Inf       1        23       265         0       288              1   NaN   NaN\n[5]  {profile_picn      fn_words_med,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n      publicn      followers_high}    =&gt; {real} 0.05208333          1    2    30        0.5   Inf                1     0.5520833                0.5         1   31.64835           586.3752                   1        Inf 0.3227486              1 0.05208333 0.5274725     4.199960e-10 0.02747253       1.0000000  1.428571 0.8958333        -3.872983  0.3116925           1 0.10416667      NaN 0.10416667  0.5520833 0.10416667 0.9687500         0.10416667 3.872983 0.02604167 Inf             1               NaN       Inf 0.2344036              0     2.116279        0.5   1      0.05208333   Inf       1        30       258         0       288              1   NaN   NaN\n[6]  {fn_words_medn      public,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n      posts_highn      follows_high}      =&gt; {real} 0.03993056          1    2    23        0.5   Inf                1     0.5399306                0.5         1   23.95660           555.4687                   1        Inf 0.2825971              1 0.03993056 0.5207957     7.546462e-08 0.02079566       0.9999999  1.352941 0.9201389        -3.391165  0.3016826           1 0.07986111      NaN 0.07986111  0.5399306 0.07986111 0.9600000         0.07986111 3.391165 0.01996528 Inf             1               NaN       Inf 0.2039395              0     2.086792        0.5   1      0.03993056   Inf       1        23       265         0       288              1   NaN   NaN\n[7]  {profile_picn      fn_words_highn      desc_length_med}   =&gt; {real} 0.07118056          1    2    41        0.5   Inf                1     0.5711806                0.5         1   44.14206           627.8511                   1        Inf 0.3773077              1 0.07118056 0.5383178     9.819951e-14 0.03831776       1.0000000  1.464286 0.8576389        -4.527693  0.3253034           1 0.14236111      NaN 0.14236111  0.5711806 0.14236111 0.9767442         0.14236111 4.527693 0.03559028 Inf             1               NaN       Inf 0.2768312              0     2.165992        0.5   1      0.07118056   Inf       1        41       247         0       288              1   NaN   NaN\n[8]  {posts_highn      followers_highn      follows_med}       =&gt; {real} 0.05729167          1    2    33        0.5   Inf                1     0.5572917                0.5         1   35.00552           598.2335                   1        Inf 0.3385016              1 0.05729167 0.5303867     4.404026e-11 0.03038674       1.0000000  1.434783 0.8854167        -4.062019  0.3155674           1 0.11458333      NaN 0.11458333  0.5572917 0.11458333 0.9714286         0.11458333 4.062019 0.02864583 Inf             1               NaN       Inf 0.2465228              0     2.129412        0.5   1      0.05729167   Inf       1        33       255         0       288              1   NaN   NaN\n[9]  {nums_lun_lown      publicn      posts_highn      followers_high}    =&gt; {real} 0.18402778          1    2   106        0.5   Inf                1     0.6840278                0.5         1  129.90638           889.3893                   1        Inf 0.6066758              1 0.18402778 0.6127660     8.130661e-38 0.11276596       1.0000000  1.656250 0.6319444        -7.280110  0.4074509           1 0.36805556      NaN 0.36805556  0.6840278 0.36805556 0.9907407         0.36805556 7.280110 0.09201389 Inf             1               NaN       Inf 0.4749020              0     2.582418        0.5   1      0.18402778   Inf       1       106       182         0       288              1   NaN   NaN\n[10] {desc_length_lown      followers_highn      follows_med}       =&gt; {real} 0.03819444          1    2    22        0.5   Inf                1     0.5381944                0.5         1   22.87365           550.4844                   1        Inf 0.2763854              1 0.03819444 0.5198556     1.571707e-07 0.01985560       0.9999998  1.375000 0.9236111        -3.316625  0.3000801           1 0.07638889      NaN 0.07638889  0.5381944 0.07638889 0.9583333         0.07638889 3.316625 0.01909722 Inf             1               NaN       Inf 0.1992767              0     2.082707        0.5   1      0.03819444   Inf       1        22       266         0       288              1   NaN   NaN\n[11] {nums_lun_lown      desc_length_medn      followers_high}    =&gt; {real} 0.07118056          1    2    41        0.5   Inf                1     0.5711806                0.5         1   44.14206           627.8511                   1        Inf 0.3773077              1 0.07118056 0.5383178     9.819951e-14 0.03831776       1.0000000  1.464286 0.8576389        -4.527693  0.3253034           1 0.14236111      NaN 0.14236111  0.5711806 0.14236111 0.9767442         0.14236111 4.527693 0.03559028 Inf             1               NaN       Inf 0.2768312              0     2.165992        0.5   1      0.07118056   Inf       1        41       247         0       288              1   NaN   NaN\n[12] {nums_lun_lown      fn_words_medn      public,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n      posts_high}        =&gt; {real} 0.05034722          1    2    29        0.5   Inf                1     0.5503472                0.5         1   30.53748           582.2801                   1        Inf 0.3173239              1 0.05034722 0.5265082     8.870185e-10 0.02650823       1.0000000  1.380952 0.8993056        -3.807887  0.3103586           1 0.10069444      NaN 0.10069444  0.5503472 0.10069444 0.9677419         0.10069444 3.807887 0.02517361 Inf             1               NaN       Inf 0.2302530              0     2.111969        0.5   1      0.05034722   Inf       1        29       259         0       288              1   NaN   NaN\n[13] {nums_lun_low,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n      fn_words_highn      posts_highn      followers_high}    =&gt; {real} 0.16840278          1    2    97        0.5   Inf                1     0.6684028                0.5         1  116.64301           845.3149                   1        Inf 0.5803495              1 0.16840278 0.6012526     3.581861e-34 0.10125261       1.0000000  1.644068 0.6631944        -6.964194  0.3944347           1 0.33680556      NaN 0.33680556  0.6684028 0.33680556 0.9898990         0.33680556 6.964194 0.08420139 Inf             1               NaN       Inf 0.4500058              0     2.507853        0.5   1      0.16840278   Inf       1        97       191         0       288              1   NaN   NaN\n\n\nVemos que hay 13 reglas. Ahora, unamos las reglas de cuentas falsas y verdaderas en una variable:\n\n# Guardar la unión de las reglas fake y real\nreglas_FCA_real_fake &lt;- c(reglas_FCA_fake, reglas_FCA_real)\ninspect(reglas_FCA_real_fake)\n\n     lhs                    rhs       support confidence lift count addedValue boost casualConfidence casualSupport centeredConfidence certainty chiSquared collectiveStrength confirmedConfidence conviction    cosine counterexample   coverage       doc fishersExactTest       gini hyperConfidence hyperLift imbalance implicationIndex importance improvement    jaccard jMeasure      kappa kulczynski     lambda   laplace leastContradiction   lerman   leverage LIC maxconfidence mutualInformation oddsRatio       phi ralambondrainy relativeRisk rhsSupport RLD rulePowerFactor sebag stdLift table.n11 table.n01 table.n10 table.n00 varyingLiaison yuleQ yuleY\n[1]  {followers_lown      follows_med}       =&gt; {fake} 0.06423611          1    2    37        0.5   Inf                1     0.5642361                0.5         1   39.53989           613.3101                   1        Inf 0.3584302              1 0.06423611 0.5343228     2.115216e-12 0.03432282       1.0000000  1.480000 0.8715278        -4.301163  0.3205157           1 0.12847222      NaN 0.12847222  0.5642361 0.12847222 0.9743590         0.12847222 4.301163 0.03211806 Inf             1               NaN       Inf 0.2620031              0     2.147410        0.5   1      0.06423611   Inf       1        37       251         0       288              1   NaN   NaN\n[2]  {publicn      posts_low,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \n      followers_low}     =&gt; {fake} 0.15451389          1    2    89        0.5   Inf                1     0.6545139                0.5         1  105.26489           809.1431                   1        Inf 0.5559027              1 0.15451389 0.5913758     5.015407e-31 0.09137577       1.0000000  1.618182 0.6909722        -6.670832  0.3834800           1 0.30902778      NaN 0.30902778  0.6545139 0.30902778 0.9890110         0.30902778 6.670832 0.07725694 Inf             1               NaN       Inf 0.4274945              0     2.447236        0.5   1      0.15451389   Inf       1        89       199         0       288              1   NaN   NaN\n[3]  {fn_words_lown      followers_low}     =&gt; {fake} 0.03125000          1    2    18        0.5   Inf                1     0.5312500                0.5         1   18.58065           528.2006                   1        Inf 0.2500000              1 0.03125000 0.5161290     2.900458e-06 0.01612903       0.9999971  1.285714 0.9375000        -3.000000  0.2929423           1 0.06250000      NaN 0.06250000  0.5312500 0.06250000 0.9500000         0.06250000 3.000000 0.01562500 Inf             1               NaN       Inf 0.1796053              0     2.066667        0.5   1      0.03125000   Inf       1        18       270         0       288              1   NaN   NaN\n[4]  {fn_words_med,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n      publicn      followers_low}     =&gt; {fake} 0.13715278          1    2    79        0.5   Inf                1     0.6371528                0.5         1   91.55734           767.2505                   1        Inf 0.5237419              1 0.13715278 0.5794769     3.294503e-27 0.07947686       1.0000000  1.612245 0.7256944        -6.284903  0.3704862           1 0.27430556      NaN 0.27430556  0.6371528 0.27430556 0.9876543         0.27430556 6.284903 0.06857639 Inf             1               NaN       Inf 0.3986900              0     2.377990        0.5   1      0.13715278   Inf       1        79       209         0       288              1   NaN   NaN\n[5]  {fn_words_medn      publicn      posts_medn      follows_low}       =&gt; {fake} 0.02777778          1    2    16        0.5   Inf                1     0.5277778                0.5         1   16.45714           515.0913                   1        Inf 0.2357023              1 0.02777778 0.5142857     1.231766e-05 0.01428571       0.9999877  1.333333 0.9444444        -2.828427  0.2887501           1 0.05555556      NaN 0.05555556  0.5277778 0.05555556 0.9444444         0.05555556 2.828427 0.01388889 Inf             1               NaN       Inf 0.1690309              0     2.058824        0.5   1      0.02777778   Inf       1        16       272         0       288              1   NaN   NaN\n[6]  {fn_words_medn      posts_lown      followers_low}     =&gt; {fake} 0.17881944          1    2   103        0.5   Inf                1     0.6788194                0.5         1  125.42918           874.2635                   1        Inf 0.5980292              1 0.17881944 0.6088795     1.372490e-36 0.10887949       1.0000000  1.661290 0.6423611        -7.176350  0.4030247           1 0.35763889      NaN 0.35763889  0.6788194 0.35763889 0.9904762         0.35763889 7.176350 0.08940972 Inf             1               NaN       Inf 0.4666465              0     2.556757        0.5   1      0.17881944   Inf       1       103       185         0       288              1   NaN   NaN\n[7]  {fn_words_medn      privaten      posts_lown      follows_low}       =&gt; {fake} 0.05034722          1    2    29        0.5   Inf                1     0.5503472                0.5         1   30.53748           582.2801                   1        Inf 0.3173239              1 0.05034722 0.5265082     8.870185e-10 0.02650823       1.0000000  1.380952 0.8993056        -3.807887  0.3103586           1 0.10069444      NaN 0.10069444  0.5503472 0.10069444 0.9677419         0.10069444 3.807887 0.02517361 Inf             1               NaN       Inf 0.2302530              0     2.111969        0.5   1      0.05034722   Inf       1        29       259         0       288              1   NaN   NaN\n[8]  {fn_equals_unn      no_url}            =&gt; {fake} 0.03298611          1    2    19        0.5   Inf                1     0.5329861                0.5         1   19.64811           534.1926                   1        Inf 0.2568506              1 0.03298611 0.5170557     1.403447e-06 0.01705566       0.9999986  1.357143 0.9340278        -3.082207  0.2948587           1 0.06597222      NaN 0.06597222  0.5329861 0.06597222 0.9523810         0.06597222 3.082207 0.01649306 Inf             1               NaN       Inf 0.1846925              0     2.070632        0.5   1      0.03298611   Inf       1        19       269         0       288              1   NaN   NaN\n[9]  {nums_lun_medn      desc_length_lown      publicn      follows_med}       =&gt; {fake} 0.02951389          1    2    17        0.5   Inf                1     0.5295139                0.5         1   17.51699           521.8531                   1        Inf 0.2429563              1 0.02951389 0.5152057     5.982863e-06 0.01520572       0.9999940  1.307692 0.9409722        -2.915476  0.2909129           1 0.05902778      NaN 0.05902778  0.5295139 0.05902778 0.9473684         0.05902778 2.915476 0.01475694 Inf             1               NaN       Inf 0.1743888              0     2.062731        0.5   1      0.02951389   Inf       1        17       271         0       288              1   NaN   NaN\n[10] {nums_lun_medn      desc_length_lown      publicn      followers_med}     =&gt; {fake} 0.05381944          1    2    31        0.5   Inf                1     0.5538194                0.5         1   32.76330           590.3937                   1        Inf 0.3280837              1 0.05381944 0.5284404     1.984596e-10 0.02844037       1.0000000  1.409091 0.8923611        -3.937004  0.3130037           1 0.10763889      NaN 0.10763889  0.5538194 0.10763889 0.9696970         0.10763889 3.937004 0.02690972 Inf             1               NaN       Inf 0.2384968              0     2.120623        0.5   1      0.05381944   Inf       1        31       257         0       288              1   NaN   NaN\n[11] {nums_lun_medn      fn_words_medn      publicn      posts_med}         =&gt; {fake} 0.04166667          1    2    24        0.5   Inf                1     0.5416667                0.5         1   25.04348           560.2747                   1        Inf 0.2886751              1 0.04166667 0.5217391     3.616297e-08 0.02173913       1.0000000  1.411765 0.9166667        -3.464102  0.3032306           1 0.08333333      NaN 0.08333333  0.5416667 0.08333333 0.9615385         0.08333333 3.464102 0.02083333 Inf             1               NaN       Inf 0.2085144              0     2.090909        0.5   1      0.04166667   Inf       1        24       264         0       288              1   NaN   NaN\n[12] {no_profile_picn      follows_low}       =&gt; {fake} 0.19965278          1    2   115        0.5   Inf                1     0.6996528                0.5         1  143.68764           937.6847                   1        Inf 0.6319063              1 0.19965278 0.6247289     1.406311e-41 0.12472885       1.0000000  1.666667 0.6006944        -7.582875  0.4213039           1 0.39930556      NaN 0.39930556  0.6996528 0.39930556 0.9914530         0.39930556 7.582875 0.09982639 Inf             1               NaN       Inf 0.4994574              0     2.664740        0.5   1      0.19965278   Inf       1       115       173         0       288              1   NaN   NaN\n[13] {no_profile_pic,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n      followers_low}     =&gt; {fake} 0.22222222          1    2   128        0.5   Inf                1     0.7222222                0.5         1  164.57143          1016.5052                   1        Inf 0.6666667              1 0.22222222 0.6428571     3.076242e-47 0.14285714       1.0000000  1.684211 0.5555556        -8.000000  0.4430330           1 0.44444444      NaN 0.44444444  0.7222222 0.44444444 0.9923077         0.44444444 8.000000 0.11111111 Inf             1               NaN       Inf 0.5345225              0     2.800000        0.5   1      0.22222222   Inf       1       128       160         0       288              1   NaN   NaN\n[14] {no_profile_picn      fn_words_medn      follows_high}      =&gt; {fake} 0.03298611          1    2    19        0.5   Inf                1     0.5329861                0.5         1   19.64811           534.1926                   1        Inf 0.2568506              1 0.03298611 0.5170557     1.403447e-06 0.01705566       0.9999986  1.357143 0.9340278        -3.082207  0.2948587           1 0.06597222      NaN 0.06597222  0.5329861 0.06597222 0.9523810         0.06597222 3.082207 0.01649306 Inf             1               NaN       Inf 0.1846925              0     2.070632        0.5   1      0.03298611   Inf       1        19       269         0       288              1   NaN   NaN\n[15] {no_profile_picn      fn_words_highn      desc_length_low}   =&gt; {fake} 0.05208333          1    2    30        0.5   Inf                1     0.5520833                0.5         1   31.64835           586.3752                   1        Inf 0.3227486              1 0.05208333 0.5274725     4.199960e-10 0.02747253       1.0000000  1.428571 0.8958333        -3.872983  0.3116925           1 0.10416667      NaN 0.10416667  0.5520833 0.10416667 0.9687500         0.10416667 3.872983 0.02604167 Inf             1               NaN       Inf 0.2344036              0     2.116279        0.5   1      0.05208333   Inf       1        30       258         0       288              1   NaN   NaN\n[16] {profile_picn      desc_length_medn      posts_high}        =&gt; {real} 0.07118056          1    2    41        0.5   Inf                1     0.5711806                0.5         1   44.14206           627.8511                   1        Inf 0.3773077              1 0.07118056 0.5383178     9.819951e-14 0.03831776       1.0000000  1.464286 0.8576389        -4.527693  0.3253034           1 0.14236111      NaN 0.14236111  0.5711806 0.14236111 0.9767442         0.14236111 4.527693 0.03559028 Inf             1               NaN       Inf 0.2768312              0     2.165992        0.5   1      0.07118056   Inf       1        41       247         0       288              1   NaN   NaN\n[17] {desc_length_medn      publicn      follows_med}       =&gt; {real} 0.03125000          1    2    18        0.5   Inf                1     0.5312500                0.5         1   18.58065           528.2006                   1        Inf 0.2500000              1 0.03125000 0.5161290     2.900458e-06 0.01612903       0.9999971  1.285714 0.9375000        -3.000000  0.2929423           1 0.06250000      NaN 0.06250000  0.5312500 0.06250000 0.9500000         0.06250000 3.000000 0.01562500 Inf             1               NaN       Inf 0.1796053              0     2.066667        0.5   1      0.03125000   Inf       1        18       270         0       288              1   NaN   NaN\n[18] {desc_length_highn      posts_highn      follows_high}      =&gt; {real} 0.02951389          1    2    17        0.5   Inf                1     0.5295139                0.5         1   17.51699           521.8531                   1        Inf 0.2429563              1 0.02951389 0.5152057     5.982863e-06 0.01520572       0.9999940  1.307692 0.9409722        -2.915476  0.2909129           1 0.05902778      NaN 0.05902778  0.5295139 0.05902778 0.9473684         0.05902778 2.915476 0.01475694 Inf             1               NaN       Inf 0.1743888              0     2.062731        0.5   1      0.02951389   Inf       1        17       271         0       288              1   NaN   NaN\n[19] {desc_length_highn      posts_highn      followers_high}    =&gt; {real} 0.03993056          1    2    23        0.5   Inf                1     0.5399306                0.5         1   23.95660           555.4687                   1        Inf 0.2825971              1 0.03993056 0.5207957     7.546462e-08 0.02079566       0.9999999  1.352941 0.9201389        -3.391165  0.3016826           1 0.07986111      NaN 0.07986111  0.5399306 0.07986111 0.9600000         0.07986111 3.391165 0.01996528 Inf             1               NaN       Inf 0.2039395              0     2.086792        0.5   1      0.03993056   Inf       1        23       265         0       288              1   NaN   NaN\n[20] {profile_picn      fn_words_medn      public,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \n      followers_high}    =&gt; {real} 0.05208333          1    2    30        0.5   Inf                1     0.5520833                0.5         1   31.64835           586.3752                   1        Inf 0.3227486              1 0.05208333 0.5274725     4.199960e-10 0.02747253       1.0000000  1.428571 0.8958333        -3.872983  0.3116925           1 0.10416667      NaN 0.10416667  0.5520833 0.10416667 0.9687500         0.10416667 3.872983 0.02604167 Inf             1               NaN       Inf 0.2344036              0     2.116279        0.5   1      0.05208333   Inf       1        30       258         0       288              1   NaN   NaN\n[21] {fn_words_medn      publicn      posts_highn      follows_high}      =&gt; {real} 0.03993056          1    2    23        0.5   Inf                1     0.5399306                0.5         1   23.95660           555.4687                   1        Inf 0.2825971              1 0.03993056 0.5207957     7.546462e-08 0.02079566       0.9999999  1.352941 0.9201389        -3.391165  0.3016826           1 0.07986111      NaN 0.07986111  0.5399306 0.07986111 0.9600000         0.07986111 3.391165 0.01996528 Inf             1               NaN       Inf 0.2039395              0     2.086792        0.5   1      0.03993056   Inf       1        23       265         0       288              1   NaN   NaN\n[22] {profile_picn      fn_words_highn      desc_length_med}   =&gt; {real} 0.07118056          1    2    41        0.5   Inf                1     0.5711806                0.5         1   44.14206           627.8511                   1        Inf 0.3773077              1 0.07118056 0.5383178     9.819951e-14 0.03831776       1.0000000  1.464286 0.8576389        -4.527693  0.3253034           1 0.14236111      NaN 0.14236111  0.5711806 0.14236111 0.9767442         0.14236111 4.527693 0.03559028 Inf             1               NaN       Inf 0.2768312              0     2.165992        0.5   1      0.07118056   Inf       1        41       247         0       288              1   NaN   NaN\n[23] {posts_high,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \n      followers_highn      follows_med}       =&gt; {real} 0.05729167          1    2    33        0.5   Inf                1     0.5572917                0.5         1   35.00552           598.2335                   1        Inf 0.3385016              1 0.05729167 0.5303867     4.404026e-11 0.03038674       1.0000000  1.434783 0.8854167        -4.062019  0.3155674           1 0.11458333      NaN 0.11458333  0.5572917 0.11458333 0.9714286         0.11458333 4.062019 0.02864583 Inf             1               NaN       Inf 0.2465228              0     2.129412        0.5   1      0.05729167   Inf       1        33       255         0       288              1   NaN   NaN\n[24] {nums_lun_lown      publicn      posts_highn      followers_high}    =&gt; {real} 0.18402778          1    2   106        0.5   Inf                1     0.6840278                0.5         1  129.90638           889.3893                   1        Inf 0.6066758              1 0.18402778 0.6127660     8.130661e-38 0.11276596       1.0000000  1.656250 0.6319444        -7.280110  0.4074509           1 0.36805556      NaN 0.36805556  0.6840278 0.36805556 0.9907407         0.36805556 7.280110 0.09201389 Inf             1               NaN       Inf 0.4749020              0     2.582418        0.5   1      0.18402778   Inf       1       106       182         0       288              1   NaN   NaN\n[25] {desc_length_lown      followers_high,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \n      follows_med}       =&gt; {real} 0.03819444          1    2    22        0.5   Inf                1     0.5381944                0.5         1   22.87365           550.4844                   1        Inf 0.2763854              1 0.03819444 0.5198556     1.571707e-07 0.01985560       0.9999998  1.375000 0.9236111        -3.316625  0.3000801           1 0.07638889      NaN 0.07638889  0.5381944 0.07638889 0.9583333         0.07638889 3.316625 0.01909722 Inf             1               NaN       Inf 0.1992767              0     2.082707        0.5   1      0.03819444   Inf       1        22       266         0       288              1   NaN   NaN\n[26] {nums_lun_lown      desc_length_medn      followers_high}    =&gt; {real} 0.07118056          1    2    41        0.5   Inf                1     0.5711806                0.5         1   44.14206           627.8511                   1        Inf 0.3773077              1 0.07118056 0.5383178     9.819951e-14 0.03831776       1.0000000  1.464286 0.8576389        -4.527693  0.3253034           1 0.14236111      NaN 0.14236111  0.5711806 0.14236111 0.9767442         0.14236111 4.527693 0.03559028 Inf             1               NaN       Inf 0.2768312              0     2.165992        0.5   1      0.07118056   Inf       1        41       247         0       288              1   NaN   NaN\n[27] {nums_lun_lown      fn_words_medn      publicn      posts_high}        =&gt; {real} 0.05034722          1    2    29        0.5   Inf                1     0.5503472                0.5         1   30.53748           582.2801                   1        Inf 0.3173239              1 0.05034722 0.5265082     8.870185e-10 0.02650823       1.0000000  1.380952 0.8993056        -3.807887  0.3103586           1 0.10069444      NaN 0.10069444  0.5503472 0.10069444 0.9677419         0.10069444 3.807887 0.02517361 Inf             1               NaN       Inf 0.2302530              0     2.111969        0.5   1      0.05034722   Inf       1        29       259         0       288              1   NaN   NaN\n[28] {nums_lun_lown      fn_words_highn      posts_highn      followers_high}    =&gt; {real} 0.16840278          1    2    97        0.5   Inf                1     0.6684028                0.5         1  116.64301           845.3149                   1        Inf 0.5803495              1 0.16840278 0.6012526     3.581861e-34 0.10125261       1.0000000  1.644068 0.6631944        -6.964194  0.3944347           1 0.33680556      NaN 0.33680556  0.6684028 0.33680556 0.9898990         0.33680556 6.964194 0.08420139 Inf             1               NaN       Inf 0.4500058              0     2.507853        0.5   1      0.16840278   Inf       1        97       191         0       288              1   NaN   NaN\n\n\nHay 28 reglas en total.\nAhora, vamos a predecir la veracidad de las cuentas en el dataset de test usando las reglas obtenidas:\n\n# Leer el archivo CSV\ndatos_test_predicciones &lt;- read.csv(\"datos_test_predicciones.csv\")\n\n# Crear la fila vacía 'fake_predict_FCA' en 'datos_test_predicciones'\ndatos_test_predicciones$fake_predict_FCA &lt;- NA\n\n# Bucle para recorrer cada fila de la matriz datosFCA_test\nfor (i in 1:nrow(datosFCA_test)) {\n  # Obtener los nombres de las columnas de la fila presente (donde el valor es 1)\n  columnas_presentes &lt;- colnames(datosFCA_test)[datosFCA_test[i, ] == 1]\n  \n  # Bucle para recorrer cada regla en reglas_FCA_real_fake\n  for (j in 1:length(reglas_FCA_real_fake)) {\n    # Obtener el lhs de la regla j\n    lhs_rule &lt;- as(lhs(reglas_FCA_real_fake[j]), \"list\")[[1]]\n    \n    # Comprobar si el lhs de la regla es subconjunto de columnas_presentes\n    if (all(lhs_rule %in% columnas_presentes)) {\n      # Obtener el rhs (consecuente) de la regla\n      rhs_rule &lt;- labels(rhs(reglas_FCA_real_fake[j]))[1]\n      \n      # Asignar el valor numérico según el contenido del consecuente\n      if (grepl(\"real\", rhs_rule)) {\n        datos_test_predicciones$fake_predict_FCA[i] &lt;- 0\n      } else if (grepl(\"fake\", rhs_rule)) {\n        datos_test_predicciones$fake_predict_FCA[i] &lt;- 1\n      }\n      \n      break  # Salir del bucle una vez encontrada una regla aplicable\n    }\n    \n    # Si no se ha encontrado ninguna regla aplicable, se sigue esta heurística:\n    else {\n      # Si la cuenta tiene URL externa, es verdadera\n      if (\"url\" %in% columnas_presentes) {\n        datos_test_predicciones$fake_predict_FCA[i] &lt;- 0\n      }\n      # Si la cuenta no tiene foto de perfil, es falsa\n      else if (\"no_profile_pic\" %in% columnas_presentes) {\n        datos_test_predicciones$fake_predict_FCA[i] &lt;- 1\n      }\n      # Si la cuenta tiene menos de 250 seguido, es falsa\n      else if (\"follows_low\" %in% columnas_presentes) {\n        datos_test_predicciones$fake_predict_FCA[i] &lt;- 1\n      }\n      # En otro caso, consideramos que es verdadera\n      else {\n        datos_test_predicciones$fake_predict_FCA[i] &lt;- 0\n      }\n    }\n  }\n}\n\n#View(datos_test_predicciones)\nhead(datos_test_predicciones)\n\n  fake fake_predict_RA fake_predict_FCA\n1    0               1                1\n2    0               0                0\n3    0               0                0\n4    0               0                0\n5    0               1                0\n6    0               1                0\n\n\nVemos que hay valores 0/1 en la columna fake_predict_FCA.\nAhora, contemos el número de valores NA en la columna fake_predict_FCA:\n\n# Contar el número de valores NA en la columna fake_predict_FCA\ncat(\"La columna fake_predict_FCA tiene \", sum(is.na(datos_test_predicciones$fake_predict_FCA)), \" valores NA\")\n\nLa columna fake_predict_FCA tiene  0  valores NA\n\n\nParece que la predicción ha sido satisfactoria. Ahora, calculemos el porcentaje de éxito en la predicción de cuentas falsas, de cuentas verdaderas y en general:\n\n# Calcular el porcentaje de éxito en la predicción de cuentas falsas\npredicciones_correctas_falsas_FCA &lt;- sum(datos_test_predicciones$fake_predict_FCA == datos_test_predicciones$fake & datos_test_predicciones$fake == 1)\ntotal_falsas_FCA &lt;- sum(datos_test_predicciones$fake == 1)\nporcentaje_exito_falsas_FCA &lt;- (predicciones_correctas_falsas_FCA / total_falsas_FCA) * 100\n\n# Calcular el porcentaje de éxito en la predicción de cuentas verdaderas\npredicciones_correctas_verdaderas_FCA &lt;- sum(datos_test_predicciones$fake_predict_FCA == datos_test_predicciones$fake & datos_test_predicciones$fake == 0)\ntotal_verdaderas_FCA &lt;- sum(datos_test_predicciones$fake == 0)\nporcentaje_exito_verdaderas_FCA &lt;- (predicciones_correctas_verdaderas_FCA / total_verdaderas_FCA) * 100\n\n# Calcular el porcentaje de éxito general\npredicciones_correctas_FCA &lt;- sum(datos_test_predicciones$fake_predict_FCA == datos_test_predicciones$fake)\ntotal_predicciones_FCA &lt;- nrow(datos_test_predicciones)\nporcentaje_exito_general_FCA &lt;- (predicciones_correctas_FCA / total_predicciones_FCA) * 100\n\n# Guardar el data frame en un archivo CSV\nwrite.csv(datos_test_predicciones, \"datos_test_predicciones.csv\", row.names = FALSE)\n\n\n# Imprimir el resultado\ncat(\"El porcentaje de éxito en la predicción de cuentas falsas es:\", porcentaje_exito_falsas_FCA, \"%\\n\", \"El porcentaje de éxito en la predicción de cuentas verdaderas es:\", porcentaje_exito_verdaderas_FCA, \"%\\n\", \"El porcentaje de éxito general en la predicción de cuentas es:\", porcentaje_exito_general_FCA, \"%\\n\")\n\nEl porcentaje de éxito en la predicción de cuentas falsas es: 80 %\n El porcentaje de éxito en la predicción de cuentas verdaderas es: 95 %\n El porcentaje de éxito general en la predicción de cuentas es: 87.5 %\n\n\nComo vemos, los porcentajes de éxito son muy altos, lo que indica que el modelo de regresión ha sido efectivo en la predicción de cuentas falsas y verdaderas.\nAñadamos los porcentajes de éxito a la tabla de porcentajes:\n\n# Leer el archivo CSV\nexito_predicciones &lt;- read.csv(\"exito_predicciones.csv\")\n\n# Añadir los porcentajes de éxito a la tabla de porcentajes\nexito_predicciones &lt;- rbind(exito_predicciones, c(\"FCA\", porcentaje_exito_falsas_FCA, porcentaje_exito_verdaderas_FCA, porcentaje_exito_general_FCA))\nexito_predicciones\n\n                  tipo Éxito_cuentas_falsas Éxito_cuentas_verdaderas\n1 Reglas de Asociación     83.3333333333333                       75\n2                  FCA                   80                       95\n     Éxito_general\n1 79.1666666666667\n2             87.5\n\n# Guardar el data frame en un archivo CSV\nwrite.csv(exito_predicciones, \"exito_predicciones.csv\", row.names = FALSE)\n\nLas reglas de asociación han rendido algo mejor que FCA en la predicción de cuentas falsas, pero el formal concept analysis ha sido bastante mejor en la predicción de cuentas verdaderas (20 puntos por encima) y en general. FCA ha sido 8 puntos más efectivo que reglas de asociación en la predicción general."
  },
  {
    "objectID": "regresion.html#regresión",
    "href": "regresion.html#regresión",
    "title": "5  Regresión",
    "section": "5.1 Regresión",
    "text": "5.1 Regresión\nUna vez visto el Formal Concept Analysis, ahora es el turno de la regresión: analizar la relación entre una variable dependiente (variable objetivo o respuesta) y ciertas variables independientes (variable predictora o explicativa).\n\n5.1.1 Modelos multi-variable\nEn nuestro caso, la variable dependiente será ‘fake’, y trataremos de encontrar el mejor modelo para explicar la variable dependiente.\nPrimero, realicemos un plot de los datos para intentar encontrar relaciones visuales:\n\nplot(datos)\n\n\n\n\nSe observa que, lógicamente, es imposible extraer información visual de la relación entre ‘fake’ y las demás variables binarias, ya que aparecen 4 puntos en las esquinas (las 4 posibles combinaciones). Sin embargo, las variables numéricas son más reveladoras. Por ejemplo, se nota que en posts y followers hay más cuentas fake cuando estas variables tienen valores bajos.\nPodemos osbervar un mejor gráfico quitando las variables binarias:\n\npairs.panels(datos[c(\"profile_pic\",\"nums/length_username\",\"fullname_words\",\"nums/length_fullname\",\"description_length\",\"posts\",\"followers\",\"follows\",\"fake\")])\n\n\n\n\nQueda claro que es necesario un análisis numérico. Comencemos por construir un modelo lineal con todas las variables posibles como independientes:\n\nmodelo1 &lt;- lm(fake ~ .,\n              data = datos)\n\nsummary(modelo1)\n\n\nCall:\nlm(formula = fake ~ ., data = datos)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.73096 -0.23729 -0.06653  0.24048  1.01052 \n\nCoefficients:\n                         Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)             7.931e-01  3.798e-02  20.880  &lt; 2e-16 ***\nprofile_pic            -4.380e-01  3.345e-02 -13.094  &lt; 2e-16 ***\n`nums/length_username`  8.062e-01  7.522e-02  10.718  &lt; 2e-16 ***\nfullname_words         -3.354e-02  1.333e-02  -2.516 0.012142 *  \n`nums/length_fullname` -2.775e-02  1.212e-01  -0.229 0.818988    \n`name==username`        2.241e-01  7.641e-02   2.933 0.003498 ** \ndescription_length     -1.510e-03  4.342e-04  -3.478 0.000544 ***\nexternal_URL           -1.542e-01  4.800e-02  -3.213 0.001390 ** \nprivate                -9.459e-03  2.843e-02  -0.333 0.739459    \nposts                  -9.094e-05  3.570e-05  -2.547 0.011120 *  \nfollowers              -9.960e-09  1.539e-08  -0.647 0.517743    \nfollows                -1.850e-05  1.499e-05  -1.235 0.217530    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.3166 on 564 degrees of freedom\nMultiple R-squared:  0.6074,    Adjusted R-squared:  0.5998 \nF-statistic: 79.33 on 11 and 564 DF,  p-value: &lt; 2.2e-16\n\n\nAnalicemos la salida:\n\nUn intercept de 0,7931 indica que ese es el valor medio de la variable dependiente (‘fake’) cuando las variables independientes son cero.\nprofile_pic: es muy significativa, con el valor estimado negativo, es decir, tener una foto de perfil disminuye la probabilidad de ser una cuenta falsa.\nnums/length_username: es muy significativa, con un valor estimado de positivo, es decir, un mayor ratio de caracteres numéricos en el nombre de usuario aumenta la probabilidad de ser una cuenta falsa.\nfullname_words: es algo significativa, con un valor estimado negativo, es decir, un mayor número de palabras en el nombre completo disminuye ligeramente la probabilidad de ser una cuenta falsa.\nnums/length_fullname: no es significativa. Su variación no influye notablemente en la probabilidad de que la cuenta sea falsa.\nname==username: es significativa, con un valor estimado positivo, es decir, si el nombre completo y el nombre de usuario son iguales, aumenta la probabilidad de ser una cuenta falsa.\ndescription_length: es muy significativa, con un valor estimado negativo, es decir, una mayor longitud de la descripción disminuye la probabilidad de ser una cuenta falsa.\nexternal_URL: es significativa, con un valor estimado negativo, es decir, tener una URL externa disminuye la probabilidad de ser una cuenta falsa.\nprivate: no es significativa. Su variación no influye notablemente en la probabilidad de que la cuenta sea falsa.\nposts: es significativa, con un valor estimado negativo, es decir, un mayor número de publicaciones disminuye la probabilidad de ser una cuenta falsa.\nfollowers: no es significativa. Su variación no influye notablemente en la probabilidad de que la cuenta sea falsa.\nfollows: no es significativa. Su variación no influye notablemente en la probabilidad de que la cuenta sea falsa.\n\nEsta información nos será útil para la construcción de modelos útiles, que tengan en cuenta las variables más significativas.\nProbemos a construir un modelo lineal que deseche las variables no significativas:\n\nmodelo2 &lt;- lm(fake ~ profile_pic + `nums/length_username` + fullname_words + `name==username` + description_length + external_URL + posts, \n              data = datos)\n\nsummary(modelo2)\n\n\nCall:\nlm(formula = fake ~ profile_pic + `nums/length_username` + fullname_words + \n    `name==username` + description_length + external_URL + posts, \n    data = datos)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.74953 -0.24241 -0.05836  0.23371  1.02834 \n\nCoefficients:\n                         Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)             7.843e-01  3.577e-02  21.926  &lt; 2e-16 ***\nprofile_pic            -4.444e-01  3.267e-02 -13.603  &lt; 2e-16 ***\n`nums/length_username`  8.084e-01  6.861e-02  11.783  &lt; 2e-16 ***\nfullname_words         -3.353e-02  1.326e-02  -2.528 0.011728 *  \n`name==username`        2.157e-01  7.265e-02   2.969 0.003116 ** \ndescription_length     -1.553e-03  4.283e-04  -3.625 0.000315 ***\nexternal_URL           -1.528e-01  4.747e-02  -3.219 0.001359 ** \nposts                  -9.923e-05  3.369e-05  -2.945 0.003360 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.316 on 568 degrees of freedom\nMultiple R-squared:  0.606, Adjusted R-squared:  0.6012 \nF-statistic: 124.8 on 7 and 568 DF,  p-value: &lt; 2.2e-16\n\n\nExpliquemos los resultados generales y la mejora de este modelo con respecto al anterior:\n\nResidual Standard Error: el error estándar residual mide la dispersión de los residuos. Una disminución en el segundo modelo (0,316) indica una ligera mejora en la precisión de las predicciones del modelo simplificado.\nMultiple R-squared: el R-cuadrado múltiple mide la proporción de la variabilidad en la variable dependiente que es explicada por las variables independientes. Ambos modelos tienen valores similares, con una ligera disminución en el segundo modelo (0,606), lo que indica que se ha perdido ligeramente esa capacidad explicativa de las variables independientes.\nAdjusted R-squared: el R-cuadrado ajustado tiene en cuenta el número de variables en el modelo y penaliza la inclusión de variables irrelevantes. El aumento en el R-cuadrado ajustado en el segundo modelo (0,6012) sugiere que el modelo simplificado es más eficiente al explicar la variabilidad de la variable dependiente con menos variables.\nF-Statistic: la F-estadística mide la relación entre la variabilidad explicada y la variabilidad no explicada del modelo. Un valor más alto en el segundo modelo (124,8) indica que el modelo simplificado tiene un ajuste global mejor y es más significativo.\np-value: el valor p indica la significancia general del modelo. En ambos casos, el valor p es extremadamente pequeño, lo que significa que ambos modelos son altamente significativos.\n\nProbemos un modelo en el que las variables con mayor nivel de significancia estén al cuadrado:\n\nmodelo3 &lt;- lm(fake ~ I(profile_pic^2) + I(`nums/length_username`^2) + fullname_words + `name==username` + I(description_length^2) + external_URL + posts, \n              data = datos)\n\nsummary(modelo3)\n\n\nCall:\nlm(formula = fake ~ I(profile_pic^2) + I(`nums/length_username`^2) + \n    fullname_words + `name==username` + I(description_length^2) + \n    external_URL + posts, data = datos)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.88443 -0.28449 -0.03917  0.14543  0.91792 \n\nCoefficients:\n                              Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                  9.009e-01  3.437e-02  26.214  &lt; 2e-16 ***\nI(profile_pic^2)            -5.140e-01  3.351e-02 -15.337  &lt; 2e-16 ***\nI(`nums/length_username`^2)  9.430e-01  1.062e-01   8.877  &lt; 2e-16 ***\nfullname_words              -4.636e-02  1.400e-02  -3.312 0.000986 ***\n`name==username`             2.364e-01  7.722e-02   3.061 0.002311 ** \nI(description_length^2)     -5.231e-06  3.480e-06  -1.503 0.133362    \nexternal_URL                -2.288e-01  4.973e-02  -4.601  5.2e-06 ***\nposts                       -1.181e-04  3.572e-05  -3.305 0.001010 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.3358 on 568 degrees of freedom\nMultiple R-squared:  0.5553,    Adjusted R-squared:  0.5498 \nF-statistic: 101.3 on 7 and 568 DF,  p-value: &lt; 2.2e-16\n\n\nEste modelo es peor que los anteriores en todos los parámetros generales.\nProbemos con un modelo lineal cuyas variables independientes son únicamente las 3 que en el primer modelo tenían más significancia:\n\nmodelo4 &lt;- lm(fake ~ profile_pic + `nums/length_username` + description_length, \n              data = datos)\n\nsummary(modelo4)\n\n\nCall:\nlm(formula = fake ~ profile_pic + `nums/length_username` + description_length, \n    data = datos)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.71251 -0.24060 -0.09454  0.25287  1.08855 \n\nCoefficients:\n                         Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)             0.7462368  0.0317943  23.471  &lt; 2e-16 ***\nprofile_pic            -0.4758359  0.0331911 -14.336  &lt; 2e-16 ***\n`nums/length_username`  0.8667753  0.0697244  12.431  &lt; 2e-16 ***\ndescription_length     -0.0024090  0.0003966  -6.075 2.27e-09 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.3255 on 572 degrees of freedom\nMultiple R-squared:  0.5791,    Adjusted R-squared:  0.5769 \nF-statistic: 262.4 on 3 and 572 DF,  p-value: &lt; 2.2e-16\n\n\nEste modelo es el mejor por ahora. Ninguno le supera en los parámetros finales, excepto los 2 primeros modelos en el error.\nProbemos a elevar al cuadrado las dos variables que, en el primer modelo, eran las más significativas:\n\nmodelo5 &lt;- lm(fake ~ I(profile_pic^2) + I(`nums/length_username`^2) + description_length, \n              data = datos)\n\nsummary(modelo5)\n\n\nCall:\nlm(formula = fake ~ I(profile_pic^2) + I(`nums/length_username`^2) + \n    description_length, data = datos)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-0.8257 -0.2721 -0.0701  0.1341  1.0911 \n\nCoefficients:\n                              Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                  0.8658746  0.0298412  29.016  &lt; 2e-16 ***\nI(profile_pic^2)            -0.5291041  0.0343600 -15.399  &lt; 2e-16 ***\nI(`nums/length_username`^2)  0.9668541  0.1083190   8.926  &lt; 2e-16 ***\ndescription_length          -0.0028714  0.0004144  -6.929 1.14e-11 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.3437 on 572 degrees of freedom\nMultiple R-squared:  0.5308,    Adjusted R-squared:  0.5283 \nF-statistic: 215.7 on 3 and 572 DF,  p-value: &lt; 2.2e-16\n\n\nLos resultados empeoran.\nParece difícil mejorar el modelo4. Probemos con un modelo que tenga en cuenta únicamente 2 variables más significativas del modelo1, pero sin cuadrados:\n\nmodelo6 &lt;- lm(fake ~ profile_pic + `nums/length_username`, \n              data = datos)\n\nsummary(modelo6)\n\n\nCall:\nlm(formula = fake ~ profile_pic + `nums/length_username`, data = datos)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-0.7170 -0.1838 -0.1838  0.2732  0.8162 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)             0.71697    0.03240   22.13   &lt;2e-16 ***\nprofile_pic            -0.53320    0.03280  -16.26   &lt;2e-16 ***\n`nums/length_username`  0.95834    0.07018   13.66   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.3355 on 573 degrees of freedom\nMultiple R-squared:  0.552, Adjusted R-squared:  0.5504 \nF-statistic:   353 on 2 and 573 DF,  p-value: &lt; 2.2e-16\n\n\nEl F estadístico mejora, pero los demás parámetros empeoran ligeramente. Aun así, veo este modelo como el mejor, ya que el empeoramiento es muy leve, y el aumento del F estadístico es grande.\n\n\n5.1.2 Modelos con una variable independiente (con visualización)\nComo acabamos de ver, eliminar variables independientes ha generado buenos resultados. Aunque dudo que encontremos un modelo mejor, aprovechemos para realizar modelos con una única variable independiente (probando con todas ellas y visualizando la predicción).\n\n5.1.2.1 Modelo con profile_pic como variable independiente:\n\nmodelo7 &lt;- lm(fake ~ profile_pic, \n              data = datos)\n\nsummary(modelo7)\n\n\nCall:\nlm(formula = fake ~ profile_pic, data = datos)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.98837 -0.29208 -0.14023  0.01163  0.70792 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  0.98837    0.02943   33.58   &lt;2e-16 ***\nprofile_pic -0.69629    0.03514  -19.81   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.386 on 574 degrees of freedom\nMultiple R-squared:  0.4062,    Adjusted R-squared:  0.4051 \nF-statistic: 392.6 on 1 and 574 DF,  p-value: &lt; 2.2e-16\n\n\nEl F estadístico mejora, pero los demás parámetros empeoran considerablemente.\nVeamos la predicción:\n\ndatos %&gt;%\n  ggplot(aes(x=profile_pic, y=fake)) + \n  geom_point() + \n  geom_line(aes(x=profile_pic, y=predict(modelo7),\n                color=\"red\"))\n\n\n\n\nSin foto de perfil, hay más probabilidad de que la cuenta sea falsa.\n\n\n5.1.2.2 Modelo con nums/length_username como variable independiente:\n\nmodelo8 &lt;- lm(fake ~ `nums/length_username`, \n              data = datos)\n\nsummary(modelo8)\n\n\nCall:\nlm(formula = fake ~ `nums/length_username`, data = datos)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-0.8931 -0.2749 -0.2749  0.3130  0.7251 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)             0.27494    0.02127   12.93   &lt;2e-16 ***\n`nums/length_username`  1.37368    0.07894   17.40   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.4052 on 574 degrees of freedom\nMultiple R-squared:  0.3454,    Adjusted R-squared:  0.3442 \nF-statistic: 302.8 on 1 and 574 DF,  p-value: &lt; 2.2e-16\n\n\nVeamos la predicción:\n\ndatos %&gt;%\n  ggplot(aes(x=`nums/length_username`, y=fake)) + \n  geom_point() + \n  geom_line(aes(x=`nums/length_username`, y=predict(modelo8),\n                color=\"red\"))\n\n\n\n\nCon valores bajos de este ratio es menos probable que la cuenta sea falsa.\n\n\n5.1.2.3 Modelo con fullname_words como variable independiente:\n\nmodelo9 &lt;- lm(fake ~ fullname_words, \n              data = datos)\n\nsummary(modelo9)\n\n\nCall:\nlm(formula = fake ~ fullname_words, data = datos)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-0.7074 -0.4233  0.2926  0.4346  1.0029 \n\nCoefficients:\n               Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)     0.70741    0.03408  20.760  &lt; 2e-16 ***\nfullname_words -0.14205    0.01894  -7.501 2.42e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.478 on 574 degrees of freedom\nMultiple R-squared:  0.08928,   Adjusted R-squared:  0.08769 \nF-statistic: 56.27 on 1 and 574 DF,  p-value: 2.418e-13\n\n\nVeamos la predicción:\n\ndatos %&gt;%\n  ggplot(aes(x=fullname_words, y=fake)) + \n  geom_point() + \n  geom_line(aes(x=fullname_words, y=predict(modelo9),\n                color=\"red\"))\n\n\n\n\nCon mayores bajos de fullname_words es más probable que la cuenta sea falsa.\n\n\n5.1.2.4 Modelo con name==username como variable independiente:\n\nmodelo10 &lt;- lm(fake ~ `name==username`, \n              data = datos)\n\nsummary(modelo10)\n\n\nCall:\nlm(formula = fake ~ `name==username`, data = datos)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-0.9500 -0.4838 -0.2169  0.5162  0.5162 \n\nCoefficients:\n                 Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)       0.48381    0.02093   23.12  &lt; 2e-16 ***\n`name==username`  0.46619    0.11232    4.15 3.82e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.4935 on 574 degrees of freedom\nMultiple R-squared:  0.02914,   Adjusted R-squared:  0.02745 \nF-statistic: 17.23 on 1 and 574 DF,  p-value: 3.821e-05\n\n\nVeamos la predicción:\n\ndatos %&gt;%\n  ggplot(aes(x=`name==username`, y=fake)) + \n  geom_point() + \n  geom_line(aes(x=`name==username`, y=predict(modelo10),\n                color=\"red\"))\n\n\n\n\nCuando la coincidencia de fullname y username está presente, es más probable que la cuenta sea falsa.\n\n\n5.1.2.5 Modelo con description_length como variable independiente:\n\nmodelo11 &lt;- lm(fake ~ description_length, \n              data = datos)\n\nsummary(modelo11)\n\n\nCall:\nlm(formula = fake ~ description_length, data = datos)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-0.6384 -0.4732  0.3204  0.3616  1.2730 \n\nCoefficients:\n                     Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)         0.6383765  0.0216050   29.55   &lt;2e-16 ***\ndescription_length -0.0061166  0.0004917  -12.44   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.4445 on 574 degrees of freedom\nMultiple R-squared:  0.2124,    Adjusted R-squared:  0.211 \nF-statistic: 154.8 on 1 and 574 DF,  p-value: &lt; 2.2e-16\n\n\nVeamos la predicción:\n\ndatos %&gt;%\n  ggplot(aes(x=description_length, y=fake)) + \n  geom_point() + \n  geom_line(aes(x=description_length, y=predict(modelo11),\n                color=\"red\"))\n\n\n\n\nPara valores altos de description_length es menos probable que la cuenta sea falsa.\n\n\n5.1.2.6 Modelo con external_URL como variable independiente:\n\nmodelo12 &lt;- lm(fake ~ external_URL, \n              data = datos)\n\nsummary(modelo12)\n\n\nCall:\nlm(formula = fake ~ external_URL, data = datos)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-0.5658 -0.5658  0.2171  0.4342  0.4342 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)   0.56582    0.02069  27.350   &lt;2e-16 ***\nexternal_URL -0.56582    0.06066  -9.328   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.4667 on 574 degrees of freedom\nMultiple R-squared:  0.1316,    Adjusted R-squared:  0.1301 \nF-statistic: 87.01 on 1 and 574 DF,  p-value: &lt; 2.2e-16\n\n\nVeamos la predicción:\n\ndatos %&gt;%\n  ggplot(aes(x=external_URL, y=fake)) + \n  geom_point() + \n  geom_line(aes(x=external_URL, y=predict(modelo12),\n                color=\"red\"))\n\n\n\n\nPara valores 1 de URL externa, es menos probable que la cuenta sea falsa.\n\n\n5.1.2.7 Modelo con private como variable independiente:\n\nmodelo13 &lt;- lm(fake ~ private, \n              data = datos)\n\nsummary(modelo13)\n\n\nCall:\nlm(formula = fake ~ private, data = datos)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.51124 -0.51124  0.00347  0.48876  0.51818 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  0.51124    0.02654  19.266   &lt;2e-16 ***\nprivate     -0.02942    0.04294  -0.685    0.494    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.5007 on 574 degrees of freedom\nMultiple R-squared:  0.0008172, Adjusted R-squared:  -0.0009236 \nF-statistic: 0.4694 on 1 and 574 DF,  p-value: 0.4935\n\n\nVeamos la predicción:\n\ndatos %&gt;%\n  ggplot(aes(x=private, y=fake)) + \n  geom_point() + \n  geom_line(aes(x=private, y=predict(modelo13),\n                color=\"red\"))\n\n\n\n\nComo ya señalamos en apartados anteriores, la variable private no determina notablemente si es más o menos probable que la cuenta sea falsa. Este gráfico lo respalda.\n\n\n5.1.2.8 Modelo con posts como variable independiente:\n\nmodelo14 &lt;- lm(fake ~ posts, \n              data = datos)\n\nsummary(modelo14)\n\n\nCall:\nlm(formula = fake ~ posts, data = datos)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-0.5328 -0.5102  0.4672  0.4672  1.7238 \n\nCoefficients:\n              Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  5.328e-01  2.094e-02  25.441  &lt; 2e-16 ***\nposts       -3.054e-04  5.037e-05  -6.064 2.41e-09 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.4856 on 574 degrees of freedom\nMultiple R-squared:  0.0602,    Adjusted R-squared:  0.05856 \nF-statistic: 36.77 on 1 and 574 DF,  p-value: 2.414e-09\n\n\nVeamos la predicción:\n\ndatos %&gt;%\n  ggplot(aes(x=posts, y=fake)) + \n  geom_point() + \n  geom_line(aes(x=posts, y=predict(modelo14),\n                color=\"red\"))\n\n\n\n\nPara valores altos de publicaciones es menos probable que la cuenta sea falsa.\n\n\n5.1.2.9 Modelo con followers como variable independiente:\n\nmodelo15 &lt;- lm(fake ~ followers, \n              data = datos)\n\nsummary(modelo15)\n\n\nCall:\nlm(formula = fake ~ followers, data = datos)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-0.5044 -0.5044  0.3907  0.4956  0.4958 \n\nCoefficients:\n              Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  5.044e-01  2.087e-02  24.170   &lt;2e-16 ***\nfollowers   -5.151e-08  2.285e-08  -2.255   0.0245 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.4987 on 574 degrees of freedom\nMultiple R-squared:  0.008778,  Adjusted R-squared:  0.007051 \nF-statistic: 5.083 on 1 and 574 DF,  p-value: 0.02454\n\n\nVeamos la predicción:\n\ndatos %&gt;%\n  ggplot(aes(x=followers, y=fake)) + \n  geom_point() + \n  geom_line(aes(x=followers, y=predict(modelo15),\n                color=\"red\"))\n\n\n\n\nPara valores altos de seguidores es menos probable que la cuenta sea falsa.\n\n\n5.1.2.10 Modelo con follows como variable independiente:\n\nmodelo16 &lt;- lm(fake ~ follows, \n              data = datos)\n\nsummary(modelo16)\n\n\nCall:\nlm(formula = fake ~ follows, data = datos)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-0.5623 -0.5094  0.3973  0.4462  1.3290 \n\nCoefficients:\n              Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  5.623e-01  2.325e-02  24.185  &lt; 2e-16 ***\nfollows     -1.226e-04  2.217e-05  -5.528 4.92e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.488 on 574 degrees of freedom\nMultiple R-squared:  0.05055,   Adjusted R-squared:  0.0489 \nF-statistic: 30.56 on 1 and 574 DF,  p-value: 4.916e-08\n\n\nVeamos la predicción:\n\ndatos %&gt;%\n  ggplot(aes(x=follows, y=fake)) + \n  geom_point() + \n  geom_line(aes(x=follows, y=predict(modelo16),\n                color=\"red\"))\n\n\n\n\nPara valores altos de cuentas seguidas es menos probable que la cuenta sea falsa.\nComo hemos podido observar, las conclusiones extraídas coinciden con las conclusiones que hemos estado viendo en los apartados anteriores. La regresión es un mecanismo muy útil y sencillo para predecir valores esperados, tal y como hemos comprobado.\n\n\n\n5.1.3 Predicción\nAhora, es momento de predecir la variable dependiente del dataset de test con el mejor modelo encontrado: modelo6.\n\n# Realizar la predicción con el modelo de regresión modelo6\nprediccion &lt;- predict(modelo6, newdata = datos_test)\nprediccion\n\n        1         2         3         4         5         6         7         8 \n0.5000205 0.1837676 0.1837676 0.1837676 0.6629387 0.1837676 0.1837676 0.1837676 \n        9        10        11        12        13        14        15        16 \n0.1837676 0.1837676 0.1837676 0.3179355 0.3179355 0.5000205 0.2796018 0.1837676 \n       17        18        19        20        21        22        23        24 \n0.5000205 0.1837676 0.1837676 0.1837676 0.6629387 0.1837676 0.3946029 0.1837676 \n       25        26        27        28        29        30        31        32 \n0.2796018 0.1837676 0.1837676 0.1837676 0.5000205 0.1837676 0.1837676 0.1837676 \n       33        34        35        36        37        38        39        40 \n0.1837676 0.1837676 0.3466857 0.1837676 0.1837676 0.1837676 0.1837676 0.3275189 \n       41        42        43        44        45        46        47        48 \n0.1837676 0.1837676 0.1837676 0.2700184 0.1837676 0.1837676 0.1837676 0.1837676 \n       49        50        51        52        53        54        55        56 \n0.1837676 0.1837676 0.1837676 0.1837676 0.1837676 0.1837676 0.1837676 0.1837676 \n       57        58        59        60        61        62        63        64 \n0.1837676 0.3179355 0.1837676 0.1837676 0.7648889 0.4425200 0.7840558 0.7169718 \n       65        66        67        68        69        70        71        72 \n0.7169718 0.9278071 0.7169718 0.7169718 0.7169718 1.3111440 0.7169718 1.1194755 \n       73        74        75        76        77        78        79        80 \n1.3111440 1.1961429 1.0140579 0.9757242 1.1961429 1.4357285 0.5958547 0.9565574 \n       81        82        83        84        85        86        87        88 \n1.0271087 1.0366922 0.1837676 0.4425200 0.7169718 0.7204392 0.1837676 0.8511397 \n       89        90        91        92        93        94        95        96 \n0.1837676 1.1961429 0.1837676 0.6629387 1.0332247 0.1837676 0.1837676 0.5479376 \n       97        98        99       100       101       102       103       104 \n0.7169718 0.5000205 1.0140579 0.8258569 0.5479376 0.5479376 0.7169718 0.6437718 \n      105       106       107       108       109       110       111       112 \n0.7300226 1.0271087 1.0366922 1.1386424 0.7169718 0.6054381 0.1837676 0.1837676 \n      113       114       115       116       117       118       119       120 \n1.1386424 0.6150216 0.5000205 0.4616868 0.5671045 0.1837676 0.8798900 0.6054381 \n\n\nComo vemos, hay valores que se salen de los límites de [0,1], con lo que ajustaremos los valores predichos: &lt; 0.5 será 0 y &gt;= 0.5 será 1.\n\n# Ajustar los valores predichos: &lt; 0.5 será 0 y &gt;= 0.5 será 1\nfake_predict_regresion &lt;- ifelse(prediccion &lt; 0.5, 0, 1)\n\n# Leer el archivo CSV\ndatos_test_predicciones &lt;- read.csv(\"datos_test_predicciones.csv\")\n\n# Guardar los valores ajustados en una nueva columna de datos_test_predicciones\ndatos_test_predicciones$fake_predict_regresion &lt;- fake_predict_regresion\n\n# Mostrar las primera filas de datos_test_predicciones\nhead(datos_test_predicciones)\n\n  fake fake_predict_RA fake_predict_FCA fake_predict_regresion\n1    0               1                1                      1\n2    0               0                0                      0\n3    0               0                0                      0\n4    0               0                0                      0\n5    0               1                0                      1\n6    0               1                0                      0\n\n\nAhora, contemos el número de valores NA en la columna fake_predict_regresion:\n\n# Contar el número de valores NA en la columna fake_predict_regresion\ncat(\"La columna fake_predict_regresion tiene \", sum(is.na(datos_test_predicciones$fake_predict_regresion)), \" valores NA\")\n\nLa columna fake_predict_regresion tiene  0  valores NA\n\n\nParece que la predicción ha sido satisfactoria. Ahora, calculemos el porcentaje de éxito en la predicción de cuentas falsas, de cuentas verdaderas y en general:\n\n# Calcular el porcentaje de éxito en la predicción de cuentas falsas\npredicciones_correctas_falsas_regresion &lt;- sum(datos_test_predicciones$fake_predict_regresion == datos_test_predicciones$fake & datos_test_predicciones$fake == 1)\ntotal_falsas_regresion &lt;- sum(datos_test_predicciones$fake == 1)\nporcentaje_exito_falsas_regresion &lt;- (predicciones_correctas_falsas_regresion / total_falsas_regresion) * 100\n\n# Calcular el porcentaje de éxito en la predicción de cuentas verdaderas\npredicciones_correctas_verdaderas_regresion &lt;- sum(datos_test_predicciones$fake_predict_regresion == datos_test_predicciones$fake & datos_test_predicciones$fake == 0)\ntotal_verdaderas_regresion &lt;- sum(datos_test_predicciones$fake == 0)\nporcentaje_exito_verdaderas_regresion &lt;- (predicciones_correctas_verdaderas_regresion / total_verdaderas_regresion) * 100\n\n# Calcular el porcentaje de éxito general\npredicciones_correctas_regresion &lt;- sum(datos_test_predicciones$fake_predict_regresion == datos_test_predicciones$fake)\ntotal_predicciones_regresion &lt;- nrow(datos_test_predicciones)\nporcentaje_exito_general_regresion &lt;- (predicciones_correctas_regresion / total_predicciones_regresion) * 100\n\n# Guardar el data frame en un archivo CSV\nwrite.csv(datos_test_predicciones, \"datos_test_predicciones.csv\", row.names = FALSE)\n\n# Imprimir el resultado\ncat(\"El porcentaje de éxito en la predicción de cuentas falsas es:\", porcentaje_exito_falsas_regresion, \"%\\n\", \"El porcentaje de éxito en la predicción de cuentas verdaderas es:\", porcentaje_exito_verdaderas_regresion, \"%\\n\", \"El porcentaje de éxito general en la predicción de cuentas es:\", porcentaje_exito_general_regresion, \"%\\n\")\n\nEl porcentaje de éxito en la predicción de cuentas falsas es: 80 %\n El porcentaje de éxito en la predicción de cuentas verdaderas es: 90 %\n El porcentaje de éxito general en la predicción de cuentas es: 85 %\n\n\nComo vemos, los porcentajes de éxito son altos, lo que indica que el modelo de regresión ha sido efectivo en la predicción de cuentas falsas y verdaderas.\nAñadamos los porcentajes de éxito a la tabla de porcentajes:\n\n# Leer el archivo CSV\nexito_predicciones &lt;- read.csv(\"exito_predicciones.csv\")\n\n# Añadir los porcentajes de éxito a la tabla de porcentajes\nexito_predicciones &lt;- rbind(exito_predicciones, c(\"Regresión\", porcentaje_exito_falsas_regresion, porcentaje_exito_verdaderas_regresion, porcentaje_exito_general_regresion))\nexito_predicciones\n\n                  tipo Éxito_cuentas_falsas Éxito_cuentas_verdaderas\n1 Reglas de Asociación     83.3333333333333                       75\n2                  FCA                   80                       95\n3            Regresión                   80                       90\n     Éxito_general\n1 79.1666666666667\n2             87.5\n3               85\n\n# Guardar el data frame en un archivo CSV\nwrite.csv(exito_predicciones, \"exito_predicciones.csv\", row.names = FALSE)\n\nLas reglas de asociación han rendido algo mejor que la regresión en la predicción de cuentas falsas, pero la regresión ha sido mejor que las reglas de asociación en la predicción de cuentas verdaderas y en general. En general, la regresión ha sido 6 puntos más efectiva en la predicción general, con respecto a las reglas de asociación.\nFCA y regresión han rendido igual de bien en la predicción de cuentas falsas, pero FCA ha sido mejor en la predicción de cuentas verdaderas y en general. En general, FCA ha sido 2,5 puntos más efectiva en la predicción general, con respecto a la regresión."
  },
  {
    "objectID": "conclusion.html",
    "href": "conclusion.html",
    "title": "6  Conclusión",
    "section": "",
    "text": "Hemos explorado distintos métodos de predicción para el caso de las cuentas falsas de Instagram, y el resultado ha sido más que satisfactorio. En este dataset no contamos con información temporal o de relaciones, con lo que no podíamos extraer ninguna información útil con series temporales ni con análisis de redes sociales, pero serían análisis interesantes en caso de contar con los datos necesarios.\nEn las predicciones, el mayor éxito general lo tiene FCA, con un 87,5% de aciertos. Regresión le sigue con un 85%, y Reglas de Asociación es el último, con 79,17%. Son valores muy buenos, teniendo en cuenta lo simple que es realizar cualquiera de los modelos empleados.\nQueda claro que realizar este análisis nos ha brindado una herramienta eficaz para detectar cuentas falsas en la red social. A través de herramientas como FCA, regresión y reglas de asociación, hemos llegado a un nuevo nivel de comprensión que no solo podría ser aplicado en Instagram, sino también en otros contextos donde la autenticidad es crucial, especialmente en el mundo digital actual. A mayor escala, este proyecto podría ser de gran utilidad para las empresas de redes sociales."
  },
  {
    "objectID": "index.html#dataset",
    "href": "index.html#dataset",
    "title": "Proyecto de análisis de cuentas falsas en Instagram",
    "section": "1.1 Dataset",
    "text": "1.1 Dataset\n\n# Librerías y datasets\nlibrary(readr)\nlibrary(dplyr)\nlibrary(fcaR)\nlibrary(magrittr)\nlibrary(ggplot2)\nlibrary(psych)\nlibrary(arules)\n\ndatos &lt;- read_csv(\"train.csv\")\nView(datos)\ndatos_test &lt;- read_csv(\"test.csv\")\nView(datos_test)"
  },
  {
    "objectID": "visualizacion.html#visualización-de-datos",
    "href": "visualizacion.html#visualización-de-datos",
    "title": "2  Visualización",
    "section": "2.1 Visualización de datos",
    "text": "2.1 Visualización de datos\nExplorar los datos numéricamente es necesario y útil en cualquier análisis, pero a veces visualizar estos datos puede ser incluso más revelador, o complementar a la información numérica para extraer conclusiones de una manera más directa y clara.\nMi objetivo en este apartado será, pues, intentar avanzar en la demostración o refutación de las hipótesis que extraje mediante los datos extremo de las variables.\nEn primer lugar, es bueno comprobar, de forma visual, el perfecto equilibrio en el que se encuentra el dataset, ofreciendo una mitad de cuentas verídicas y otra mitad de cuentas falsas:\n\n# Gráfico de la distribución de cuentas reales y falsas\nggplot(datos, aes(x = as.factor(fake))) +\n  geom_bar(fill = \"maroon\") +\n  labs(title = \"Distribución de Cuentas Falsas y Reales\",\n       x = \"Real/Fake\",\n       y = \"Nº cuentas\") +\n  scale_x_discrete(labels = c(\"0\" = \"Real\", \"1\" = \"Fake\"))\n\n\n\n\nComo ya sabíamos, hay el mismo número de cuentas reales como de cuentas falsas (casi 300 de cada tipo).\nA continuación, para el resto de variables, mostraré tanto el histograma como un gráfico de cuentas verdaderas y falsas según esa variable particular, comenzando por la foto de perfil:\n\n2.1.1 Foto de perfil\nVeamos el histograma:\n\n# Histograma de frecuencias de foto de perfil\nggplot(datos, aes(x = as.factor(profile_pic))) +\n  geom_bar(fill = \"steelblue\", color=\"black\") +\n  labs(title = \"Frecuencia de Fotos de Perfil\",\n       x = \"Foto de Perfil\",\n       y = \"Frecuencia\") +\n  scale_x_discrete(labels = c(\"0\" = \"No\", \"1\" = \"Sí\"))\n\n\n\n\nHay más del doble de cuentas con foto de perfil que de cuentas sin foto de perfil.\nPasemos al gráfico de cuentas verdaderas y falsas según foto de perfil:\n\n# Gráfico de cuentas verdaderas y falsas según foto de perfil\nggplot(datos, aes(x = as.factor(profile_pic), fill = as.factor(fake))) +\n  geom_bar(position = \"fill\") +\n  labs(title = \"Cuentas Falsas según Foto de Perfil\",\n       x = \"Foto de Perfil\",\n       y = \"Proporción\") +\n  scale_fill_manual(values = c(\"0\" = \"palegreen3\", \"1\" = \"tomato3\"), \n                    name = \"Real/Fake\",\n                    labels = c(\"Real\", \"Fake\")) +\n  scale_x_discrete(labels = c(\"0\" = \"No\", \"1\" = \"Sí\"))\n\n\n\n\nEn la exploración numérica de extremos, concluimos que era más probable que una cuenta con foto de perfil fuera verdadera a falsa. Con este gráfico confirmamos lo siguiente: es extremadamente raro encontrar una cuenta real sin foto de perfil.\nVeamos un gráfico que comprende la información de los dos anteriores, a modo de resumen final:\n\n# Crear el gráfico combinado\nggplot(datos, aes(x = as.factor(profile_pic), fill = as.factor(fake))) +\n  geom_bar(position = \"dodge\") +\n  facet_wrap(~ fake, labeller = labeller(fake = c(\"0\" = \"Real\", \"1\" = \"Fake\"))) +\n  labs(title = \"Frecuencia de Fotos de Perfil según Real/Fake\",\n       x = \"Foto de Perfil\",\n       y = \"Frecuencia\",\n       fill = \"Real/Fake\") +\n  scale_fill_manual(values = c(\"0\" = \"palegreen3\", \"1\" = \"tomato3\"), \n                    labels = c(\"Real\", \"Fake\")) +\n  scale_x_discrete(labels = c(\"0\" = \"No\", \"1\" = \"Sí\"))\n\n\n\n\nAntes de pasar a la siguiente variable es necesario puntualizar que, en ciertas variables (muchas de las no binarias), resulta útil el uso de intervalos, para no tener demasiadas barras en los gráficos. Ahora sí, veamos los siguientes gráficos:\n\n\n2.1.2 Ratio de números en la longitud del nombre de usuario\nVeamos el histograma:\n\n# Histograma de frecuencias de nums/length_username\nggplot(datos, aes(x = `nums/length_username`)) +\n  geom_histogram(binwidth = diff(range(datos$`nums/length_username`)) / 30, fill = \"steelblue\", color = \"black\") +\n  labs(title = \"Histograma de Números/Longitud de Nombre de Usuario\",\n       x = \"Números/Longitud de Nombre de Usuario\",\n       y = \"Frecuencia\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\nDestaca la grandísima presencia de valores 0 de este ratio.\nVeamos el gráfico de cuentas verdaderas y falsas según nums/length_username agrupado en intervalos:\n\n# Agrupar los valores de nums/length_username en intervalos\ndatos$num_length_interval &lt;- cut(datos$`nums/length_username`, breaks = 15)\n\n# Gráfico de cuentas verdaderas y falsas según nums/length_username agrupado en intervalos\nggplot(datos, aes(x = num_length_interval, fill = as.factor(fake))) +\n  geom_bar(position = \"fill\") +\n  labs(title = \"Cuentas Falsas según Números/Longitud de Nombre de Usuario\",\n       x = \"Intervalos de Números/Longitud de Nombre de Usuario\",\n       y = \"Proporción\") +\n  scale_fill_manual(values = c(\"0\" = \"palegreen3\", \"1\" = \"tomato3\"), \n                    name = \"Real/Fake\",\n                    labels = c(\"Real\", \"Fake\")) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\nEn la exploración numérica de extremos mencionamos que las cuentas verdaderas tendían a valores bajos de esta variable, y las falsas, a valores altos. Este gráfico lleva a pensar que es extremadamente raro encontrar una cuenta real con mucho ratio de números en la longitud del username, y cuanto más bajo es el ratio, más probabilidad hay de que la cuenta sea real.\nVeamos un gráfico que comprende la información de los dos anteriores, a modo de resumen final:\n\n# Gráfico combinado de nums/length_username según Real/Fake\nggplot(datos, aes(x = `nums/length_username`, fill = as.factor(fake))) +\n  geom_histogram(binwidth = diff(range(datos$`nums/length_username`)) / 30, position = \"dodge\", color = \"black\") +\n  facet_wrap(~ fake, labeller = labeller(fake = c(\"0\" = \"Real\", \"1\" = \"Fake\"))) +\n  labs(title = \"Cuentas Verdaderas y Falsas según Números/Longitud de Nombre de Usuario\",\n       x = \"Números/Longitud de Nombre de Usuario\",\n       y = \"Frecuencia\",\n       fill = \"Real/Fake\") +\n  scale_fill_manual(values = c(\"0\" = \"palegreen3\", \"1\" = \"tomato3\"), \n                    labels = c(\"Real\", \"Fake\")) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\nHay una gran presencia de valores 0 de este ratio (siendo mucho mayor en cuentas verdaderas), y en cuentas falsas hay cierta persistencia de frecuencias notables a medida que crece el ratio.\nPasemos a la siguiente variable:\n\n\n2.1.3 Número de palabras en el nombre completo\nVeamos el histograma:\n\n# Histograma de frecuencias de fullname_words\nggplot(datos, aes(x = as.factor(fullname_words))) +\n  geom_bar(fill = \"steelblue\", color = \"black\") +\n  labs(title = \"Histograma de Palabras en Nombre Completo\",\n       x = \"Palabras en Nombre Completo\",\n       y = \"Frecuencia\")\n\n\n\n\nHay más presencia de valores bajos de la variable.\nVeamos el gráfico de cuentas verdaderas y falsas según fullname_words:\n\n# Gráfico de cuentas verdaderas y falsas según fullname_words\nggplot(datos, aes(x = as.factor(fullname_words), fill = as.factor(fake))) +\n  geom_bar(position = \"fill\") +\n  labs(title = \"Cuentas Falsas según Palabras en Nombre Completo\",\n       x = \"Palabras en Nombre Completo\",\n       y = \"Proporción\") +\n  scale_fill_manual(values = c(\"0\" = \"palegreen3\", \"1\" = \"tomato3\"), \n                    name = \"Real/Fake\",\n                    labels = c(\"Real\", \"Fake\"))\n\n\n\n\nEn el último análisis numérico de probabilidad mencionamos que era algo más probable que las cuentas verdaderas tuvieran más palabras en el nombre completo. Este gráfico también va a favor de esa hipótesis, pero en valores bajos de la variable se pierde un poco la confianza.\nVeamos un gráfico que comprende la información de los dos anteriores, a modo de resumen final:\n\n# Gráfico combinado de fullname_words según Real/Fake\nggplot(datos, aes(x = as.factor(fullname_words), fill = as.factor(fake))) +\n  geom_bar(position = \"dodge\", color = \"black\") +\n  facet_wrap(~ fake, labeller = labeller(fake = c(\"0\" = \"Real\", \"1\" = \"Fake\"))) +\n  labs(title = \"Cuentas Verdaderas y Falsas según Palabras en Nombre Completo\",\n       x = \"Palabras en Nombre Completo\",\n       y = \"Frecuencia\",\n       fill = \"Real/Fake\") +\n  scale_fill_manual(values = c(\"0\" = \"palegreen3\", \"1\" = \"tomato3\"), \n                    labels = c(\"Real\", \"Fake\"))\n\n\n\n\nComo se puede observar, la frecuencia de cuentas con más de 3 palabras en el nombre completo es minúscula, con lo que no sería realista extraer conclusiones basadas en esos datos. La frecuencia de cuentas con 3 o menos palabras está empatada entre las cuentas verdaderas y falsas, con lo que tampoco se puede concluir mucho. Esta es una muestra de lo importante que resulta la observación de las frecuencias de los datos (la ausencia de valores altos nos podría engañar en el gráfico anterior).\nSigamos con la próxima variable:\n\n\n2.1.4 Ratio de números en la longitud del nombre completo\nVeamos el histograma:\n\n# Histograma de frecuencias de nums/length_fullname\nggplot(datos, aes(x = `nums/length_fullname`)) +\n  geom_histogram(binwidth = diff(range(datos$`nums/length_fullname`)) / 24, fill = \"steelblue\", color = \"black\") +\n  labs(title = \"Histograma de Números/Longitud de Nombre Completo\",\n       x = \"Números/Longitud de Nombre Completo\",\n       y = \"Frecuencia\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\nDestaca la masiva aparición de valores 0 de este ratio.\nVeamos el gráfico de cuentas verdaderas y falsas según nums/length_fullname agrupado en intervalos:\n\n# Agrupar los valores de nums/length_fullname en intervalos\ndatos$fullname_length_interval &lt;- cut(datos$`nums/length_fullname`, breaks = 24)\n\n# Gráfico de cuentas verdaderas y falsas según nums/length_fullname agrupado en intervalos\nggplot(datos, aes(x = fullname_length_interval, fill = as.factor(fake))) +\n  geom_bar(position = \"fill\") +\n  labs(title = \"Cuentas Falsas según Números/Longitud de Nombre Completo\",\n       x = \"Intervalos de Números/Longitud de Nombre Completo\",\n       y = \"Proporción\") +\n  scale_fill_manual(values = c(\"0\" = \"palegreen3\", \"1\" = \"tomato3\"), \n                    name = \"Real/Fake\",\n                    labels = c(\"Real\", \"Fake\")) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\nEn el último análisis numérico de probabilidad mencionamos que era mucho más probable que las cuentas falsas tuvieran más ratio de números en la longitud del full name. Este gráfico también va a favor de esa hipótesis, pero en valores bajos de la variable se pierde un poco la confianza.\nVeamos un gráfico que comprende la información de los dos anteriores, a modo de resumen final:\n\n# Gráfico combinado de nums/length_fullname según Real/Fake\nggplot(datos, aes(x = `nums/length_fullname`, fill = as.factor(fake))) +\n  geom_histogram(binwidth = diff(range(datos$`nums/length_fullname`)) / 24, position = \"dodge\", color = \"black\") +\n  facet_wrap(~ fake, labeller = labeller(fake = c(\"0\" = \"Real\", \"1\" = \"Fake\"))) +\n  labs(title = \"Cuentas Verdaderas y Falsas según Números/Longitud de Nombre Completo\",\n       x = \"Números/Longitud de Nombre Completo\",\n       y = \"Frecuencia\",\n       fill = \"Real/Fake\") +\n  scale_fill_manual(values = c(\"0\" = \"palegreen3\", \"1\" = \"tomato3\"), \n                    labels = c(\"Real\", \"Fake\")) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\nPasemos a la siguiente columna:\n\n\n2.1.5 Coincidencia de nombre completo y nombre de usuario\nVeamos el histograma:\n\n# Histograma de frecuencias de name==username\nggplot(datos, aes(x = as.factor(`name==username`))) +\n  geom_bar(fill = \"steelblue\", color = \"black\") +\n  labs(title = \"Histograma de Coincidencia de Nombre de Usuario\",\n       x = \"Coincidencia de Nombre de Usuario\",\n       y = \"Frecuencia\") +\n  scale_x_discrete(labels = c(\"0\" = \"No\", \"1\" = \"Sí\"))\n\n\n\n\nVemos que hay poquísimas cuentas que presentan esta coincidencia.\nVeamos el gráfico de cuentas verdaderas y falsas según name==username\n\n# Gráfico de cuentas verdaderas y falsas según name==username\nggplot(datos, aes(x = as.factor(`name==username`), fill = as.factor(fake))) +\n  geom_bar(position = \"fill\") +\n  labs(title = \"Cuentas Falsas según Coincidencia de Nombre de Usuario\",\n       x = \"Coincidencia de Nombre de Usuario\",\n       y = \"Proporción\") +\n  scale_fill_manual(values = c(\"0\" = \"palegreen3\", \"1\" = \"tomato3\"), \n                    name = \"Real/Fake\",\n                    labels = c(\"Real\", \"Fake\")) + \n  scale_x_discrete(labels = c(\"0\" = \"No\", \"1\" = \"Sí\"))\n\n\n\n\nEn el último análisis numérico de probabilidad mencionamos que era muchísimo más probable que las cuentas falsas presentaran coincidencia en el nombre de usuario. Este gráfico revela que es extremadamente raro encontrar cuentas verídicas con coincidencia en el nombre de usuario (aunque hemos visto que en cuentas falsas también es raro, pero algo menos), pero no podemos afirmar nada sobre las cuentas que no presentan esta coincidencia.\nVeamos un gráfico que comprende la información de los dos anteriores, a modo de resumen final:\n\nggplot(datos, aes(x = as.factor(`name==username`), fill = as.factor(fake))) +\n  geom_bar(position = \"dodge\") +\n  facet_wrap(~ fake, labeller = labeller(fake = c(\"0\" = \"Real\", \"1\" = \"Fake\"))) +\n  labs(title = \"Frecuencia de Coincidencia de Nombre de Usuario según Real/Fake\",\n       x = \"Name == Username\",\n       y = \"Frecuencia\",\n       fill = \"Real/Fake\") +\n  scale_fill_manual(values = c(\"0\" = \"palegreen3\", \"1\" = \"tomato3\"), \n                    labels = c(\"Real\", \"Fake\")) +\n  scale_x_discrete(labels = c(\"0\" = \"No\", \"1\" = \"Sí\"))\n\n\n\n\nEsta variable no parece ser fiable para determinar si una cuenta es verdadera o no.\nPasemos a analizar la siguiente variable:\n\n\n2.1.6 Longitud de la descripción\nVeamos el histograma:\n\n# Histograma de frecuencias de description_length\nggplot(datos, aes(x = description_length)) +\n  geom_histogram(binwidth = diff(range(datos$description_length)) / 15, fill = \"steelblue\", color = \"black\") +\n  labs(title = \"Histograma de Longitud de Descripción\",\n       x = \"Longitud de Descripción\",\n       y = \"Frecuencia\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\nHay muchas cuentas sin descripción, y el resto tiene valores generalmente bajos en la longitud de la descripción.\nEchemos un vistazo al gráfico de cuentas verdaderas y falsas según description_length agrupado en intervalos:\n\n# Agrupar los valores de description_length en intervalos\ndatos$description_length_interval &lt;- cut(datos$description_length, breaks = 15)\n\n# Gráfico de cuentas verdaderas y falsas según description_length agrupado en intervalos\nggplot(datos, aes(x = description_length_interval, fill = as.factor(fake))) +\n  geom_bar(position = \"fill\") +\n  labs(title = \"Cuentas Falsas según Longitud de Descripción\",\n       x = \"Intervalos de Longitud de Descripción\",\n       y = \"Proporción\") +\n  scale_fill_manual(values = c(\"0\" = \"palegreen3\", \"1\" = \"tomato3\"), \n                    name = \"Real/Fake\",\n                    labels = c(\"Real\", \"Fake\")) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\nEn el último análisis numérico de probabilidad mencionamos que era mucho más probable que las cuentas verdaderas tuvieran una descripción más larga. Este gráfico indica que, si una cuenta tiene una descripción larga, probablemente será verídica, aunque no se pueden extraer conclusiones demasiado veraces, puesto que el último intervalo muestra una presencia notable de cuentas falsas.\nVeamos un gráfico que comprende la información de los dos anteriores, a modo de resumen final:\n\n# Gráfico combinado de description_length según Real/Fake\nggplot(datos, aes(x = description_length_interval, fill = as.factor(fake))) +\n  geom_bar(position = \"dodge\") +\n  facet_wrap(~ fake, labeller = labeller(fake = c(\"0\" = \"Real\", \"1\" = \"Fake\"))) +\n  labs(title = \"Cuentas Verdaderas y Falsas según Longitud de Descripción\",\n       x = \"Intervalos de Longitud de Descripción\",\n       y = \"Proporción\",\n       fill = \"Real/Fake\") +\n  scale_fill_manual(values = c(\"0\" = \"palegreen3\", \"1\" = \"tomato3\"), \n                    labels = c(\"Real\", \"Fake\")) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\nDe este gráfico extraemos que la diferencia de las frecuencias de longitud de descripción en cuentas falsas es drástica: se pasa de un pico enorme a una llanura muy pobre. En cuentas verídicas, el primer pico también es el más grande, pero la distribución es algo más normal.\nVeamos la siguiente variable:\n\n\n2.1.7 URL externa\nVeamos el histograma:\n\n# Histograma de frecuencias de external_URL\nggplot(datos, aes(x = as.factor(external_URL))) +\n  geom_bar(fill = \"steelblue\", color = \"black\") +\n  labs(title = \"Histograma de URL Externa\",\n       x = \"URL Externa\",\n       y = \"Frecuencia\") +\n  scale_x_discrete(labels = c(\"0\" = \"No\", \"1\" = \"Sí\"))\n\n\n\n\nComo ya sabíamos, hay pocas cuentas con URL externa.\nObservemos el gráfico de cuentas verdaderas y falsas según external_URL:\n\n# Gráfico de cuentas verdaderas y falsas según external_URL\nggplot(datos, aes(x = as.factor(external_URL), fill = as.factor(fake))) +\n  geom_bar(position = \"fill\") +\n  labs(title = \"Cuentas Falsas según URL Externa\",\n       x = \"URL Externa\",\n       y = \"Proporción\") +\n  scale_fill_manual(values = c(\"0\" = \"palegreen3\", \"1\" = \"tomato3\"), \n                    name = \"Real/Fake\",\n                    labels = c(\"Real\", \"Fake\")) +\n  scale_x_discrete(labels = c(\"0\" = \"No\", \"1\" = \"Sí\"))\n\n\n\n\nComo ya dijimos anteriormente, este dataset no contiene cuentas falsas con URL externa. El gráfico nos indica que, si una cuenta no tiene URL externa, no podemos afirmar con seguridad si es falsa o verdadera.\nVeamos un gráfico que comprende la información de los dos anteriores, a modo de resumen final:\n\n# Gráfico combinado de external_URL según Real/Fake\nggplot(datos, aes(x = as.factor(external_URL), fill = as.factor(fake))) +\n  geom_bar(position = \"dodge\", color = \"black\") +\n  facet_wrap(~ fake, labeller = labeller(fake = c(\"0\" = \"Real\", \"1\" = \"Fake\"))) +\n  labs(title = \"Cuentas Verdaderas y Falsas según URL Externa\",\n       x = \"URL Externa\",\n       y = \"Proporción\",\n       fill = \"Real/Fake\") +\n  scale_fill_manual(values = c(\"0\" = \"palegreen3\", \"1\" = \"tomato3\"), \n                    labels = c(\"Real\", \"Fake\")) +\n  scale_x_discrete(labels = c(\"0\" = \"No\", \"1\" = \"Sí\"))\n\n\n\n\nDe nuevo hay un salto drástico en la distribución de las cuentas falsas (ninguna tiene URL externa), mientras que en las cuentas verdaderas la variable está más equilibrada (aunque, igualmente, hay muchas más cuentas verdaderas sin URL que con ella).\nPasemos a la siguiente columna:\n\n\n2.1.8 Cuentas privadas\nVeamos el histograma:\n\n# Histograma de frecuencias de private\nggplot(datos, aes(x = as.factor(private))) +\n  geom_bar(fill = \"steelblue\", color = \"black\") +\n  labs(title = \"Histograma de Privacidad\",\n       x = \"Privacidad\",\n       y = \"Frecuencia\") +\n  scale_x_discrete(labels = c(\"0\" = \"No\", \"1\" = \"Sí\"))\n\n\n\n\nHay más cuentas públicas que privadas.\nVeamos el gráfico de cuentas verdaderas y falsas según private:\n\n# Gráfico de cuentas verdaderas y falsas según private\nggplot(datos, aes(x = as.factor(private), fill = as.factor(fake))) +\n  geom_bar(position = \"fill\") +\n  labs(title = \"Cuentas Falsas según Privacidad\",\n       x = \"Privacidad\",\n       y = \"Proporción\") +\n  scale_fill_manual(values = c(\"0\" = \"palegreen3\", \"1\" = \"tomato3\"), \n                    name = \"Real/Fake\",\n                    labels = c(\"Real\", \"Fake\")) +\n  scale_x_discrete(labels = c(\"0\" = \"No\", \"1\" = \"Sí\"))\n\n\n\n\nEn el análisis exploratorio comentamos que la privacidad de la cuenta no parecía ser un buen criterio para determinar su legitimidad. Este gráfico lo confirma: no se puede afirmar absolutamente nada, con lo que no sería un buen parámetro predictor.\nVeamos un gráfico que comprende la información de los dos anteriores, a modo de resumen final:\n\n# Gráfico combinado de private según Real/Fake\nggplot(datos, aes(x = as.factor(private), fill = as.factor(fake))) +\n  geom_bar(position = \"dodge\", color = \"black\") +\n  facet_wrap(~ fake, labeller = labeller(fake = c(\"0\" = \"Real\", \"1\" = \"Fake\"))) +\n  labs(title = \"Cuentas Verdaderas y Falsas según Privacidad\",\n       x = \"Privacidad\",\n       y = \"Proporción\",\n       fill = \"Real/Fake\") +\n  scale_fill_manual(values = c(\"0\" = \"palegreen3\", \"1\" = \"tomato3\"), \n                    labels = c(\"Real\", \"Fake\")) +\n  scale_x_discrete(labels = c(\"0\" = \"No\", \"1\" = \"Sí\"))\n\n\n\n\nLos gráficos para cuentas verdaderas y falsas son casi idénticos. No podemos extraer diferencias.\nPasemos a la siguiente variable:\n\n\n2.1.9 Número de publicaciones\nVeamos el histograma:\n\n# Histograma de frecuencias de posts\nggplot(datos, aes(x = posts)) +\n  geom_histogram(binwidth = diff(range(datos$posts)) / 60, fill = \"steelblue\", color = \"black\") +\n  labs(title = \"Histograma de Número de Publicaciones\",\n       x = \"Número de Publicaciones\",\n       y = \"Frecuencia\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\nUna vez más, encontramos una variable con gran presencia de valores pequeños, y decreciente frecuencia ante valores crecientes.\nVeamos el gráfico de cuentas verdaderas y falsas según posts agrupado en intervalos:\n\n# Agrupar los valores de posts en intervalos\ndatos$posts_interval &lt;- cut(datos$posts, breaks = 60)\n\n# Gráfico de cuentas verdaderas y falsas según posts agrupado en intervalos\nggplot(datos, aes(x = posts_interval, fill = as.factor(fake))) +\n  geom_bar(position = \"fill\") +\n  labs(title = \"Cuentas Falsas según Número de Publicaciones\",\n       x = \"Intervalos de Número de Publicaciones\",\n       y = \"Proporción\") +\n  scale_fill_manual(values = c(\"0\" = \"palegreen3\", \"1\" = \"tomato3\"), \n                    name = \"Real/Fake\",\n                    labels = c(\"Real\", \"Fake\")) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\nTanto en el análisis de extremos como en el análisis probabilístico concluimos que, a mayor número de publicaciones, más posibilidades había de que la cuenta fuera verdadera. Este gráfico confirma ese enunciado: parece imposible, según el dataset, que una cuenta falsa tenga más de 400 publicaciones. El sentido común también lo confirma.\nVeamos un gráfico que comprende la información de los dos anteriores, a modo de resumen final:\n\n# Gráfico combinado de posts según Real/Fake\nggplot(datos, aes(x = posts_interval, fill = as.factor(fake))) +\n  geom_bar(position = \"dodge\", color = \"black\") +\n  facet_wrap(~ fake, labeller = labeller(fake = c(\"0\" = \"Real\", \"1\" = \"Fake\"))) +\n  labs(title = \"Cuentas Verdaderas y Falsas según Número de Publicaciones\",\n       x = \"Intervalos de Número de Publicaciones\",\n       y = \"Proporción\",\n       fill = \"Real/Fake\") +\n  scale_fill_manual(values = c(\"0\" = \"palegreen3\", \"1\" = \"tomato3\"), \n                    labels = c(\"Real\", \"Fake\")) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\nDe nuevo, vemos un gran salto en las barras de las cuentas falsas.\nSigamos con la próxima columna:\n\n\n2.1.10 Número de seguidores\nVeamos el histograma:\n\n# Histograma de frecuencias de followers\nggplot(datos, aes(x = followers)) +\n  geom_histogram(binwidth = diff(range(datos$followers)) / 100, fill = \"steelblue\", color = \"black\") +\n  labs(title = \"Histograma de Número de Seguidores\",\n       x = \"Número de Seguidores\",\n       y = \"Frecuencia\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\nEste histograma es ciertamente poco revelador, debido a la presencia en el dataset de cuentas con un número inmenso de seguidores. Por ello, la barra principal se concentra en un valor bajo.\n\n# Agrupar los valores de followers en 15 categorías de intervalos\ndatos$followers_interval &lt;- cut(datos$followers, breaks = 100)\n\n# Gráfico de cuentas verdaderas y falsas según followers agrupado en intervalos\nggplot(datos, aes(x = followers_interval, fill = as.factor(fake))) +\n  geom_bar(position = \"fill\") +\n  labs(title = \"Cuentas Falsas según Número de Seguidores\",\n       x = \"Intervalos de Número de Seguidores\",\n       y = \"Proporción\") +\n  scale_fill_manual(values = c(\"0\" = \"palegreen3\", \"1\" = \"tomato3\"), \n                    name = \"Real/Fake\",\n                    labels = c(\"Real\", \"Fake\")) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\nDe nuevo, tanto en el análisis de extremos como en el análisis probabilístico dijimos que, a mayor número de seguidores, más posibilidades había de que la cuenta fuera verdadera. El gráfico vuelve a confirmar ambas hipótesis coincidentes, puesto que las cuentas falsas ocupan únicamente el primer intervalo de seguidores. Cabe destacar, no obstante, lo que ya dijimos en el análisis exploratorio: en el dataset hay muchas cuentas con cifras increíblemente altas de seguidores. Sin estas cuentas, que en datasets aleatorios probablemente no aparecerían, el gráfico cambiaría, pero aun así las conclusiones probablemente serían similares.\nVeamos un gráfico que comprende la información de los dos anteriores, a modo de resumen final:\n\n# Gráfico combinado de followers según Real/Fake\nggplot(datos, aes(x = followers_interval, fill = as.factor(fake))) +\n  geom_bar(position = \"dodge\", color = \"black\") +\n  facet_wrap(~ fake, labeller = labeller(fake = c(\"0\" = \"Real\", \"1\" = \"Fake\"))) +\n  labs(title = \"Cuentas Verdaderas y Falsas según Número de Seguidores\",\n       x = \"Intervalos de Número de Seguidores\",\n       y = \"Proporción\",\n       fill = \"Real/Fake\") +\n  scale_fill_manual(values = c(\"0\" = \"palegreen3\", \"1\" = \"tomato3\"), \n                    labels = c(\"Real\", \"Fake\")) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\nVeamos el úlltimo gráfico de este tipo:\n\n\n2.1.11 Número de seguimientos\nVeamos el histograma:\n\nggplot(datos, aes(x = follows)) +\n  geom_histogram(binwidth = diff(range(datos$follows)) / 15, fill = \"steelblue\", color = \"black\") +\n  labs(title = \"Histograma de Número de Seguimientos\",\n       x = \"Número de Seguimientos\",\n       y = \"Frecuencia\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\nLa frecuencia decrece mucho a medida que crece el número de seguimientos, lo cual es razonable.\nVeamos el gráfico de cuentas verdaderas y falsas según follows agrupado en intervalos:\n\n# Agrupar los valores de follows en 15 categorías de intervalos\ndatos$follows_interval &lt;- cut(datos$follows, breaks = 15)\n\n# Gráfico de cuentas verdaderas y falsas según follows agrupado en intervalos\nggplot(datos, aes(x = follows_interval, fill = as.factor(fake))) +\n  geom_bar(position = \"fill\") +\n  labs(title = \"Cuentas Falsas según Número de Seguimientos\",\n       x = \"Intervalos de Número de Seguimientos\",\n       y = \"Proporción\") +\n  scale_fill_manual(values = c(\"0\" = \"palegreen3\", \"1\" = \"tomato3\"), \n                    name = \"Real/Fake\",\n                    labels = c(\"Real\", \"Fake\")) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\nEn el análisis exploratorio concluimos que, a mayor número de seguimientos, mayor sería la probabilidad de que la cuenta fuera verdadera. Sin embargo, el gráfico muestra que hay cuentas verdaderas y falsas en todo el espectro de intervalos de número de seguimientos. No podemos concluir demasiado de este dato, aunque el gráfico no debe ser el criterio más poderoso, ya que, por ejemplo, si el 95% de los datos estuviera comprendido en la primera y última barra, las demás barras intermedias serían poco útiles, pero parecerían de igual peso visualmente.\nEsta reflexión puede aplicarse a todas las variables: es bueno ver el gráfico para confirmar hipótesis planteadas con anterioridad, pero no debe usarse un único criterio como medidor absoluto (ya hemos visto que hay discordancias entre ciertos gráficos y las conclusiones de los valores extremo; por eso indiqué que no podíamos fiarnos de éstos).\nVeamos un gráfico que comprende la información de los dos anteriores, a modo de resumen final:\n\n# Gráfico combinado de follows según Real/Fake\nggplot(datos, aes(x = follows_interval, fill = as.factor(fake))) +\n  geom_bar(position = \"dodge\", color = \"black\") +\n  facet_wrap(~ fake, labeller = labeller(fake = c(\"0\" = \"Real\", \"1\" = \"Fake\"))) +\n  labs(title = \"Cuentas Verdaderas y Falsas según Número de Seguimientos\",\n       x = \"Intervalos de Número de Seguimientos\",\n       y = \"Proporción\",\n       fill = \"Real/Fake\") +\n  scale_fill_manual(values = c(\"0\" = \"palegreen3\", \"1\" = \"tomato3\"), \n                    labels = c(\"Real\", \"Fake\")) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))"
  },
  {
    "objectID": "conclusion.html#conclusión",
    "href": "conclusion.html#conclusión",
    "title": "6  Conclusión",
    "section": "6.1 CONCLUSIÓN",
    "text": "6.1 CONCLUSIÓN\nHemos explorado distintos métodos de predicción para el caso de las cuentas falsas de Instagram, y el resultado ha sido más que satisfactorio.\nEl mayor éxito general lo tiene FCA, con un 87,5% de aciertos. Regresión le sigue con un 85%, y Reglas de Asociación es el último, con 79,17%. Son valores muy buenos, teniendo en cuenta lo simple que es realizar cualquiera de los modelos empleados.\nQueda claro que realizar este análisis nos ha brindado una herramienta eficaz para detectar cuentas falsas en la red social. A través de herramientas como FCA, regresión y reglas de asociación, hemos llegado a un nuevo nivel de comprensión que no solo podría ser aplicado en Instagram, sino también en otros contextos donde la autenticidad es crucial, especialmente en el mundo digital actual. A mayor escala, este proyecto podría ser de gran utilidad para las empresas de redes sociales."
  }
]