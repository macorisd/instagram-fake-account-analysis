{
  "hash": "49225e543b2348aef317b55042dbb00b",
  "result": {
    "markdown": "---\ntitle: \"Reglas de Asociación\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n# Librerías, datasets y procesamiento previo\nlibrary(readr)\nlibrary(dplyr)\nlibrary(fcaR)\nlibrary(magrittr)\nlibrary(ggplot2)\nlibrary(psych)\nlibrary(arules)\n\ndatos <- read_csv(\"train.csv\")\nView(datos)\ndatos_test <- read_csv(\"test.csv\")\nView(datos_test)\n\ndatos <- rename(datos, profile_pic=`profile pic`, `nums/length_username` = `nums/length username`, fullname_words=`fullname words`, `nums/length_fullname` = `nums/length fullname`, description_length=`description length`, external_URL=`external URL`, posts=`#posts`, followers=`#followers`, follows=`#follows`)\n\ndatos_test <- rename(datos_test, profile_pic=`profile pic`, `nums/length_username` = `nums/length username`, fullname_words=`fullname words`, `nums/length_fullname` = `nums/length fullname`, description_length=`description length`, external_URL=`external URL`, posts=`#posts`, followers=`#followers`, follows=`#follows`)\n```\n:::\n\n\n## Reglas de Asociación\n\nYa hemos explorado, numérica y visualmente, el conjunto de datos de entrenamiento. A continuación, es turno de trabajar con las reglas de asociación, o lo que es lo mismo, descubrir relaciones y patrones de comportamiento revelados por los datos.\n\n### Obtención de las reglas\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Eliminar las columnas de visualización\ndatos$num_length_interval <- NULL\ndatos$fullname_length_interval <- NULL\ndatos$description_length_interval <- NULL\ndatos$posts_interval <- NULL\ndatos$followers_interval <- NULL\ndatos$follows_interval <- NULL\n\nView(datos)\n```\n:::\n\n\nTras eliminar las columnas del apartado de visualización, pasemos a la generación de reglas de asociación, no sin antes ajustar el dataset para adecuarlo a la producción de las reglas.\n\nEn primer lugar, convertiremos el dataset a un data frame, y ajustaremos los tipos de las columnas. Necesitamos convertir las variables binarias al tipo \"factor\", para que no aparezcan intervalos del tipo \\[0,1\\] en estas variables en las reglas, así como discretizar a nuestro gusto las variables numéricas, para establecer categorías/intervalos razonables de acuerdo al dato particular con el que estemos trabajando:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convertir dataset a data frame\ndatosDF <- data.frame(datos)\n\n# Mostrar tipo y un valor de las columnas 1 y 3\ncat(\"La clase de la columna 1 (profile_pic) es:\", class(datosDF[[1]]), \"\\nLa clase de la columna 3 (fullname_words) es:\", class(datosDF[[3]]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLa clase de la columna 1 (profile_pic) es: numeric \nLa clase de la columna 3 (fullname_words) es: numeric\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(datosDF, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  profile_pic nums.length_username fullname_words nums.length_fullname\n1           1                 0.27              0                    0\n2           1                 0.00              2                    0\n3           1                 0.10              2                    0\n4           1                 0.00              1                    0\n5           1                 0.00              2                    0\n  name..username description_length external_URL private posts followers\n1              0                 53            0       0    32      1000\n2              0                 44            0       0   286      2740\n3              0                  0            0       1    13       159\n4              0                 82            0       0   679       414\n5              0                  0            0       1     6       151\n  follows fake\n1     955    0\n2     533    0\n3      98    0\n4     651    0\n5     126    0\n```\n:::\n:::\n\n\nComo vemos, los tipos iniciales de las variables profile_pic y fullname_words son numéricos.\n\nAhora pasemos a ajustar los tipos de datos:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Discretizar columnas numéricas\ndatosDF$nums.length_username <- discretize(datosDF$nums.length_username, method=\"interval\", breaks = 5)\ndatosDF$fullname_words <- discretize(datosDF$fullname_words, method=\"frequency\", breaks = 5)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in discretize(datosDF$fullname_words, method = \"frequency\", breaks = 5): The calculated breaks are: 0, 1, 1, 2, 2, 12\n  Only unique breaks are used reducing the number of intervals. Look at ? discretize for details.\n```\n:::\n\n```{.r .cell-code}\ndatosDF$nums.length_fullname <- discretize(datosDF$nums.length_fullname, method=\"interval\", breaks = 5)\ndatosDF$description_length <- discretize(datosDF$description_length, method=\"frequency\", breaks = 5)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in discretize(datosDF$description_length, method = \"frequency\", : The calculated breaks are: 0, 0, 0, 5.00000000000006, 43, 150\n  Only unique breaks are used reducing the number of intervals. Look at ? discretize for details.\n```\n:::\n\n```{.r .cell-code}\ndatosDF$posts <- discretize(datosDF$posts, method=\"frequency\", breaks = 7)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in discretize(datosDF$posts, method = \"frequency\", breaks = 7): The calculated breaks are: 0, 0, 1, 5, 17.5714285714286, 63.7142857142857, 186.571428571428, 7389\n  Only unique breaks are used reducing the number of intervals. Look at ? discretize for details.\n```\n:::\n\n```{.r .cell-code}\ndatosDF$followers <- discretize(datosDF$followers, method=\"frequency\", breaks = 10)\ndatosDF$follows <- discretize(datosDF$follows, method=\"frequency\", breaks = 7)\n\n# Identificar las columnas binarias y numéricas\ncolumnas_binarias <- c(1, 5, 7, 8, 12) # Índices de las columnas binarias\n\n# Convertir columnas binarias a factores\ndatosDF[, columnas_binarias] <- lapply(datosDF[, columnas_binarias], factor)\nView(datosDF)\n```\n:::\n\n\nExpliquemos el sentido de los parámetros usados en la discretización/conversión para cada variable:\n\n-   profile_pic: esta variable es binaria, con lo que se convierte a factor y tendrá 2 niveles.\n\n-   nums/length_username: esta variable es numérica pero está comprendida entre 0 y 1. Por ello, he usado 5 breaks (máximo de 5 categorías) y el método interval (categorías de igual tamaño).\n\n-   fullname_words: esta variable es numérica, con valores pequeños. Por ello, he usado 5 breaks (máximo de 5 categorías) y el método frequency (categorías de distinto tamaño, calculado en base a la frecuencia de los valores).\n\n-   nums/length_fullname: esta variable es numérica pero está comprendida entre 0 y 1. Por ello, he usado 5 breaks (máximo de 5 categorías) y el método interval (categorías de igual tamaño).\n\n-   name==username: esta variable es binaria, con lo que se convierte a factor y tendrá 2 niveles.\n\n-   description_length: esta variable es numérica, con valores relativamente pequeños. Por ello, he usado 5 breaks (máximo de 5 categorías) y el método frequency (categorías de distinto tamaño, calculado en base a la frecuencia de los valores).\n\n-   external_URL: esta variable es binaria, con lo que se convierte a factor y tendrá 2 niveles.\n\n-   private: esta variable es binaria, con lo que se convierte a factor y tendrá 2 niveles.\n\n-   posts: esta variable es numérica, con valores que pueden llegar a ser grandes. Por ello, he usado 7 breaks (máximo de 7 categorías) y el método frequency (categorías de distinto tamaño, calculado en base a la frecuencia de los valores).\n\n-   followers: esta variable es numérica, con valores que pueden llegar a ser enormes Por ello, he usado 10 breaks (máximo de 10 categorías) y el método frequency (categorías de distinto tamaño, calculado en base a la frecuencia de los valores).\n\n-   follows: esta variable es numérica, con valores que pueden llegar a ser grandes. Por ello, he usado 7 breaks (máximo de 7 categorías) y el método frequency (categorías de distinto tamaño, calculado en base a la frecuencia de los valores).\n\n-   fake: esta variable es binaria, con lo que se convierte a factor y tendrá 2 niveles.\n\nDiscretizar variables numéricas antes de crear reglas de asociación es recomendable, ya que ayuda a simplificar el análisis y mejorar la capacidad para manejar el ruido y la variabilidad en los datos.\n\nAhora, veamos los niveles (número de intervalos) que posee cada variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Obtener los niveles de cada variable recorriendo las columnas\nfor (col_name in names(datosDF)) {\n  col <- datosDF[[col_name]]\n  if (is.factor(col)) {\n    cat(length(levels(col)), \" niveles en\", col_name, \":\", levels(col), \"\\n\")\n  }\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2  niveles en profile_pic : 0 1 \n5  niveles en nums.length_username : [0,0.184) [0.184,0.368) [0.368,0.552) [0.552,0.736) [0.736,0.92] \n3  niveles en fullname_words : [0,1) [1,2) [2,12] \n5  niveles en nums.length_fullname : [0,0.2) [0.2,0.4) [0.4,0.6) [0.6,0.8) [0.8,1] \n2  niveles en name..username : 0 1 \n3  niveles en description_length : [0,5) [5,43) [43,150] \n2  niveles en external_URL : 0 1 \n2  niveles en private : 0 1 \n6  niveles en posts : [0,1) [1,5) [5,17.6) [17.6,63.7) [63.7,187) [187,7.39e+03] \n10  niveles en followers : [0,10.5) [10.5,26) [26,49) [49,78) [78,150) [150,271) [271,496) [496,916) [916,2.58e+03) [2.58e+03,1.53e+07] \n7  niveles en follows : [0,26) [26,71) [71,159) [159,322) [322,521) [521,904) [904,7.5e+03] \n2  niveles en fake : 0 1 \n```\n:::\n:::\n\n\nAhora, veamos el cambio en el tipo de datos:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Mostrar tipo y un valor de las columnas 1 y 3\ncat(\"La clase de la columna 1 (profile_pic) es:\", class(datosDF[[1]]), \"\\nLa clase de la columna 3 (fullname_words) es:\", class(datosDF[[3]]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLa clase de la columna 1 (profile_pic) es: factor \nLa clase de la columna 3 (fullname_words) es: factor\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(datosDF, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  profile_pic nums.length_username fullname_words nums.length_fullname\n1           1        [0.184,0.368)          [0,1)              [0,0.2)\n2           1            [0,0.184)         [2,12]              [0,0.2)\n3           1            [0,0.184)         [2,12]              [0,0.2)\n4           1            [0,0.184)          [1,2)              [0,0.2)\n5           1            [0,0.184)         [2,12]              [0,0.2)\n  name..username description_length external_URL private          posts\n1              0           [43,150]            0       0    [17.6,63.7)\n2              0           [43,150]            0       0 [187,7.39e+03]\n3              0              [0,5)            0       1       [5,17.6)\n4              0           [43,150]            0       0 [187,7.39e+03]\n5              0              [0,5)            0       1       [5,17.6)\n            followers       follows fake\n1      [916,2.58e+03) [904,7.5e+03]    0\n2 [2.58e+03,1.53e+07]     [521,904)    0\n3           [150,271)      [71,159)    0\n4           [271,496)     [521,904)    0\n5           [150,271)      [71,159)    0\n```\n:::\n:::\n\n\nComo podemos ver, ahora profile_pic tiene un valor 1 (de tipo factror), y fullname_words tiene valores comprendidos en un intervalo (categorías).\n\nPara generar reglas de asociación, se recomienda trabajar con datos de tipo transacción, ya que este tipo permite representar los datos en un formato adecuado para el algoritmo, facilitando la identificación de patrones de asociación. Por ello, convertiremos datosDF en tipo transacciones:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convertir a tipo transacción\nTdatos <- as(datosDF, \"transactions\")\nclass(Tdatos)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"transactions\"\nattr(,\"package\")\n[1] \"arules\"\n```\n:::\n:::\n\n\nUna vez preparados los datos, es hora de utilizar el algoritmo apriori para generar las reglas de asociación.\n\nPara generar las reglas, usaré un soporte de 0,1 (para que las reglas generadas tengan un mínimo razonable de apariciones en los datos) y una confianza del 90% (para extraer únicamente reglas precisas):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generar reglas de asociación con suporte = 0,1 y confianza = 0,9\nreglas <- apriori(Tdatos, list(supp=0.1, conf=0.9))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nApriori\n\nParameter specification:\n confidence minval smax arem  aval originalSupport maxtime support minlen\n        0.9    0.1    1 none FALSE            TRUE       5     0.1      1\n maxlen target  ext\n     10  rules TRUE\n\nAlgorithmic control:\n filter tree heap memopt load sort verbose\n    0.1 TRUE TRUE  FALSE TRUE    2    TRUE\n\nAbsolute minimum support count: 57 \n\nset item appearances ...[0 item(s)] done [0.00s].\nset transactions ...[48 item(s), 576 transaction(s)] done [0.00s].\nsorting and recoding items ... [38 item(s)] done [0.00s].\ncreating transaction tree ... done [0.00s].\nchecking subsets of size 1 2 3 4 5 6 7 8 done [0.00s].\nwriting ... [3230 rule(s)] done [0.00s].\ncreating S4 object  ... done [0.00s].\n```\n:::\n:::\n\n\nVeamos cuántas reglas hay con soporte = 0,1 y confianza = 0,9:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Número de reglas con soporte = 0,1 y confianza = 0,9\nlength(reglas)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3230\n```\n:::\n:::\n\n\nUn paso necesario al generar reglas es eliminar las redundantes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Eliminar reglas redundantes\nindices_no_redundantes <- which(!is.redundant(reglas))\nreglas <- reglas[indices_no_redundantes]\n```\n:::\n\n\nVeamos cuántas reglas sin redundancia hay:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Número de reglas sin redundancia\nlength(reglas)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 305\n```\n:::\n:::\n\n\nAhora, quedémonos únicamente con las reglas estadísticamente significativas:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nindices_significativos <- which(is.significant(reglas))\nreglas <- reglas[indices_significativos]\n```\n:::\n\n\nVeamos cuántas reglas significativas hay:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Número de reglas significativas\nlength(reglas)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 237\n```\n:::\n:::\n\n\nUn parámetro muy importante para las reglas de asociación es el lift, ya que, si este dato es superior a 1, significa que el antecedente y el consecuente tienden a ocurrir juntos más frecuentemente de lo que se esperaría por azar. Es decir, un lift de 3 significa que el antecedente hace que el consecuente sea 3 veces más probable que ocurra.\n\nTambién nos interesa el count, es decir, el número de casos en los que esa regla se cumple. Ya hemos aplicado el filtro de soporte al crear las reglas, pero, por si acaso, establezcamos también un count mínimo de 50.\n\nApliquemos ambos filtros:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreglas <- subset(reglas, subset = lift > 1 & count > 50)\n```\n:::\n\n\nVeamos cuántas reglas con lift \\> 1 y count \\> 50 hay:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Número de reglas con lift > 1 y count > 50\nlength(reglas)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 237\n```\n:::\n:::\n\n\nEl número de reglas no ha disminuido, lo que sugiere que los filtros anteriores se han encargado de desechar las reglas con lift \\<= 1 y count \\<= 50.\n\nEchemos un vistazo a las primeras 15 reglas, ordenadas por confianza:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Visualizar las 20 primeras reglas\nreglas <- sort(reglas, by=\"confidence\")\ninspect(reglas[1:20])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     lhs                                      rhs                              support confidence  coverage     lift count\n[1]  {followers=[26,49)}                   => {external_URL=0}               0.1006944          1 0.1006944 1.131631    58\n[2]  {followers=[2.58e+03,1.53e+07]}       => {nums.length_fullname=[0,0.2)} 0.1006944          1 0.1006944 1.095057    58\n[3]  {followers=[0,10.5)}                  => {external_URL=0}               0.1006944          1 0.1006944 1.131631    58\n[4]  {external_URL=1}                      => {fake=0}                       0.1163194          1 0.1163194 2.000000    67\n[5]  {external_URL=1}                      => {profile_pic=1}                0.1163194          1 0.1163194 1.425743    67\n[6]  {posts=[187,7.39e+03]}                => {profile_pic=1}                0.1440972          1 0.1440972 1.425743    83\n[7]  {nums.length_username=[0.184,0.368)}  => {external_URL=0}               0.1857639          1 0.1857639 1.131631   107\n[8]  {posts=[0,1)}                         => {external_URL=0}               0.2725694          1 0.2725694 1.131631   157\n[9]  {profile_pic=0}                       => {external_URL=0}               0.2986111          1 0.2986111 1.131631   172\n[10] {fullname_words=[2,12]}               => {name..username=0}             0.4097222          1 0.4097222 1.035971   236\n[11] {fake=1}                              => {external_URL=0}               0.5000000          1 0.5000000 1.131631   288\n[12] {nums.length_username=[0,0.184),                                                                                     \n      external_URL=1}                      => {nums.length_fullname=[0,0.2)} 0.1128472          1 0.1128472 1.095057    65\n[13] {nums.length_username=[0.368,0.552),                                                                                 \n      description_length=[0,5)}            => {fake=1}                       0.1163194          1 0.1163194 2.000000    67\n[14] {nums.length_username=[0.368,0.552),                                                                                 \n      description_length=[0,5)}            => {external_URL=0}               0.1163194          1 0.1163194 1.131631    67\n[15] {profile_pic=0,                                                                                                      \n      follows=[0,26)}                      => {fake=1}                       0.1041667          1 0.1041667 2.000000    60\n[16] {description_length=[0,5),                                                                                           \n      follows=[0,26)}                      => {external_URL=0}               0.1215278          1 0.1215278 1.131631    70\n[17] {posts=[17.6,63.7),                                                                                                  \n      fake=0}                              => {profile_pic=1}                0.1059028          1 0.1059028 1.425743    61\n[18] {posts=[17.6,63.7),                                                                                                  \n      fake=0}                              => {nums.length_fullname=[0,0.2)} 0.1059028          1 0.1059028 1.095057    61\n[19] {nums.length_username=[0,0.184),                                                                                     \n      posts=[17.6,63.7)}                   => {profile_pic=1}                0.1111111          1 0.1111111 1.425743    64\n[20] {follows=[521,904),                                                                                                  \n      fake=0}                              => {profile_pic=1}                0.1059028          1 0.1059028 1.425743    61\n```\n:::\n:::\n\n\nComo vemos, las 20 reglas tienen 100% de confianza, y gracias a los filtros, tienen también buenos valores de lift y coverage.\n\nVeamos cuántas reglas tienen un 100% de confianza:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreglas_confianza <- subset(reglas, confidence == 1)\nlength(reglas_confianza)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 55\n```\n:::\n:::\n\n\nHay 55 reglas que son perfectamente precisas, es decir, que si aparece el antecedente, el consecuente también se cumple en el 100% de los casos.\n\nUna vez examinadas algunas características generales de las reglas, es el momento de quedarnos con las reglas realmente importantes para este proyecto, es decir, las que involucran al parámetro \"fake\". Nuestro objetivo actual es, pues, determinar qué parámetros son determinantes para decidir si una cuenta es falsa o verdadera (parámetro \"fake\" en el consecuente), así como analizar qué patrones suelen cumplirse en las cuentas falsas o verdaderas (parámetro \"fake\" en el antecedente).\n\nComencemos con el primer enfoque:\n\n### ¿Qué parámetros deciden si una cuenta es verdadera o falsa?\n\nPara encontrar las variables o conjuntos de variables que, en nuestro dataset, determinan si una cuenta es verdadera o falsa con total o casi total seguridad, es necesario encontrar las reglas que presenten el parámetro fake en su consecuente.\n\nPara cuentas falsas:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreglas_fake <- subset(reglas, subset = rhs %in% \"fake=1\")\nlength(reglas_fake)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 21\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ninspect(reglas_fake)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     lhs                                      rhs        support confidence  coverage     lift count\n[1]  {nums.length_username=[0.368,0.552),                                                           \n      description_length=[0,5)}            => {fake=1} 0.1163194  1.0000000 0.1163194 2.000000    67\n[2]  {profile_pic=0,                                                                                \n      follows=[0,26)}                      => {fake=1} 0.1041667  1.0000000 0.1041667 2.000000    60\n[3]  {profile_pic=0,                                                                                \n      posts=[0,1)}                         => {fake=1} 0.2152778  1.0000000 0.2152778 2.000000   124\n[4]  {profile_pic=0,                                                                                \n      description_length=[0,5)}            => {fake=1} 0.2847222  1.0000000 0.2847222 2.000000   164\n[5]  {profile_pic=0,                                                                                \n      private=0}                           => {fake=1} 0.2100694  1.0000000 0.2100694 2.000000   121\n[6]  {fullname_words=[1,2),                                                                         \n      description_length=[0,5),                                                                     \n      posts=[0,1)}                         => {fake=1} 0.1875000  1.0000000 0.1875000 2.000000   108\n[7]  {fullname_words=[1,2),                                                                         \n      private=0,                                                                                    \n      posts=[0,1)}                         => {fake=1} 0.1284722  1.0000000 0.1284722 2.000000    74\n[8]  {profile_pic=0,                                                                                \n      fullname_words=[1,2)}                => {fake=1} 0.2239583  0.9923077 0.2256944 1.984615   129\n[9]  {fullname_words=[1,2),                                                                         \n      posts=[0,1)}                         => {fake=1} 0.1927083  0.9910714 0.1944444 1.982143   111\n[10] {profile_pic=0}                       => {fake=1} 0.2951389  0.9883721 0.2986111 1.976744   170\n[11] {nums.length_username=[0.368,0.552),                                                           \n      external_URL=0}                      => {fake=1} 0.1232639  0.9861111 0.1250000 1.972222    71\n[12] {private=0,                                                                                    \n      posts=[0,1)}                         => {fake=1} 0.1770833  0.9807692 0.1805556 1.961538   102\n[13] {description_length=[0,5),                                                                     \n      posts=[0,1)}                         => {fake=1} 0.2569444  0.9801325 0.2621528 1.960265   148\n[14] {posts=[0,1)}                         => {fake=1} 0.2656250  0.9745223 0.2725694 1.949045   153\n[15] {nums.length_username=[0.368,0.552),                                                           \n      fullname_words=[1,2)}                => {fake=1} 0.1006944  0.9666667 0.1041667 1.933333    58\n[16] {nums.length_username=[0.368,0.552)}  => {fake=1} 0.1232639  0.9594595 0.1284722 1.918919    71\n[17] {nums.length_username=[0.184,0.368),                                                           \n      fullname_words=[1,2),                                                                         \n      description_length=[0,5)}            => {fake=1} 0.1041667  0.9523810 0.1093750 1.904762    60\n[18] {fullname_words=[1,2),                                                                         \n      follows=[26,71)}                     => {fake=1} 0.1006944  0.9508197 0.1059028 1.901639    58\n[19] {description_length=[0,5),                                                                     \n      follows=[0,26)}                      => {fake=1} 0.1145833  0.9428571 0.1215278 1.885714    66\n[20] {nums.length_username=[0.184,0.368),                                                           \n      fullname_words=[1,2)}                => {fake=1} 0.1163194  0.9178082 0.1267361 1.835616    67\n[21] {external_URL=0,                                                                               \n      follows=[0,26)}                      => {fake=1} 0.1215278  0.9090909 0.1336806 1.818182    70\n```\n:::\n:::\n\n\nY para cuentas verdaderas:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreglas_verdaderas <- subset(reglas, subset = rhs %in% \"fake=0\")\nlength(reglas_verdaderas)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 29\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ninspect(reglas_verdaderas)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     lhs                                  rhs        support confidence  coverage     lift count\n[1]  {external_URL=1}                  => {fake=0} 0.1163194  1.0000000 0.1163194 2.000000    67\n[2]  {fullname_words=[2,12],                                                                    \n      posts=[187,7.39e+03]}            => {fake=0} 0.1006944  1.0000000 0.1006944 2.000000    58\n[3]  {private=0,                                                                                \n      posts=[187,7.39e+03]}            => {fake=0} 0.1180556  1.0000000 0.1180556 2.000000    68\n[4]  {nums.length_username=[0,0.184),                                                           \n      posts=[187,7.39e+03]}            => {fake=0} 0.1336806  1.0000000 0.1336806 2.000000    77\n[5]  {profile_pic=1,                                                                            \n      nums.length_username=[0,0.184),                                                           \n      fullname_words=[2,12],                                                                    \n      nums.length_fullname=[0,0.2),                                                             \n      private=1}                       => {fake=0} 0.1128472  1.0000000 0.1128472 2.000000    65\n[6]  {posts=[187,7.39e+03]}            => {fake=0} 0.1423611  0.9879518 0.1440972 1.975904    82\n[7]  {profile_pic=1,                                                                            \n      nums.length_username=[0,0.184),                                                           \n      fullname_words=[2,12],                                                                    \n      private=1}                       => {fake=0} 0.1145833  0.9850746 0.1163194 1.970149    66\n[8]  {profile_pic=1,                                                                            \n      fullname_words=[2,12],                                                                    \n      description_length=[43,150]}     => {fake=0} 0.1354167  0.9750000 0.1388889 1.950000    78\n[9]  {nums.length_username=[0,0.184),                                                           \n      fullname_words=[2,12],                                                                    \n      description_length=[43,150]}     => {fake=0} 0.1267361  0.9733333 0.1302083 1.946667    73\n[10] {profile_pic=1,                                                                            \n      fullname_words=[2,12],                                                                    \n      nums.length_fullname=[0,0.2),                                                             \n      private=1}                       => {fake=0} 0.1163194  0.9710145 0.1197917 1.942029    67\n[11] {fullname_words=[2,12],                                                                    \n      description_length=[43,150],                                                              \n      private=0}                       => {fake=0} 0.1041667  0.9677419 0.1076389 1.935484    60\n[12] {profile_pic=1,                                                                            \n      nums.length_username=[0,0.184),                                                           \n      follows=[521,904)}               => {fake=0} 0.1006944  0.9666667 0.1041667 1.933333    58\n[13] {fullname_words=[2,12],                                                                    \n      description_length=[43,150]}     => {fake=0} 0.1354167  0.9629630 0.1406250 1.925926    78\n[14] {profile_pic=1,                                                                            \n      fullname_words=[2,12],                                                                    \n      private=1}                       => {fake=0} 0.1180556  0.9577465 0.1232639 1.915493    68\n[15] {profile_pic=1,                                                                            \n      nums.length_username=[0,0.184),                                                           \n      name..username=0,                                                                         \n      description_length=[5,43)}       => {fake=0} 0.1406250  0.9529412 0.1475694 1.905882    81\n[16] {nums.length_username=[0,0.184),                                                           \n      posts=[63.7,187)}                => {fake=0} 0.1215278  0.9459459 0.1284722 1.891892    70\n[17] {profile_pic=1,                                                                            \n      nums.length_username=[0,0.184),                                                           \n      fullname_words=[2,12],                                                                    \n      nums.length_fullname=[0,0.2)}    => {fake=0} 0.2951389  0.9444444 0.3125000 1.888889   170\n[18] {profile_pic=1,                                                                            \n      nums.length_username=[0,0.184),                                                           \n      description_length=[5,43)}       => {fake=0} 0.1406250  0.9418605 0.1493056 1.883721    81\n[19] {profile_pic=1,                                                                            \n      nums.length_username=[0,0.184),                                                           \n      fullname_words=[2,12]}           => {fake=0} 0.2968750  0.9395604 0.3159722 1.879121   171\n[20] {nums.length_username=[0,0.184),                                                           \n      description_length=[43,150],                                                              \n      private=0}                       => {fake=0} 0.1284722  0.9367089 0.1371528 1.873418    74\n[21] {nums.length_username=[0,0.184),                                                           \n      description_length=[43,150]}     => {fake=0} 0.1718750  0.9339623 0.1840278 1.867925    99\n[22] {nums.length_username=[0,0.184),                                                           \n      name..username=0,                                                                         \n      description_length=[5,43)}       => {fake=0} 0.1440972  0.9325843 0.1545139 1.865169    83\n[23] {description_length=[43,150],                                                              \n      private=0}                       => {fake=0} 0.1406250  0.9310345 0.1510417 1.862069    81\n[24] {nums.length_username=[0,0.184),                                                           \n      description_length=[5,43)}       => {fake=0} 0.1440972  0.9222222 0.1562500 1.844444    83\n[25] {nums.length_username=[0,0.184),                                                           \n      fullname_words=[2,12],                                                                    \n      nums.length_fullname=[0,0.2),                                                             \n      private=1}                       => {fake=0} 0.1128472  0.9154930 0.1232639 1.830986    65\n[26] {profile_pic=1,                                                                            \n      description_length=[43,150]}     => {fake=0} 0.1857639  0.9145299 0.2031250 1.829060   107\n[27] {profile_pic=1,                                                                            \n      nums.length_fullname=[0,0.2),                                                             \n      follows=[521,904)}               => {fake=0} 0.1041667  0.9090909 0.1145833 1.818182    60\n[28] {nums.length_fullname=[0,0.2),                                                             \n      description_length=[43,150]}     => {fake=0} 0.1805556  0.9043478 0.1996528 1.808696   104\n[29] {nums.length_username=[0,0.184),                                                           \n      fullname_words=[2,12],                                                                    \n      private=1}                       => {fake=0} 0.1145833  0.9041096 0.1267361 1.808219    66\n```\n:::\n:::\n\n\nComo podemos observar, han quedado 21 reglas con fake=1 en el consecuente (cuentas falsas), y 29 reglas con fake=0 en el consecuente (cuentas verdaderas). Para analizar algunas reglas interesantes, primero combinemos ambos conjuntos de reglas:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Combinar ambas selecciones\nreglas_fake_verdaderas <- c(reglas_fake, reglas_verdaderas)\nlength(reglas_fake_verdaderas)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 50\n```\n:::\n:::\n\n\nPor la longitud, sabemos que la combinación de las reglas ha sido exitosa. Ahora sí, analicemos las reglas.\n\nEn primer lugar, veamos si existen reglas con una sola variable en el antecedente:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreglas_fv_1left <- subset(reglas_fake_verdaderas, size(lhs) == 1)\nlength(reglas_fv_1left)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nreglas_fv_1left <- sort(reglas_fv_1left, by=\"confidence\")\ninspect(reglas_fv_1left)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    lhs                                     rhs      support   confidence\n[1] {external_URL=1}                     => {fake=0} 0.1163194 1.0000000 \n[2] {profile_pic=0}                      => {fake=1} 0.2951389 0.9883721 \n[3] {posts=[187,7.39e+03]}               => {fake=0} 0.1423611 0.9879518 \n[4] {posts=[0,1)}                        => {fake=1} 0.2656250 0.9745223 \n[5] {nums.length_username=[0.368,0.552)} => {fake=1} 0.1232639 0.9594595 \n    coverage  lift     count\n[1] 0.1163194 2.000000  67  \n[2] 0.2986111 1.976744 170  \n[3] 0.1440972 1.975904  82  \n[4] 0.2725694 1.949045 153  \n[5] 0.1284722 1.918919  71  \n```\n:::\n:::\n\n\nComentemos las reglas obtenidas:\n\n1.  Como vemos, sólo una de estas reglas posee plena confianza, y, de hecho, la conocíamos con anterioridad: ya dijimos que, en este dataset, no había cuentas falsas con URL externa. Por lo tanto, si una cuenta tiene URL externa, será verdadera.\n\n2.  También mencionamos que la ausencia de foto de perfil llevaba a pensar en una cuenta falsa. Ahora lo podemos afirmar con una confianza del 98,83%.\n\n3.  Otra conclusión ya vista es la de que un número alto de publicaciones normalmente conduce a una cuenta verdadera. La confianza cuando el valor de publicaciones está entre 188 y 7390 (es el intervalo más alto) es del 98,79%.\n\n4.  Al igual que con la foto de perfil, la ausencia de publicaciones llevaba a pensar en cuentas falsas. En este caso, el intervalo es de 0-1 publicaciones, y nos garantiza falsedad de la cuenta en el 97,45% de los casos.\n\n5.  Esta regla es algo más extraña. El intervalo intermedio de valores del ratio de números en la longitud del username indica que la cuenta es falsa con confianza del 95%. Ya vimos, en la visualización, que los valores altos de esta variable aparecían en las cuentas falsas, con lo que probablemente los intervalos superiores aparecerán en los conjuntos de reglas con más de una variable en el antecedente.\n\nA continuación veremos todas estas reglas, y comentaremos las más llamativas:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreglas_fake_verdaderas <- sort(reglas_fake_verdaderas, by=\"confidence\")\ninspect(reglas_fake_verdaderas)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     lhs                                      rhs        support confidence  coverage     lift count\n[1]  {nums.length_username=[0.368,0.552),                                                           \n      description_length=[0,5)}            => {fake=1} 0.1163194  1.0000000 0.1163194 2.000000    67\n[2]  {profile_pic=0,                                                                                \n      follows=[0,26)}                      => {fake=1} 0.1041667  1.0000000 0.1041667 2.000000    60\n[3]  {profile_pic=0,                                                                                \n      posts=[0,1)}                         => {fake=1} 0.2152778  1.0000000 0.2152778 2.000000   124\n[4]  {profile_pic=0,                                                                                \n      description_length=[0,5)}            => {fake=1} 0.2847222  1.0000000 0.2847222 2.000000   164\n[5]  {profile_pic=0,                                                                                \n      private=0}                           => {fake=1} 0.2100694  1.0000000 0.2100694 2.000000   121\n[6]  {fullname_words=[1,2),                                                                         \n      description_length=[0,5),                                                                     \n      posts=[0,1)}                         => {fake=1} 0.1875000  1.0000000 0.1875000 2.000000   108\n[7]  {fullname_words=[1,2),                                                                         \n      private=0,                                                                                    \n      posts=[0,1)}                         => {fake=1} 0.1284722  1.0000000 0.1284722 2.000000    74\n[8]  {external_URL=1}                      => {fake=0} 0.1163194  1.0000000 0.1163194 2.000000    67\n[9]  {fullname_words=[2,12],                                                                        \n      posts=[187,7.39e+03]}                => {fake=0} 0.1006944  1.0000000 0.1006944 2.000000    58\n[10] {private=0,                                                                                    \n      posts=[187,7.39e+03]}                => {fake=0} 0.1180556  1.0000000 0.1180556 2.000000    68\n[11] {nums.length_username=[0,0.184),                                                               \n      posts=[187,7.39e+03]}                => {fake=0} 0.1336806  1.0000000 0.1336806 2.000000    77\n[12] {profile_pic=1,                                                                                \n      nums.length_username=[0,0.184),                                                               \n      fullname_words=[2,12],                                                                        \n      nums.length_fullname=[0,0.2),                                                                 \n      private=1}                           => {fake=0} 0.1128472  1.0000000 0.1128472 2.000000    65\n[13] {profile_pic=0,                                                                                \n      fullname_words=[1,2)}                => {fake=1} 0.2239583  0.9923077 0.2256944 1.984615   129\n[14] {fullname_words=[1,2),                                                                         \n      posts=[0,1)}                         => {fake=1} 0.1927083  0.9910714 0.1944444 1.982143   111\n[15] {profile_pic=0}                       => {fake=1} 0.2951389  0.9883721 0.2986111 1.976744   170\n[16] {posts=[187,7.39e+03]}                => {fake=0} 0.1423611  0.9879518 0.1440972 1.975904    82\n[17] {nums.length_username=[0.368,0.552),                                                           \n      external_URL=0}                      => {fake=1} 0.1232639  0.9861111 0.1250000 1.972222    71\n[18] {profile_pic=1,                                                                                \n      nums.length_username=[0,0.184),                                                               \n      fullname_words=[2,12],                                                                        \n      private=1}                           => {fake=0} 0.1145833  0.9850746 0.1163194 1.970149    66\n[19] {private=0,                                                                                    \n      posts=[0,1)}                         => {fake=1} 0.1770833  0.9807692 0.1805556 1.961538   102\n[20] {description_length=[0,5),                                                                     \n      posts=[0,1)}                         => {fake=1} 0.2569444  0.9801325 0.2621528 1.960265   148\n[21] {profile_pic=1,                                                                                \n      fullname_words=[2,12],                                                                        \n      description_length=[43,150]}         => {fake=0} 0.1354167  0.9750000 0.1388889 1.950000    78\n[22] {posts=[0,1)}                         => {fake=1} 0.2656250  0.9745223 0.2725694 1.949045   153\n[23] {nums.length_username=[0,0.184),                                                               \n      fullname_words=[2,12],                                                                        \n      description_length=[43,150]}         => {fake=0} 0.1267361  0.9733333 0.1302083 1.946667    73\n[24] {profile_pic=1,                                                                                \n      fullname_words=[2,12],                                                                        \n      nums.length_fullname=[0,0.2),                                                                 \n      private=1}                           => {fake=0} 0.1163194  0.9710145 0.1197917 1.942029    67\n[25] {fullname_words=[2,12],                                                                        \n      description_length=[43,150],                                                                  \n      private=0}                           => {fake=0} 0.1041667  0.9677419 0.1076389 1.935484    60\n[26] {nums.length_username=[0.368,0.552),                                                           \n      fullname_words=[1,2)}                => {fake=1} 0.1006944  0.9666667 0.1041667 1.933333    58\n[27] {profile_pic=1,                                                                                \n      nums.length_username=[0,0.184),                                                               \n      follows=[521,904)}                   => {fake=0} 0.1006944  0.9666667 0.1041667 1.933333    58\n[28] {fullname_words=[2,12],                                                                        \n      description_length=[43,150]}         => {fake=0} 0.1354167  0.9629630 0.1406250 1.925926    78\n[29] {nums.length_username=[0.368,0.552)}  => {fake=1} 0.1232639  0.9594595 0.1284722 1.918919    71\n[30] {profile_pic=1,                                                                                \n      fullname_words=[2,12],                                                                        \n      private=1}                           => {fake=0} 0.1180556  0.9577465 0.1232639 1.915493    68\n[31] {profile_pic=1,                                                                                \n      nums.length_username=[0,0.184),                                                               \n      name..username=0,                                                                             \n      description_length=[5,43)}           => {fake=0} 0.1406250  0.9529412 0.1475694 1.905882    81\n[32] {nums.length_username=[0.184,0.368),                                                           \n      fullname_words=[1,2),                                                                         \n      description_length=[0,5)}            => {fake=1} 0.1041667  0.9523810 0.1093750 1.904762    60\n[33] {fullname_words=[1,2),                                                                         \n      follows=[26,71)}                     => {fake=1} 0.1006944  0.9508197 0.1059028 1.901639    58\n[34] {nums.length_username=[0,0.184),                                                               \n      posts=[63.7,187)}                    => {fake=0} 0.1215278  0.9459459 0.1284722 1.891892    70\n[35] {profile_pic=1,                                                                                \n      nums.length_username=[0,0.184),                                                               \n      fullname_words=[2,12],                                                                        \n      nums.length_fullname=[0,0.2)}        => {fake=0} 0.2951389  0.9444444 0.3125000 1.888889   170\n[36] {description_length=[0,5),                                                                     \n      follows=[0,26)}                      => {fake=1} 0.1145833  0.9428571 0.1215278 1.885714    66\n[37] {profile_pic=1,                                                                                \n      nums.length_username=[0,0.184),                                                               \n      description_length=[5,43)}           => {fake=0} 0.1406250  0.9418605 0.1493056 1.883721    81\n[38] {profile_pic=1,                                                                                \n      nums.length_username=[0,0.184),                                                               \n      fullname_words=[2,12]}               => {fake=0} 0.2968750  0.9395604 0.3159722 1.879121   171\n[39] {nums.length_username=[0,0.184),                                                               \n      description_length=[43,150],                                                                  \n      private=0}                           => {fake=0} 0.1284722  0.9367089 0.1371528 1.873418    74\n[40] {nums.length_username=[0,0.184),                                                               \n      description_length=[43,150]}         => {fake=0} 0.1718750  0.9339623 0.1840278 1.867925    99\n[41] {nums.length_username=[0,0.184),                                                               \n      name..username=0,                                                                             \n      description_length=[5,43)}           => {fake=0} 0.1440972  0.9325843 0.1545139 1.865169    83\n[42] {description_length=[43,150],                                                                  \n      private=0}                           => {fake=0} 0.1406250  0.9310345 0.1510417 1.862069    81\n[43] {nums.length_username=[0,0.184),                                                               \n      description_length=[5,43)}           => {fake=0} 0.1440972  0.9222222 0.1562500 1.844444    83\n[44] {nums.length_username=[0.184,0.368),                                                           \n      fullname_words=[1,2)}                => {fake=1} 0.1163194  0.9178082 0.1267361 1.835616    67\n[45] {nums.length_username=[0,0.184),                                                               \n      fullname_words=[2,12],                                                                        \n      nums.length_fullname=[0,0.2),                                                                 \n      private=1}                           => {fake=0} 0.1128472  0.9154930 0.1232639 1.830986    65\n[46] {profile_pic=1,                                                                                \n      description_length=[43,150]}         => {fake=0} 0.1857639  0.9145299 0.2031250 1.829060   107\n[47] {external_URL=0,                                                                               \n      follows=[0,26)}                      => {fake=1} 0.1215278  0.9090909 0.1336806 1.818182    70\n[48] {profile_pic=1,                                                                                \n      nums.length_fullname=[0,0.2),                                                                 \n      follows=[521,904)}                   => {fake=0} 0.1041667  0.9090909 0.1145833 1.818182    60\n[49] {nums.length_fullname=[0,0.2),                                                                 \n      description_length=[43,150]}         => {fake=0} 0.1805556  0.9043478 0.1996528 1.808696   104\n[50] {nums.length_username=[0,0.184),                                                               \n      fullname_words=[2,12],                                                                        \n      private=1}                           => {fake=0} 0.1145833  0.9041096 0.1267361 1.808219    66\n```\n:::\n:::\n\n\nPara extraer las conclusiones generales de estas 50 reglas, analicemos la frecuencia de aparición de los antecedentes, empezando con las cuentas falsas:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Seleccionar reglas donde rhs es \"fake=1\"\nreglas_fake_rhs <- subset(reglas, subset = rhs %in% \"fake=1\")\n\n# Convertir los antecedentes a una lista\nantecedentes_lista_f <- as(lhs(reglas_fake_rhs), \"list\")\n\n# Crear una tabla de frecuencias\nfrecuencia_ant_f <- table(unlist(antecedentes_lista_f))\n\n# Ordenar la tabla de frecuencias de forma descendente\nfrecuencia_ant_f_ordenada <- sort(frecuencia_ant_f, decreasing = TRUE)\n\nfrecuencia_ant_f_ordenada\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n              fullname_words=[1,2)                        posts=[0,1) \n                                 8                                  7 \n          description_length=[0,5)                      profile_pic=0 \n                                 6                                  6 \nnums.length_username=[0.368,0.552)                     follows=[0,26) \n                                 4                                  3 \n                         private=0                     external_URL=0 \n                                 3                                  2 \nnums.length_username=[0.184,0.368)                    follows=[26,71) \n                                 2                                  1 \n```\n:::\n:::\n\n\nPodemos afirmar con una seguridad considerable que una cuenta es falsa cuando identificamos ciertas combinaciones de estas características:\n\n-   Pocas palabras en el nombre completo\n-   Pocas o nulas publicaciones\n-   Descripción vacía o muy breve\n-   Ausencia de foto de perfil\n-   Ratio de números en la longitud del username entre 0,184 y 0,552\n-   Pocos o nulos seguidos\n-   Cuenta pública\n-   Ausencia de URL externa\n\nAhora veamos la frecuencia de aparición de los antecedentes para cuentas verdaderas:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Seleccionar reglas donde rhs es \"fake=0\"\nreglas_verdaderas_rhs <- subset(reglas, subset = rhs %in% \"fake=0\")\n\n# Convertir los antecedentes a una lista\nantecedentes_lista_v <- as(lhs(reglas_verdaderas_rhs), \"list\")\n\n# Crear una tabla de frecuencias\nfrecuencia_ant_v <- table(unlist(antecedentes_lista_v))\n\n# Ordenar la tabla de frecuencias de forma descendente\nfrecuencia_ant_v_ordenada <- sort(frecuencia_ant_v, decreasing = TRUE)\n\nfrecuencia_ant_v_ordenada\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nnums.length_username=[0,0.184)          fullname_words=[2,12] \n                            16                             13 \n                 profile_pic=1    description_length=[43,150] \n                            12                              9 \n  nums.length_fullname=[0,0.2)                      private=1 \n                             6                              6 \n     description_length=[5,43)           posts=[187,7.39e+03] \n                             4                              4 \n                     private=0              follows=[521,904) \n                             4                              2 \n              name..username=0                 external_URL=1 \n                             2                              1 \n              posts=[63.7,187) \n                             1 \n```\n:::\n:::\n\n\nPodemos afirmar con una seguridad considerable que una cuenta es verdadera cuando identificamos ciertas combinaciones de estas características:\n\n-   Ratio de números en la longitud del username entre 0 y 0,184\n-   Cantidad considerable de palabras en el nombre completo\n-   Presencia de foto de perfil\n-   Descripción detallada\n-   Ratio de números en la longitud del nombre completo entre 0 y 0,2\n-   Cuenta privada \\*\n-   Número alto de publicaciones\n-   Cuenta pública \\*\n-   Número alto de seguidos\n-   Ausencia de coincidencia entre nombre completo y nombre de usuario\n-   Presencia de URL externa\n\nSorprende la ausencia en los antecedentes del número alto de seguidores.\n\n-   \\* Nota: es un ejemplo de variable que por sí sola no decide nada, pero que combinada con otras puede dar lugar a una conclusión o a otra. Recomiendo fijarse en la variable private en las siguientes reglas:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninspect(c(reglas_fake_verdaderas[5], reglas_fake_verdaderas[10], reglas_fake_verdaderas[18]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    lhs                                  rhs        support confidence  coverage     lift count\n[1] {profile_pic=0,                                                                            \n     private=0}                       => {fake=1} 0.2100694  1.0000000 0.2100694 2.000000   121\n[2] {private=0,                                                                                \n     posts=[187,7.39e+03]}            => {fake=0} 0.1180556  1.0000000 0.1180556 2.000000    68\n[3] {profile_pic=1,                                                                            \n     nums.length_username=[0,0.184),                                                           \n     fullname_words=[2,12],                                                                    \n     private=1}                       => {fake=0} 0.1145833  0.9850746 0.1163194 1.970149    66\n```\n:::\n:::\n\n\n### Predicción\n\nUna vez llegados aquí, habiendo analizado las reglas de asociación del dataset de entrenamiento, es momento de probar la calidad de las reglas con el dataset de test.\n\nDebemos comenzar discretizando los valores del dataset de test con los mismos intervalos que usamos en el dataset de entrenamiento, ya que las reglas que vamos a usar poseen estos intervalos:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convertir dataset de test a data frame\ndatos_testDF <- data.frame(datos_test)\n\nView(datos_test)\n\n# Guardar la columna fake en una variable aparte, para poder compararla al final con la predicción\nfake_originales <- datos_testDF$fake\n\n# Eliminar la columna fake\ndatos_testDF$fake <- NULL\n\nView(datos_testDF)\n\n# Discretizar columnas numéricas con los mismos intervalos que en el dataset de entrenamiento\n\n# Iterar sobre cada fila de datos_testDF\nfor (i in 1:nrow(datos_testDF)) {\n  # Para nums.length_username\n  if (datos_testDF[i, \"nums.length_username\"] < 0.184) {\n    datos_testDF[i, \"nums.length_username\"] <- \"[0,0.184)\"\n  } else if (datos_testDF[i, \"nums.length_username\"] < 0.368) {\n    datos_testDF[i, \"nums.length_username\"] <- \"[0.184,0.368)\"\n  } else if (datos_testDF[i, \"nums.length_username\"] < 0.552) {\n    datos_testDF[i, \"nums.length_username\"] <- \"[0.368,0.552)\"\n  } else if (datos_testDF[i, \"nums.length_username\"] < 0.736) {\n    datos_testDF[i, \"nums.length_username\"] <- \"[0.552,0.736)\"\n  } else {\n    datos_testDF[i, \"nums.length_username\"] <- \"[0.736,0.92]\"\n  }\n\n  # Para fullname_words\n  if (datos_testDF[i, \"fullname_words\"] < 1) {\n    datos_testDF[i, \"fullname_words\"] <- \"[0,1)\"\n  } else if (datos_testDF[i, \"fullname_words\"] < 2) {\n    datos_testDF[i, \"fullname_words\"] <- \"[1,2)\"\n  } else {\n    datos_testDF[i, \"fullname_words\"] <- \"[2,12]\"\n  }\n  \n  # Para nums.length_fullname\n  if (datos_testDF[i, \"nums.length_fullname\"] < 0.2) {\n    datos_testDF[i, \"nums.length_fullname\"] <- \"[0,0.2)\"\n  } else if (datos_testDF[i, \"nums.length_fullname\"] < 0.4) {\n    datos_testDF[i, \"nums.length_fullname\"] <- \"[0.2,0.4)\"\n  } else if (datos_testDF[i, \"nums.length_fullname\"] < 0.6) {\n    datos_testDF[i, \"nums.length_fullname\"] <- \"[0.4,0.6)\"\n  } else if (datos_testDF[i, \"nums.length_fullname\"] < 0.8) {\n    datos_testDF[i, \"nums.length_fullname\"] <- \"[0.6,0.8)\"\n  } else {\n    datos_testDF[i, \"nums.length_fullname\"] <- \"[0.8,1]\"\n  }\n  \n  # Para description_length\n  if (datos_testDF[i, \"description_length\"] < 5) {\n    datos_testDF[i, \"description_length\"] <- \"[0,5)\"\n  } else if (datos_testDF[i, \"description_length\"] < 43) {\n    datos_testDF[i, \"description_length\"] <- \"[5,43)\"\n  } else {\n    datos_testDF[i, \"description_length\"] <- \"[43,150]\"\n  }\n  \n  # Para posts\n  if (datos_testDF[i, \"posts\"] < 1) {\n    datos_testDF[i, \"posts\"] <- \"[0,1)\"\n  } else if (datos_testDF[i, \"posts\"] < 5) {\n    datos_testDF[i, \"posts\"] <- \"[1,5)\"\n  } else if (datos_testDF[i, \"posts\"] < 17.6) {\n    datos_testDF[i, \"posts\"] <- \"[5,17.6)\"\n  } else if (datos_testDF[i, \"posts\"] < 63.7) {\n    datos_testDF[i, \"posts\"] <- \"[17.6,63.7)\"\n  } else if (datos_testDF[i, \"posts\"] < 187) {\n    datos_testDF[i, \"posts\"] <- \"[63.7,187)\"\n  } else {\n    datos_testDF[i, \"posts\"] <- \"[187,7.39e+03]\"\n  }\n  \n  # Para followers\n  if (datos_testDF[i, \"followers\"] < 10.5) {\n    datos_testDF[i, \"followers\"] <- \"[0,10.5)\"\n  } else if (datos_testDF[i, \"followers\"] < 26) {\n    datos_testDF[i, \"followers\"] <- \"[10.5,26)\"\n  } else if (datos_testDF[i, \"followers\"] < 49) {\n    datos_testDF[i, \"followers\"] <- \"[26,49)\"\n  } else if (datos_testDF[i, \"followers\"] < 78) {\n    datos_testDF[i, \"followers\"] <- \"[49,78)\"\n  } else if (datos_testDF[i, \"followers\"] < 150) {\n    datos_testDF[i, \"followers\"] <- \"[78,150)\"\n  } else if (datos_testDF[i, \"followers\"] < 271) {\n    datos_testDF[i, \"followers\"] <- \"[150,271)\"\n  } else if (datos_testDF[i, \"followers\"] < 496) {\n    datos_testDF[i, \"followers\"] <- \"[271,496)\"\n  } else if (datos_testDF[i, \"followers\"] < 916) {\n    datos_testDF[i, \"followers\"] <- \"[496,916)\"\n  } else if (datos_testDF[i, \"followers\"] < 2580) {\n    datos_testDF[i, \"followers\"] <- \"[916,2.58e+03)\"\n  } else {\n    datos_testDF[i, \"followers\"] <- \"[2.58e+03,1.53e+07]\"\n  }\n  \n  # Para follows\n  if (datos_testDF[i, \"follows\"] < 26) {\n    datos_testDF[i, \"follows\"] <- \"[0,26)\"\n  } else if (datos_testDF[i, \"follows\"] < 71) {\n    datos_testDF[i, \"follows\"] <- \"[26,71)\"\n  } else if (datos_testDF[i, \"follows\"] < 159) {\n    datos_testDF[i, \"follows\"] <- \"[71,159)\"\n  } else if (datos_testDF[i, \"follows\"] < 322) {\n    datos_testDF[i, \"follows\"] <- \"[159,322)\"\n  } else if (datos_testDF[i, \"follows\"] < 521) {\n    datos_testDF[i, \"follows\"] <- \"[322,521)\"\n  } else if (datos_testDF[i, \"follows\"] < 904) {\n    datos_testDF[i, \"follows\"] <- \"[521,904)\"\n  } else {\n    datos_testDF[i, \"follows\"] <- \"[904,7.5e+03]\"\n  }\n  \n}\n\n# Concertir las columnas no binarias (las que ahora tienen intervalos) a tipo factor\ncolumnas_intervalo <- c(\"nums.length_username\", \"fullname_words\", \"nums.length_fullname\", \"description_length\", \"posts\", \"followers\", \"follows\")\ndatos_testDF[, columnas_intervalo] <- lapply(datos_testDF[, columnas_intervalo], factor)\n\n# Convertir columnas binarias a factor\ncolumnas_binarias <- c(1, 5, 7, 8)\ndatos_testDF[, columnas_binarias] <- lapply(datos_testDF[, columnas_binarias], factor)\n\n# Ver datos_testDF después de la conversión\nhead(datos_testDF)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  profile_pic nums.length_username fullname_words nums.length_fullname\n1           1        [0.184,0.368)          [1,2)            [0.2,0.4)\n2           1            [0,0.184)         [2,12]              [0,0.2)\n3           1            [0,0.184)         [2,12]              [0,0.2)\n4           1            [0,0.184)          [1,2)              [0,0.2)\n5           1        [0.368,0.552)          [1,2)              [0,0.2)\n6           1            [0,0.184)          [1,2)              [0,0.2)\n  name..username description_length external_URL private       posts followers\n1              1             [5,43)            0       1 [17.6,63.7) [271,496)\n2              0           [43,150]            0       1       [1,5)   [26,49)\n3              0           [43,150]            0       1       [1,5)   [26,49)\n4              0              [0,5)            0       1       [1,5) [10.5,26)\n5              0           [43,150]            0       1 [17.6,63.7) [10.5,26)\n6              0              [0,5)            0       1 [17.6,63.7)   [26,49)\n    follows\n1 [521,904)\n2   [26,71)\n3   [26,71)\n4 [521,904)\n5   [26,71)\n6   [26,71)\n```\n:::\n:::\n\n\nComo vemos, todas las variables numéricas han pasado a tener datos de intervalo, y todas las columnas han pasado a ser de tipo factor.\n\nAhora toca aplicar las reglas a los datos de test, y realizar la predicción:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convertir datos_test a transacciones\nTdatos_test <- as(datos_testDF, \"transactions\")\n\n# Crear una columna vacía para las predicciones\ndatos_testDF$fake_predict_RA <- NA\n\n# Aplicar las reglas a cada transacción en datos_test\nfor (i in 1:length(Tdatos_test)) {\n  # Obtener la transacción de esa fila\n  trans <- Tdatos_test[i]\n  \n  # Evaluar las reglas con el antecedente correspondiente: si el antecedente es subconjunto de la transacción actual, asignar el consecuente de la primera regla que lo cumpla (están ordenadas por confidence) a 'fake_predict_RA'\n  matches <- is.subset(lhs(reglas_fake_verdaderas), trans)\n  \n  # Si alguna regla se cumple, asignar el consecuente correspondiente a 'fake_predict_RA'\n  if (any(matches)) {\n    # Obtener el consecuente de la primera regla que se cumple\n    matching_rule <- reglas_fake_verdaderas[which(matches)[1]]\n    fake_value <- labels(rhs(matching_rule))[1]\n    \n    # Asignar el valor predicho\n    datos_testDF$fake_predict_RA[i] <- sub(\"fake=\", \"\", fake_value)\n  }\n  \n  # Si ninguna regla cuenta con un antecedente que sea subconjunto de la transacción actual, realizar una heurística (árbol de decisión) con las conclusiones extraídas de las reglas\n  else {\n    # Si la cuenta tiene URL externa, es verdadera\n    if (datos_test$external_URL[i] == 1) {\n      datos_testDF$fake_predict_RA[i] <- 0\n      # Si la cuenta no tiene foto de perfil, es falsa\n    } else if (datos_test$profile_pic[i] == 0) {\n      datos_testDF$fake_predict_RA[i] <- 1\n      # Si la cuenta tiene menos de 250 seguido, es falsa\n    } else if (datos_test$followers[i] < 250) {\n      datos_testDF$fake_predict_RA[i] <- 1\n      # En otro caso, consideramos que es verdadera\n    } else {\n      datos_testDF$fake_predict_RA[i] <- 0\n    }\n  }\n}\n```\n:::\n\n\nEchemos un vistazo a las primeras filas de datos_testDF para comprobar que la predicción se ha realizado correctamente:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Mostrar las primeras filas de datos_testDF\nhead(datos_testDF)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  profile_pic nums.length_username fullname_words nums.length_fullname\n1           1        [0.184,0.368)          [1,2)            [0.2,0.4)\n2           1            [0,0.184)         [2,12]              [0,0.2)\n3           1            [0,0.184)         [2,12]              [0,0.2)\n4           1            [0,0.184)          [1,2)              [0,0.2)\n5           1        [0.368,0.552)          [1,2)              [0,0.2)\n6           1            [0,0.184)          [1,2)              [0,0.2)\n  name..username description_length external_URL private       posts followers\n1              1             [5,43)            0       1 [17.6,63.7) [271,496)\n2              0           [43,150]            0       1       [1,5)   [26,49)\n3              0           [43,150]            0       1       [1,5)   [26,49)\n4              0              [0,5)            0       1       [1,5) [10.5,26)\n5              0           [43,150]            0       1 [17.6,63.7) [10.5,26)\n6              0              [0,5)            0       1 [17.6,63.7)   [26,49)\n    follows fake_predict_RA\n1 [521,904)             {1}\n2   [26,71)             {0}\n3   [26,71)             {0}\n4 [521,904)             {0}\n5   [26,71)             {1}\n6   [26,71)             {1}\n```\n:::\n\n```{.r .cell-code}\n#View(datos_testDF)\n```\n:::\n\n\nVemos que hay predicciones en la columna fake_predict_RA, aunque muchas de ellas (haciendo el View) contienen caracteres '{' y '}'. Deshagámonos de ellos y convirtamos la columna a numérica para poder compararla con la columna fake original:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convertir datos_testDF$fake_predict_RA para eliminar los caracteres '{' y '}'\ndatos_testDF$fake_predict_RA <- gsub(\"\\\\{|\\\\}\", \"\", datos_testDF$fake_predict_RA)\n\n# Convertir datos_testDF$fake_predict_RA a numérico\ndatos_testDF$fake_predict_RA <- as.numeric(datos_testDF$fake_predict_RA)\n\n# Mostrar las primeras filas de datos_testDF\nhead(datos_testDF)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  profile_pic nums.length_username fullname_words nums.length_fullname\n1           1        [0.184,0.368)          [1,2)            [0.2,0.4)\n2           1            [0,0.184)         [2,12]              [0,0.2)\n3           1            [0,0.184)         [2,12]              [0,0.2)\n4           1            [0,0.184)          [1,2)              [0,0.2)\n5           1        [0.368,0.552)          [1,2)              [0,0.2)\n6           1            [0,0.184)          [1,2)              [0,0.2)\n  name..username description_length external_URL private       posts followers\n1              1             [5,43)            0       1 [17.6,63.7) [271,496)\n2              0           [43,150]            0       1       [1,5)   [26,49)\n3              0           [43,150]            0       1       [1,5)   [26,49)\n4              0              [0,5)            0       1       [1,5) [10.5,26)\n5              0           [43,150]            0       1 [17.6,63.7) [10.5,26)\n6              0              [0,5)            0       1 [17.6,63.7)   [26,49)\n    follows fake_predict_RA\n1 [521,904)               1\n2   [26,71)               0\n3   [26,71)               0\n4 [521,904)               0\n5   [26,71)               1\n6   [26,71)               1\n```\n:::\n:::\n\n\nMisión cumplida. Ahora, revisemos si hay valores NA en esa columna:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Contar los valores NA de la columna fake_predict_RA\ncat(\"fake_predict_RA tiene \", sum(is.na(datos_testDF$fake_predict_RA)), \" valores NA.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfake_predict_RA tiene  0  valores NA.\n```\n:::\n:::\n\n\nParece que todo va bien. Creemos un nuevo dataset únicamente formado por las predicciones y el valor real de falsedad:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndatos_test_predicciones <- data.frame(fake = fake_originales, fake_predict_RA = datos_testDF$fake_predict_RA)\nView(datos_test_predicciones)\n# Guardar el data frame en un archivo CSV\nwrite.csv(datos_test_predicciones, \"datos_test_predicciones.csv\", row.names = FALSE)\n```\n:::\n\n\nEs momento de calcular el porcentaje de éxito en la predicción de cuentas falsas, verdaderas y en general:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Contar el número de predicciones correctas cuando la cuenta es falsa\npredicciones_correctas_falsas <- sum(datos_test_predicciones$fake_predict_RA == datos_test_predicciones$fake & datos_test_predicciones$fake == 1)\n\n# Calcular el porcentaje de éxito en la predicción de cuentas falsas\ntotal_falsas <- sum(datos_test_predicciones$fake == 1)\nporcentaje_exito_falsas <- (predicciones_correctas_falsas / total_falsas) * 100\n\n# Contar el número de predicciones correctas cuando la cuenta es verdadera\npredicciones_correctas_verdaderas <- sum(datos_test_predicciones$fake_predict_RA == datos_test_predicciones$fake & datos_test_predicciones$fake == 0)\n\n# Calcular el porcentaje de éxito en la predicción de cuentas verdaderas\ntotal_verdaderas <- sum(datos_test_predicciones$fake == 0)\nporcentaje_exito_verdaderas <- (predicciones_correctas_verdaderas / total_verdaderas) * 100\n\n# Contar el número de predicciones correctas generales\npredicciones_correctas <- sum(datos_test_predicciones$fake_predict_RA == datos_test_predicciones$fake)\n\n# Calcular el porcentaje de éxito general\ntotal_predicciones <- nrow(datos_test_predicciones)\nporcentaje_exito_general <- (predicciones_correctas / total_predicciones) * 100\n\n# Imprimir el resultado\ncat(\"El porcentaje de éxito en la predicción de cuentas falsas es:\", porcentaje_exito_falsas, \"%\\n\", \"El porcentaje de éxito en la predicción de cuentas verdaderas es:\", porcentaje_exito_verdaderas, \"%\\n\", \"El porcentaje de éxito general en la predicción de cuentas es:\", porcentaje_exito_general, \"%\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEl porcentaje de éxito en la predicción de cuentas falsas es: 83.33333 %\n El porcentaje de éxito en la predicción de cuentas verdaderas es: 75 %\n El porcentaje de éxito general en la predicción de cuentas es: 79.16667 %\n```\n:::\n:::\n\n\nComo vemos, los porcentajes de éxito de predicción de la veracidad de la cuenta basados en las reglas de asociación son altos. Podrían mejorarse (especialmente el porcentaje para cuentas verdaderas), pero es un resultado satisfactorio.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Crear dataset con los porcentajes\nexito_predicciones <- data.frame(tipo = c(\"Reglas de Asociación\"), 'Éxito_cuentas_falsas' = c(porcentaje_exito_falsas), 'Éxito_cuentas_verdaderas' = c(porcentaje_exito_verdaderas), 'Éxito_general' = c(porcentaje_exito_general))\nexito_predicciones\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                  tipo Éxito_cuentas_falsas Éxito_cuentas_verdaderas\n1 Reglas de Asociación             83.33333                       75\n  Éxito_general\n1      79.16667\n```\n:::\n\n```{.r .cell-code}\n# Guardar el data frame en un archivo CSV\nwrite.csv(exito_predicciones, \"exito_predicciones.csv\", row.names = FALSE)\n```\n:::\n\n\n### ¿Qué patrones encontramos conociendo la veracidad o falsedad de la cuenta?\n\nEn cuanto al objetivo del proyecto, nos importa más el apartado anterior (averiguar las causas que provocan que una cuenta sea verdadera o falsa para poder identificar cuentas falsas según sus parámetros), pero también resulta interesante, al menos, ver las reglas en sentido contrario, es decir, sabiendo que una cuenta es verdadera o falsa, ¿qué valores toman los demás atributos?\n\nNo me detendré a hacer un análisis profundo de este apartado, pero encontremos y observemos las reglas resultantes, comenzando con cuentas falsas:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreglas_fake_lhs <- subset(reglas, subset = lhs %in% \"fake=1\")\nlength(reglas_fake_lhs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 23\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ninspect(reglas_fake_lhs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     lhs                                      rhs                          support confidence  coverage     lift count\n[1]  {fake=1}                              => {external_URL=0}           0.5000000  1.0000000 0.5000000 1.131631   288\n[2]  {profile_pic=0,                                                                                                  \n      fullname_words=[1,2),                                                                                           \n      nums.length_fullname=[0,0.2),                                                                                   \n      fake=1}                              => {description_length=[0,5)} 0.1805556  0.9904762 0.1822917 1.648885   104\n[3]  {profile_pic=0,                                                                                                  \n      fullname_words=[1,2),                                                                                           \n      name..username=0,                                                                                               \n      fake=1}                              => {description_length=[0,5)} 0.1996528  0.9829060 0.2031250 1.636283   115\n[4]  {fullname_words=[1,2),                                                                                           \n      name..username=0,                                                                                               \n      posts=[0,1),                                                                                                    \n      fake=1}                              => {description_length=[0,5)} 0.1701389  0.9800000 0.1736111 1.631445    98\n[5]  {profile_pic=0,                                                                                                  \n      nums.length_fullname=[0,0.2),                                                                                   \n      fake=1}                              => {description_length=[0,5)} 0.2465278  0.9793103 0.2517361 1.630297   142\n[6]  {profile_pic=0,                                                                                                  \n      name..username=0,                                                                                               \n      fake=1}                              => {description_length=[0,5)} 0.2673611  0.9746835 0.2743056 1.622595   154\n[7]  {fullname_words=[1,2),                                                                                           \n      posts=[0,1),                                                                                                    \n      fake=1}                              => {description_length=[0,5)} 0.1875000  0.9729730 0.1927083 1.619747   108\n[8]  {name..username=0,                                                                                               \n      posts=[0,1),                                                                                                    \n      fake=1}                              => {description_length=[0,5)} 0.2395833  0.9718310 0.2465278 1.617846   138\n[9]  {profile_pic=0,                                                                                                  \n      fullname_words=[1,2),                                                                                           \n      fake=1}                              => {description_length=[0,5)} 0.2170139  0.9689922 0.2239583 1.613120   125\n[10] {posts=[0,1),                                                                                                    \n      fake=1}                              => {description_length=[0,5)} 0.2569444  0.9673203 0.2656250 1.610337   148\n[11] {profile_pic=0,                                                                                                  \n      fake=1}                              => {description_length=[0,5)} 0.2847222  0.9647059 0.2951389 1.605984   164\n[12] {name..username=0,                                                                                               \n      follows=[0,26),                                                                                                 \n      fake=1}                              => {description_length=[0,5)} 0.1076389  0.9538462 0.1128472 1.587906    62\n[13] {nums.length_username=[0.368,0.552),                                                                             \n      fake=1}                              => {description_length=[0,5)} 0.1163194  0.9436620 0.1232639 1.570952    67\n[14] {follows=[0,26),                                                                                                 \n      fake=1}                              => {description_length=[0,5)} 0.1145833  0.9428571 0.1215278 1.569612    66\n[15] {fullname_words=[1,2),                                                                                           \n      nums.length_fullname=[0,0.2),                                                                                   \n      private=0,                                                                                                      \n      fake=1}                              => {description_length=[0,5)} 0.1649306  0.9134615 0.1805556 1.520676    95\n[16] {fullname_words=[1,2),                                                                                           \n      nums.length_fullname=[0,0.2),                                                                                   \n      name..username=0,                                                                                               \n      fake=1}                              => {description_length=[0,5)} 0.2517361  0.9119497 0.2760417 1.518159   145\n[17] {fullname_words=[1,2),                                                                                           \n      nums.length_fullname=[0,0.2),                                                                                   \n      fake=1}                              => {description_length=[0,5)} 0.2604167  0.9090909 0.2864583 1.513400   150\n[18] {nums.length_fullname=[0,0.2),                                                                                   \n      private=0,                                                                                                      \n      fake=1}                              => {description_length=[0,5)} 0.2430556  0.9090909 0.2673611 1.513400   140\n[19] {fullname_words=[1,2),                                                                                           \n      name..username=0,                                                                                               \n      private=0,                                                                                                      \n      fake=1}                              => {description_length=[0,5)} 0.1892361  0.9083333 0.2083333 1.512139   109\n[20] {fullname_words=[1,2),                                                                                           \n      private=0,                                                                                                      \n      fake=1}                              => {description_length=[0,5)} 0.2048611  0.9076923 0.2256944 1.511072   118\n[21] {name..username=0,                                                                                               \n      private=0,                                                                                                      \n      fake=1}                              => {description_length=[0,5)} 0.2708333  0.9069767 0.2986111 1.509880   156\n[22] {private=0,                                                                                                      \n      fake=1}                              => {description_length=[0,5)} 0.2864583  0.9065934 0.3159722 1.509242   165\n[23] {fullname_words=[1,2),                                                                                           \n      name..username=0,                                                                                               \n      fake=1}                              => {description_length=[0,5)} 0.2968750  0.9047619 0.3281250 1.506193   171\n```\n:::\n:::\n\n\nDestaca la repetida aparición de valores bajos de longitud de la descripción en el consecuente, cuando se combina la falsedad de la cuenta con otros atributos en el antecedente. No extraemos mucha información nueva.\n\nVeamos estas reglas para cuentas verdaderas:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreglas_verdaderas_lhs <- subset(reglas, subset = lhs %in% \"fake=0\")\nlength(reglas_verdaderas_lhs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 33\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ninspect(reglas_verdaderas_lhs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     lhs                                  rhs                                support confidence  coverage     lift count\n[1]  {posts=[17.6,63.7),                                                                                                \n      fake=0}                          => {profile_pic=1}                  0.1059028  1.0000000 0.1059028 1.425743    61\n[2]  {posts=[17.6,63.7),                                                                                                \n      fake=0}                          => {nums.length_fullname=[0,0.2)}   0.1059028  1.0000000 0.1059028 1.095057    61\n[3]  {follows=[521,904),                                                                                                \n      fake=0}                          => {profile_pic=1}                  0.1059028  1.0000000 0.1059028 1.425743    61\n[4]  {description_length=[5,43),                                                                                        \n      fake=0}                          => {nums.length_fullname=[0,0.2)}   0.1562500  1.0000000 0.1562500 1.095057    90\n[5]  {description_length=[43,150],                                                                                      \n      fake=0}                          => {profile_pic=1}                  0.1857639  1.0000000 0.1857639 1.425743   107\n[6]  {fullname_words=[2,12],                                                                                            \n      fake=0}                          => {profile_pic=1}                  0.3177083  1.0000000 0.3177083 1.425743   183\n[7]  {description_length=[0,5),                                                                                         \n      fake=0}                          => {profile_pic=1}                  0.1579861  1.0000000 0.1579861 1.425743    91\n[8]  {private=0,                                                                                                        \n      fake=0}                          => {profile_pic=1}                  0.3020833  1.0000000 0.3020833 1.425743   174\n[9]  {private=0,                                                                                                        \n      fake=0}                          => {name..username=0}               0.3020833  1.0000000 0.3020833 1.035971   174\n[10] {external_URL=0,                                                                                                   \n      fake=0}                          => {name..username=0}               0.3836806  1.0000000 0.3836806 1.035971   221\n[11] {fullname_words=[2,12],                                                                                            \n      private=0,                                                                                                        \n      fake=0}                          => {nums.length_fullname=[0,0.2)}   0.1996528  1.0000000 0.1996528 1.095057   115\n[12] {nums.length_username=[0,0.184),                                                                                   \n      description_length=[0,5),                                                                                         \n      fake=0}                          => {nums.length_fullname=[0,0.2)}   0.1423611  1.0000000 0.1423611 1.095057    82\n[13] {fake=0}                          => {name..username=0}               0.4982639  0.9965278 0.5000000 1.032374   287\n[14] {fullname_words=[2,12],                                                                                            \n      fake=0}                          => {nums.length_fullname=[0,0.2)}   0.3159722  0.9945355 0.3177083 1.089073   182\n[15] {fake=0}                          => {profile_pic=1}                  0.4965278  0.9930556 0.5000000 1.415842   286\n[16] {nums.length_username=[0,0.184),                                                                                   \n      fake=0}                          => {nums.length_fullname=[0,0.2)}   0.4548611  0.9924242 0.4583333 1.086761   262\n[17] {private=1,                                                                                                        \n      fake=0}                          => {nums.length_fullname=[0,0.2)}   0.1961806  0.9912281 0.1979167 1.085451   113\n[18] {description_length=[0,5),                                                                                         \n      fake=0}                          => {nums.length_fullname=[0,0.2)}   0.1562500  0.9890110 0.1579861 1.083023    90\n[19] {external_URL=0,                                                                                                   \n      fake=0}                          => {nums.length_fullname=[0,0.2)}   0.3784722  0.9864253 0.3836806 1.080192   218\n[20] {fake=0}                          => {nums.length_fullname=[0,0.2)}   0.4930556  0.9861111 0.5000000 1.079848   284\n[21] {posts=[63.7,187),                                                                                                 \n      fake=0}                          => {nums.length_username=[0,0.184)} 0.1215278  0.9722222 0.1250000 1.551247    70\n[22] {fullname_words=[2,12],                                                                                            \n      private=1,                                                                                                        \n      fake=0}                          => {nums.length_username=[0,0.184)} 0.1145833  0.9705882 0.1180556 1.548639    66\n[23] {follows=[521,904),                                                                                                \n      fake=0}                          => {nums.length_username=[0,0.184)} 0.1006944  0.9508197 0.1059028 1.517097    58\n[24] {nums.length_fullname=[0,0.2),                                                                                     \n      posts=[187,7.39e+03],                                                                                             \n      fake=0}                          => {nums.length_username=[0,0.184)} 0.1336806  0.9506173 0.1406250 1.516774    77\n[25] {posts=[187,7.39e+03],                                                                                             \n      fake=0}                          => {nums.length_username=[0,0.184)} 0.1336806  0.9390244 0.1423611 1.498277    77\n[26] {fullname_words=[2,12],                                                                                            \n      description_length=[43,150],                                                                                      \n      fake=0}                          => {nums.length_username=[0,0.184)} 0.1267361  0.9358974 0.1354167 1.493288    73\n[27] {fullname_words=[2,12],                                                                                            \n      fake=0}                          => {nums.length_username=[0,0.184)} 0.2968750  0.9344262 0.3177083 1.490940   171\n[28] {nums.length_fullname=[0,0.2),                                                                                     \n      description_length=[43,150],                                                                                      \n      fake=0}                          => {nums.length_username=[0,0.184)} 0.1684028  0.9326923 0.1805556 1.488174    97\n[29] {private=1,                                                                                                        \n      fake=0}                          => {nums.length_username=[0,0.184)} 0.1840278  0.9298246 0.1979167 1.483598   106\n[30] {description_length=[43,150],                                                                                      \n      fake=0}                          => {nums.length_username=[0,0.184)} 0.1718750  0.9252336 0.1857639 1.476273    99\n[31] {nums.length_fullname=[0,0.2),                                                                                     \n      fake=0}                          => {nums.length_username=[0,0.184)} 0.4548611  0.9225352 0.4930556 1.471968   262\n[32] {description_length=[5,43),                                                                                        \n      fake=0}                          => {nums.length_username=[0,0.184)} 0.1440972  0.9222222 0.1562500 1.471468    83\n[33] {fake=0}                          => {nums.length_username=[0,0.184)} 0.4583333  0.9166667 0.5000000 1.462604   264\n```\n:::\n:::\n\n\nDestaca la repetida aparición en los consecuentes de la presencia de foto de perfil, la ausencia de coincidencia de nombre completo y nombre de usuario y el primer intervalo de valores de los ratios de números en la longitud del username y del fullname.\n\n",
    "supporting": [
      "reglas_asociacion_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}